<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="6003"><g><title>BN_gcd (1 samples, 0.02%)</title><rect x="0.0000%" y="1077" width="0.0167%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>BN_add (1 samples, 0.02%)</title><rect x="0.0000%" y="1061" width="0.0167%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0167%" y="645" width="0.0167%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2667%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0167%" y="629" width="0.0167%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2667%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0167%" y="613" width="0.0167%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2667%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="0.0167%" y="597" width="0.0167%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2667%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="0.0167%" y="581" width="0.0167%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2667%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="1061" width="0.0333%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.2667%" y="1071.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="1045" width="0.0333%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.2667%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="1029" width="0.0333%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.2667%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="0.0167%" y="1013" width="0.0333%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.2667%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="997" width="0.0333%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.2667%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="981" width="0.0333%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="2"/><text x="0.2667%" y="991.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="965" width="0.0333%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="2"/><text x="0.2667%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="949" width="0.0333%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="2"/><text x="0.2667%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="0.0167%" y="933" width="0.0333%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="2"/><text x="0.2667%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="917" width="0.0333%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="2"/><text x="0.2667%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="901" width="0.0333%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="2"/><text x="0.2667%" y="911.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="885" width="0.0333%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="2"/><text x="0.2667%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="869" width="0.0333%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="2"/><text x="0.2667%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="0.0167%" y="853" width="0.0333%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="2"/><text x="0.2667%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="837" width="0.0333%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="2"/><text x="0.2667%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="821" width="0.0333%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="2"/><text x="0.2667%" y="831.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="805" width="0.0333%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="2"/><text x="0.2667%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="789" width="0.0333%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="2"/><text x="0.2667%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="0.0167%" y="773" width="0.0333%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="2"/><text x="0.2667%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="757" width="0.0333%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="2"/><text x="0.2667%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="741" width="0.0333%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="2"/><text x="0.2667%" y="751.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="725" width="0.0333%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="2"/><text x="0.2667%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.0167%" y="709" width="0.0333%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="2"/><text x="0.2667%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="0.0167%" y="693" width="0.0333%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="2"/><text x="0.2667%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="677" width="0.0333%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="2"/><text x="0.2667%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="0.0167%" y="661" width="0.0333%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="2"/><text x="0.2667%" y="671.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0333%" y="645" width="0.0167%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.2833%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0333%" y="629" width="0.0167%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.2833%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0333%" y="613" width="0.0167%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.2833%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0333%" y="597" width="0.0167%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="0.2833%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0333%" y="581" width="0.0167%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="0.2833%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.0333%" y="565" width="0.0167%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="0.2833%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.0333%" y="549" width="0.0167%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="1"/><text x="0.2833%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.0333%" y="533" width="0.0167%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="1"/><text x="0.2833%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.0333%" y="517" width="0.0167%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="1"/><text x="0.2833%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.0333%" y="501" width="0.0167%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="1"/><text x="0.2833%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="0.0333%" y="485" width="0.0167%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="1"/><text x="0.2833%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="0.0333%" y="469" width="0.0167%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="1"/><text x="0.2833%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="1061" width="0.0167%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.3000%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="1045" width="0.0167%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.3000%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="1029" width="0.0167%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.3000%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="1013" width="0.0167%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="0.3000%" y="1023.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="997" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="0.3000%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="981" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="0.3000%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="965" width="0.0167%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="0.3000%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="949" width="0.0167%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="0.3000%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="933" width="0.0167%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="1"/><text x="0.3000%" y="943.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="917" width="0.0167%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="1"/><text x="0.3000%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="901" width="0.0167%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="1"/><text x="0.3000%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="885" width="0.0167%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="1"/><text x="0.3000%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="869" width="0.0167%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="1"/><text x="0.3000%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="853" width="0.0167%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="1"/><text x="0.3000%" y="863.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="837" width="0.0167%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="1"/><text x="0.3000%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="821" width="0.0167%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="1"/><text x="0.3000%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="805" width="0.0167%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="1"/><text x="0.3000%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="789" width="0.0167%" height="15" fill="rgb(210,229,1)" fg:x="3" fg:w="1"/><text x="0.3000%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="773" width="0.0167%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="1"/><text x="0.3000%" y="783.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="757" width="0.0167%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="1"/><text x="0.3000%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="741" width="0.0167%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="1"/><text x="0.3000%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="725" width="0.0167%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="1"/><text x="0.3000%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="709" width="0.0167%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="1"/><text x="0.3000%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="693" width="0.0167%" height="15" fill="rgb(246,177,23)" fg:x="3" fg:w="1"/><text x="0.3000%" y="703.50"></text></g><g><title>&lt;matchit::tree::Node&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="677" width="0.0167%" height="15" fill="rgb(230,62,27)" fg:x="3" fg:w="1"/><text x="0.3000%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0500%" y="661" width="0.0167%" height="15" fill="rgb(216,154,8)" fg:x="3" fg:w="1"/><text x="0.3000%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0500%" y="645" width="0.0167%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="1"/><text x="0.3000%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="629" width="0.0167%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="1"/><text x="0.3000%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0500%" y="613" width="0.0167%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="1"/><text x="0.3000%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.0500%" y="597" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="1"/><text x="0.3000%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.0500%" y="581" width="0.0167%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="1"/><text x="0.3000%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.0500%" y="565" width="0.0167%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="1"/><text x="0.3000%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="0.0500%" y="549" width="0.0167%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="1"/><text x="0.3000%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.02%)</title><rect x="0.0500%" y="533" width="0.0167%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="1"/><text x="0.3000%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.02%)</title><rect x="0.0500%" y="517" width="0.0167%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="1"/><text x="0.3000%" y="527.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::nest (1 samples, 0.02%)</title><rect x="0.0666%" y="1061" width="0.0167%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="1"/><text x="0.3166%" y="1071.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::route (1 samples, 0.02%)</title><rect x="0.0666%" y="1045" width="0.0167%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="1"/><text x="0.3166%" y="1055.50"></text></g><g><title>axum::routing::Node::insert (1 samples, 0.02%)</title><rect x="0.0666%" y="1029" width="0.0167%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="1"/><text x="0.3166%" y="1039.50"></text></g><g><title>matchit::tree::Node&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="0.0666%" y="1013" width="0.0167%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="1"/><text x="0.3166%" y="1023.50"></text></g><g><title>matchit::tree::Node&lt;T&gt;::insert_child (1 samples, 0.02%)</title><rect x="0.0666%" y="997" width="0.0167%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="1"/><text x="0.3166%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="0.0666%" y="981" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="1"/><text x="0.3166%" y="991.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.0666%" y="965" width="0.0167%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="1"/><text x="0.3166%" y="975.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.0666%" y="949" width="0.0167%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="1"/><text x="0.3166%" y="959.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="0.0666%" y="933" width="0.0167%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="1"/><text x="0.3166%" y="943.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.02%)</title><rect x="0.0666%" y="917" width="0.0167%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="1"/><text x="0.3166%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.02%)</title><rect x="0.0833%" y="1013" width="0.0167%" height="15" fill="rgb(224,169,11)" fg:x="5" fg:w="1"/><text x="0.3333%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="0.0833%" y="997" width="0.0167%" height="15" fill="rgb(250,166,2)" fg:x="5" fg:w="1"/><text x="0.3333%" y="1007.50"></text></g><g><title>tokio::loom::std::sys::num_cpus (1 samples, 0.02%)</title><rect x="0.0833%" y="981" width="0.0167%" height="15" fill="rgb(242,216,29)" fg:x="5" fg:w="1"/><text x="0.3333%" y="991.50"></text></g><g><title>num_cpus::get (1 samples, 0.02%)</title><rect x="0.0833%" y="965" width="0.0167%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="1"/><text x="0.3333%" y="975.50"></text></g><g><title>num_cpus::linux::get_num_cpus (1 samples, 0.02%)</title><rect x="0.0833%" y="949" width="0.0167%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="1"/><text x="0.3333%" y="959.50"></text></g><g><title>num_cpus::linux::logical_cpus (1 samples, 0.02%)</title><rect x="0.0833%" y="933" width="0.0167%" height="15" fill="rgb(253,11,6)" fg:x="5" fg:w="1"/><text x="0.3333%" y="943.50"></text></g><g><title>libc::unix::linux_like::linux::CPU_ISSET (1 samples, 0.02%)</title><rect x="0.0833%" y="917" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="1"/><text x="0.3333%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::new (1 samples, 0.02%)</title><rect x="0.1000%" y="1013" width="0.0167%" height="15" fill="rgb(236,97,10)" fg:x="6" fg:w="1"/><text x="0.3500%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::create (1 samples, 0.02%)</title><rect x="0.1000%" y="997" width="0.0167%" height="15" fill="rgb(233,208,19)" fg:x="6" fg:w="1"/><text x="0.3500%" y="1007.50"></text></g><g><title>tokio::runtime::queue::local (1 samples, 0.02%)</title><rect x="0.1000%" y="981" width="0.0167%" height="15" fill="rgb(216,164,2)" fg:x="6" fg:w="1"/><text x="0.3500%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="0.1000%" y="965" width="0.0167%" height="15" fill="rgb(220,129,5)" fg:x="6" fg:w="1"/><text x="0.3500%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1 samples, 0.02%)</title><rect x="0.1166%" y="997" width="0.0167%" height="15" fill="rgb(242,17,10)" fg:x="7" fg:w="1"/><text x="0.3666%" y="1007.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.02%)</title><rect x="0.1166%" y="981" width="0.0167%" height="15" fill="rgb(242,107,0)" fg:x="7" fg:w="1"/><text x="0.3666%" y="991.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.02%)</title><rect x="0.1166%" y="965" width="0.0167%" height="15" fill="rgb(251,28,31)" fg:x="7" fg:w="1"/><text x="0.3666%" y="975.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.08%)</title><rect x="0.1333%" y="933" width="0.0833%" height="15" fill="rgb(233,223,10)" fg:x="8" fg:w="5"/><text x="0.3833%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.08%)</title><rect x="0.1333%" y="917" width="0.0833%" height="15" fill="rgb(215,21,27)" fg:x="8" fg:w="5"/><text x="0.3833%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (4 samples, 0.07%)</title><rect x="0.1499%" y="901" width="0.0666%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="4"/><text x="0.3999%" y="911.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (4 samples, 0.07%)</title><rect x="0.1499%" y="885" width="0.0666%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="4"/><text x="0.3999%" y="895.50"></text></g><g><title>__pthread_mutex_lock (4 samples, 0.07%)</title><rect x="0.1499%" y="869" width="0.0666%" height="15" fill="rgb(226,81,46)" fg:x="9" fg:w="4"/><text x="0.3999%" y="879.50"></text></g><g><title>__lll_lock_wait (4 samples, 0.07%)</title><rect x="0.1499%" y="853" width="0.0666%" height="15" fill="rgb(247,70,30)" fg:x="9" fg:w="4"/><text x="0.3999%" y="863.50"></text></g><g><title>fydia::main (9 samples, 0.15%)</title><rect x="0.0833%" y="1061" width="0.1499%" height="15" fill="rgb(212,68,19)" fg:x="5" fg:w="9"/><text x="0.3333%" y="1071.50"></text></g><g><title>tokio::runtime::builder::Builder::build (9 samples, 0.15%)</title><rect x="0.0833%" y="1045" width="0.1499%" height="15" fill="rgb(240,187,13)" fg:x="5" fg:w="9"/><text x="0.3333%" y="1055.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (9 samples, 0.15%)</title><rect x="0.0833%" y="1029" width="0.1499%" height="15" fill="rgb(223,113,26)" fg:x="5" fg:w="9"/><text x="0.3333%" y="1039.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch (7 samples, 0.12%)</title><rect x="0.1166%" y="1013" width="0.1166%" height="15" fill="rgb(206,192,2)" fg:x="7" fg:w="7"/><text x="0.3666%" y="1023.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.10%)</title><rect x="0.1333%" y="997" width="0.1000%" height="15" fill="rgb(241,108,4)" fg:x="8" fg:w="6"/><text x="0.3833%" y="1007.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (6 samples, 0.10%)</title><rect x="0.1333%" y="981" width="0.1000%" height="15" fill="rgb(247,173,49)" fg:x="8" fg:w="6"/><text x="0.3833%" y="991.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking_inner (6 samples, 0.10%)</title><rect x="0.1333%" y="965" width="0.1000%" height="15" fill="rgb(224,114,35)" fg:x="8" fg:w="6"/><text x="0.3833%" y="975.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn (6 samples, 0.10%)</title><rect x="0.1333%" y="949" width="0.1000%" height="15" fill="rgb(245,159,27)" fg:x="8" fg:w="6"/><text x="0.3833%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (1 samples, 0.02%)</title><rect x="0.2166%" y="933" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="0.4666%" y="943.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="1045" width="0.0167%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="1"/><text x="0.4832%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="0.2332%" y="1029" width="0.0167%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="1"/><text x="0.4832%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.2332%" y="1013" width="0.0167%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="1"/><text x="0.4832%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="0.2332%" y="997" width="0.0167%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="1"/><text x="0.4832%" y="1007.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="0.2332%" y="981" width="0.0167%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="1"/><text x="0.4832%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="0.2332%" y="965" width="0.0167%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="1"/><text x="0.4832%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.2332%" y="949" width="0.0167%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="1"/><text x="0.4832%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.2332%" y="933" width="0.0167%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="1"/><text x="0.4832%" y="943.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.02%)</title><rect x="0.2332%" y="917" width="0.0167%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="1"/><text x="0.4832%" y="927.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::layer::{{closure}} (1 samples, 0.02%)</title><rect x="0.2332%" y="901" width="0.0167%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="0.4832%" y="911.50"></text></g><g><title>&lt;tower::builder::ServiceBuilder&lt;L&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="885" width="0.0167%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="0.4832%" y="895.50"></text></g><g><title>&lt;tower_layer::stack::Stack&lt;Inner,Outer&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="869" width="0.0167%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="0.4832%" y="879.50"></text></g><g><title>&lt;tower_layer::stack::Stack&lt;Inner,Outer&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="853" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="1"/><text x="0.4832%" y="863.50"></text></g><g><title>&lt;tower_layer::stack::Stack&lt;Inner,Outer&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="837" width="0.0167%" height="15" fill="rgb(213,55,15)" fg:x="14" fg:w="1"/><text x="0.4832%" y="847.50"></text></g><g><title>&lt;tower_layer::layer_fn::LayerFn&lt;F&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.2332%" y="821" width="0.0167%" height="15" fill="rgb(209,9,3)" fg:x="14" fg:w="1"/><text x="0.4832%" y="831.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::nest (1 samples, 0.02%)</title><rect x="0.2499%" y="1045" width="0.0167%" height="15" fill="rgb(230,59,30)" fg:x="15" fg:w="1"/><text x="0.4999%" y="1055.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::route (1 samples, 0.02%)</title><rect x="0.2499%" y="1029" width="0.0167%" height="15" fill="rgb(209,121,21)" fg:x="15" fg:w="1"/><text x="0.4999%" y="1039.50"></text></g><g><title>axum::routing::Node::insert (1 samples, 0.02%)</title><rect x="0.2499%" y="1013" width="0.0167%" height="15" fill="rgb(220,109,13)" fg:x="15" fg:w="1"/><text x="0.4999%" y="1023.50"></text></g><g><title>matchit::tree::Node&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="0.2499%" y="997" width="0.0167%" height="15" fill="rgb(232,18,1)" fg:x="15" fg:w="1"/><text x="0.4999%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (1 samples, 0.02%)</title><rect x="0.2499%" y="981" width="0.0167%" height="15" fill="rgb(215,41,42)" fg:x="15" fg:w="1"/><text x="0.4999%" y="991.50"></text></g><g><title>alloc::slice::hack::into_vec (1 samples, 0.02%)</title><rect x="0.2499%" y="965" width="0.0167%" height="15" fill="rgb(224,123,36)" fg:x="15" fg:w="1"/><text x="0.4999%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.02%)</title><rect x="0.2499%" y="949" width="0.0167%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="1"/><text x="0.4999%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.02%)</title><rect x="0.2499%" y="933" width="0.0167%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="1"/><text x="0.4999%" y="943.50"></text></g><g><title>RAND_get0_private (1 samples, 0.02%)</title><rect x="0.2665%" y="981" width="0.0167%" height="15" fill="rgb(205,185,37)" fg:x="16" fg:w="1"/><text x="0.5165%" y="991.50"></text></g><g><title>RAND_get0_primary (1 samples, 0.02%)</title><rect x="0.2665%" y="965" width="0.0167%" height="15" fill="rgb(238,207,15)" fg:x="16" fg:w="1"/><text x="0.5165%" y="975.50"></text></g><g><title>rand_new_drbg (1 samples, 0.02%)</title><rect x="0.2665%" y="949" width="0.0167%" height="15" fill="rgb(213,199,42)" fg:x="16" fg:w="1"/><text x="0.5165%" y="959.50"></text></g><g><title>EVP_RAND_instantiate (1 samples, 0.02%)</title><rect x="0.2665%" y="933" width="0.0167%" height="15" fill="rgb(235,201,11)" fg:x="16" fg:w="1"/><text x="0.5165%" y="943.50"></text></g><g><title>drbg_ctr_instantiate_wrapper (1 samples, 0.02%)</title><rect x="0.2665%" y="917" width="0.0167%" height="15" fill="rgb(207,46,11)" fg:x="16" fg:w="1"/><text x="0.5165%" y="927.50"></text></g><g><title>drbg_ctr_set_ctx_params (1 samples, 0.02%)</title><rect x="0.2665%" y="901" width="0.0167%" height="15" fill="rgb(241,35,35)" fg:x="16" fg:w="1"/><text x="0.5165%" y="911.50"></text></g><g><title>EVP_CIPHER_fetch (1 samples, 0.02%)</title><rect x="0.2665%" y="885" width="0.0167%" height="15" fill="rgb(243,32,47)" fg:x="16" fg:w="1"/><text x="0.5165%" y="895.50"></text></g><g><title>evp_generic_fetch (1 samples, 0.02%)</title><rect x="0.2665%" y="869" width="0.0167%" height="15" fill="rgb(247,202,23)" fg:x="16" fg:w="1"/><text x="0.5165%" y="879.50"></text></g><g><title>inner_evp_generic_fetch.constprop.0 (1 samples, 0.02%)</title><rect x="0.2665%" y="853" width="0.0167%" height="15" fill="rgb(219,102,11)" fg:x="16" fg:w="1"/><text x="0.5165%" y="863.50"></text></g><g><title>ossl_method_construct (1 samples, 0.02%)</title><rect x="0.2665%" y="837" width="0.0167%" height="15" fill="rgb(243,110,44)" fg:x="16" fg:w="1"/><text x="0.5165%" y="847.50"></text></g><g><title>ossl_algorithm_do_all (1 samples, 0.02%)</title><rect x="0.2665%" y="821" width="0.0167%" height="15" fill="rgb(222,74,54)" fg:x="16" fg:w="1"/><text x="0.5165%" y="831.50"></text></g><g><title>ossl_provider_doall_activated (1 samples, 0.02%)</title><rect x="0.2665%" y="805" width="0.0167%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="1"/><text x="0.5165%" y="815.50"></text></g><g><title>algorithm_do_this (1 samples, 0.02%)</title><rect x="0.2665%" y="789" width="0.0167%" height="15" fill="rgb(226,22,26)" fg:x="16" fg:w="1"/><text x="0.5165%" y="799.50"></text></g><g><title>ossl_method_construct_this (1 samples, 0.02%)</title><rect x="0.2665%" y="773" width="0.0167%" height="15" fill="rgb(217,163,10)" fg:x="16" fg:w="1"/><text x="0.5165%" y="783.50"></text></g><g><title>put_evp_method_in_store (1 samples, 0.02%)</title><rect x="0.2665%" y="757" width="0.0167%" height="15" fill="rgb(213,25,53)" fg:x="16" fg:w="1"/><text x="0.5165%" y="767.50"></text></g><g><title>ossl_method_store_add (1 samples, 0.02%)</title><rect x="0.2665%" y="741" width="0.0167%" height="15" fill="rgb(252,105,26)" fg:x="16" fg:w="1"/><text x="0.5165%" y="751.50"></text></g><g><title>ossl_sa_set (1 samples, 0.02%)</title><rect x="0.2665%" y="725" width="0.0167%" height="15" fill="rgb(220,39,43)" fg:x="16" fg:w="1"/><text x="0.5165%" y="735.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.02%)</title><rect x="0.2665%" y="709" width="0.0167%" height="15" fill="rgb(229,68,48)" fg:x="16" fg:w="1"/><text x="0.5165%" y="719.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="0.2665%" y="693" width="0.0167%" height="15" fill="rgb(252,8,32)" fg:x="16" fg:w="1"/><text x="0.5165%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2665%" y="677" width="0.0167%" height="15" fill="rgb(223,20,43)" fg:x="16" fg:w="1"/><text x="0.5165%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2665%" y="661" width="0.0167%" height="15" fill="rgb(229,81,49)" fg:x="16" fg:w="1"/><text x="0.5165%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2665%" y="645" width="0.0167%" height="15" fill="rgb(236,28,36)" fg:x="16" fg:w="1"/><text x="0.5165%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2665%" y="629" width="0.0167%" height="15" fill="rgb(249,185,26)" fg:x="16" fg:w="1"/><text x="0.5165%" y="639.50"></text></g><g><title>BN_MONT_CTX_set (1 samples, 0.02%)</title><rect x="0.2832%" y="901" width="0.0167%" height="15" fill="rgb(249,174,33)" fg:x="17" fg:w="1"/><text x="0.5332%" y="911.50"></text></g><g><title>BN_mod_inverse (1 samples, 0.02%)</title><rect x="0.2832%" y="885" width="0.0167%" height="15" fill="rgb(233,201,37)" fg:x="17" fg:w="1"/><text x="0.5332%" y="895.50"></text></g><g><title>int_bn_mod_inverse (1 samples, 0.02%)</title><rect x="0.2832%" y="869" width="0.0167%" height="15" fill="rgb(221,78,26)" fg:x="17" fg:w="1"/><text x="0.5332%" y="879.50"></text></g><g><title>BN_add (1 samples, 0.02%)</title><rect x="0.2832%" y="853" width="0.0167%" height="15" fill="rgb(250,127,30)" fg:x="17" fg:w="1"/><text x="0.5332%" y="863.50"></text></g><g><title>BN_uadd (1 samples, 0.02%)</title><rect x="0.2832%" y="837" width="0.0167%" height="15" fill="rgb(230,49,44)" fg:x="17" fg:w="1"/><text x="0.5332%" y="847.50"></text></g><g><title>bn_rsa_fips186_4_find_aux_prob_prime (3 samples, 0.05%)</title><rect x="0.2832%" y="949" width="0.0500%" height="15" fill="rgb(229,67,23)" fg:x="17" fg:w="3"/><text x="0.5332%" y="959.50"></text></g><g><title>bn_is_prime_int (3 samples, 0.05%)</title><rect x="0.2832%" y="933" width="0.0500%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="3"/><text x="0.5332%" y="943.50"></text></g><g><title>ossl_bn_miller_rabin_is_prime (3 samples, 0.05%)</title><rect x="0.2832%" y="917" width="0.0500%" height="15" fill="rgb(215,43,3)" fg:x="17" fg:w="3"/><text x="0.5332%" y="927.50"></text></g><g><title>BN_mod_exp_mont_consttime (2 samples, 0.03%)</title><rect x="0.2999%" y="901" width="0.0333%" height="15" fill="rgb(238,154,13)" fg:x="18" fg:w="2"/><text x="0.5499%" y="911.50"></text></g><g><title>bn_mul_mont_fixed_top (2 samples, 0.03%)</title><rect x="0.2999%" y="885" width="0.0333%" height="15" fill="rgb(219,56,2)" fg:x="18" fg:w="2"/><text x="0.5499%" y="895.50"></text></g><g><title>bn_mul_mont (1 samples, 0.02%)</title><rect x="0.3165%" y="869" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="0.5665%" y="879.50"></text></g><g><title>bn_add_words (2 samples, 0.03%)</title><rect x="0.6997%" y="885" width="0.0333%" height="15" fill="rgb(235,30,7)" fg:x="42" fg:w="2"/><text x="0.9497%" y="895.50"></text></g><g><title>BN_uadd (10 samples, 0.17%)</title><rect x="0.5997%" y="901" width="0.1666%" height="15" fill="rgb(250,79,13)" fg:x="36" fg:w="10"/><text x="0.8497%" y="911.50"></text></g><g><title>bn_wexpand (2 samples, 0.03%)</title><rect x="0.7330%" y="885" width="0.0333%" height="15" fill="rgb(211,146,34)" fg:x="44" fg:w="2"/><text x="0.9830%" y="895.50"></text></g><g><title>BN_ucmp (1 samples, 0.02%)</title><rect x="0.7663%" y="901" width="0.0167%" height="15" fill="rgb(228,22,38)" fg:x="46" fg:w="1"/><text x="1.0163%" y="911.50"></text></g><g><title>BN_add (19 samples, 0.32%)</title><rect x="0.5497%" y="917" width="0.3165%" height="15" fill="rgb(235,168,5)" fg:x="33" fg:w="19"/><text x="0.7997%" y="927.50"></text></g><g><title>BN_usub (5 samples, 0.08%)</title><rect x="0.7829%" y="901" width="0.0833%" height="15" fill="rgb(221,155,16)" fg:x="47" fg:w="5"/><text x="1.0329%" y="911.50"></text></g><g><title>bn_wexpand (1 samples, 0.02%)</title><rect x="0.8496%" y="885" width="0.0167%" height="15" fill="rgb(215,215,53)" fg:x="51" fg:w="1"/><text x="1.0996%" y="895.50"></text></g><g><title>BN_consttime_swap (36 samples, 0.60%)</title><rect x="0.8662%" y="917" width="0.5997%" height="15" fill="rgb(223,4,10)" fg:x="52" fg:w="36"/><text x="1.1162%" y="927.50"></text></g><g><title>BN_gcd (77 samples, 1.28%)</title><rect x="0.3332%" y="933" width="1.2827%" height="15" fill="rgb(234,103,6)" fg:x="20" fg:w="77"/><text x="0.5832%" y="943.50"></text></g><g><title>BN_rshift1 (9 samples, 0.15%)</title><rect x="1.4659%" y="917" width="0.1499%" height="15" fill="rgb(227,97,0)" fg:x="88" fg:w="9"/><text x="1.7159%" y="927.50"></text></g><g><title>BN_is_zero (1 samples, 0.02%)</title><rect x="1.5992%" y="901" width="0.0167%" height="15" fill="rgb(234,150,53)" fg:x="96" fg:w="1"/><text x="1.8492%" y="911.50"></text></g><g><title>BN_mod_word (5 samples, 0.08%)</title><rect x="1.6159%" y="917" width="0.0833%" height="15" fill="rgb(228,201,54)" fg:x="97" fg:w="5"/><text x="1.8659%" y="927.50"></text></g><g><title>BN_num_bits (1 samples, 0.02%)</title><rect x="1.6992%" y="917" width="0.0167%" height="15" fill="rgb(222,22,37)" fg:x="102" fg:w="1"/><text x="1.9492%" y="927.50"></text></g><g><title>BN_num_bits_word (1 samples, 0.02%)</title><rect x="1.6992%" y="901" width="0.0167%" height="15" fill="rgb(237,53,32)" fg:x="102" fg:w="1"/><text x="1.9492%" y="911.50"></text></g><g><title>OPENSSL_cleanse (1 samples, 0.02%)</title><rect x="1.7158%" y="885" width="0.0167%" height="15" fill="rgb(233,25,53)" fg:x="103" fg:w="1"/><text x="1.9658%" y="895.50"></text></g><g><title>__bn_postx4x_internal (2 samples, 0.03%)</title><rect x="1.7325%" y="869" width="0.0333%" height="15" fill="rgb(210,40,34)" fg:x="104" fg:w="2"/><text x="1.9825%" y="879.50"></text></g><g><title>__bn_sqrx8x_reduction (36 samples, 0.60%)</title><rect x="1.7658%" y="869" width="0.5997%" height="15" fill="rgb(241,220,44)" fg:x="106" fg:w="36"/><text x="2.0158%" y="879.50"></text></g><g><title>bn_sqrx8x_internal (14 samples, 0.23%)</title><rect x="2.3655%" y="869" width="0.2332%" height="15" fill="rgb(235,28,35)" fg:x="142" fg:w="14"/><text x="2.6155%" y="879.50"></text></g><g><title>bn_powerx5 (66 samples, 1.10%)</title><rect x="1.7325%" y="885" width="1.0995%" height="15" fill="rgb(210,56,17)" fg:x="104" fg:w="66"/><text x="1.9825%" y="895.50"></text></g><g><title>mulx4x_internal (14 samples, 0.23%)</title><rect x="2.5987%" y="869" width="0.2332%" height="15" fill="rgb(224,130,29)" fg:x="156" fg:w="14"/><text x="2.8487%" y="879.50"></text></g><g><title>__bn_sqrx8x_reduction (1 samples, 0.02%)</title><rect x="2.8319%" y="869" width="0.0167%" height="15" fill="rgb(235,212,8)" fg:x="170" fg:w="1"/><text x="3.0819%" y="879.50"></text></g><g><title>ossl_rsa_fips186_4_gen_prob_primes (155 samples, 2.58%)</title><rect x="0.2832%" y="981" width="2.5820%" height="15" fill="rgb(223,33,50)" fg:x="17" fg:w="155"/><text x="0.5332%" y="991.50">os..</text></g><g><title>ossl_bn_rsa_fips186_4_gen_prob_primes (155 samples, 2.58%)</title><rect x="0.2832%" y="965" width="2.5820%" height="15" fill="rgb(219,149,13)" fg:x="17" fg:w="155"/><text x="0.5332%" y="975.50">os..</text></g><g><title>ossl_bn_rsa_fips186_4_derive_prime (152 samples, 2.53%)</title><rect x="0.3332%" y="949" width="2.5321%" height="15" fill="rgb(250,156,29)" fg:x="20" fg:w="152"/><text x="0.5832%" y="959.50">os..</text></g><g><title>bn_is_prime_int (75 samples, 1.25%)</title><rect x="1.6159%" y="933" width="1.2494%" height="15" fill="rgb(216,193,19)" fg:x="97" fg:w="75"/><text x="1.8659%" y="943.50"></text></g><g><title>ossl_bn_miller_rabin_is_prime (69 samples, 1.15%)</title><rect x="1.7158%" y="917" width="1.1494%" height="15" fill="rgb(216,135,14)" fg:x="103" fg:w="69"/><text x="1.9658%" y="927.50"></text></g><g><title>BN_mod_exp_mont_consttime (69 samples, 1.15%)</title><rect x="1.7158%" y="901" width="1.1494%" height="15" fill="rgb(241,47,5)" fg:x="103" fg:w="69"/><text x="1.9658%" y="911.50"></text></g><g><title>bn_sqr8x_mont (2 samples, 0.03%)</title><rect x="2.8319%" y="885" width="0.0333%" height="15" fill="rgb(233,42,35)" fg:x="170" fg:w="2"/><text x="3.0819%" y="895.50"></text></g><g><title>bn_sqrx8x_internal (1 samples, 0.02%)</title><rect x="2.8486%" y="869" width="0.0167%" height="15" fill="rgb(231,13,6)" fg:x="171" fg:w="1"/><text x="3.0986%" y="879.50"></text></g><g><title>__bn_sqrx8x_reduction (1 samples, 0.02%)</title><rect x="2.8652%" y="933" width="0.0167%" height="15" fill="rgb(207,181,40)" fg:x="172" fg:w="1"/><text x="3.1152%" y="943.50"></text></g><g><title>fydia_router::get_axum_router::{{closure}} (161 samples, 2.68%)</title><rect x="0.2332%" y="1061" width="2.6820%" height="15" fill="rgb(254,173,49)" fg:x="14" fg:w="161"/><text x="0.4832%" y="1071.50">fy..</text></g><g><title>fydia_crypto::key::generate::generate_key (159 samples, 2.65%)</title><rect x="0.2665%" y="1045" width="2.6487%" height="15" fill="rgb(221,1,38)" fg:x="16" fg:w="159"/><text x="0.5165%" y="1055.50">fy..</text></g><g><title>openssl::rsa::Rsa&lt;openssl::pkey::Private&gt;::generate (159 samples, 2.65%)</title><rect x="0.2665%" y="1029" width="2.6487%" height="15" fill="rgb(206,124,46)" fg:x="16" fg:w="159"/><text x="0.5165%" y="1039.50">op..</text></g><g><title>openssl::rsa::Rsa&lt;openssl::pkey::Private&gt;::generate_with_e (159 samples, 2.65%)</title><rect x="0.2665%" y="1013" width="2.6487%" height="15" fill="rgb(249,21,11)" fg:x="16" fg:w="159"/><text x="0.5165%" y="1023.50">op..</text></g><g><title>ossl_rsa_sp800_56b_generate_key (159 samples, 2.65%)</title><rect x="0.2665%" y="997" width="2.6487%" height="15" fill="rgb(222,201,40)" fg:x="16" fg:w="159"/><text x="0.5165%" y="1007.50">os..</text></g><g><title>ossl_rsa_sp800_56b_pairwise_test (3 samples, 0.05%)</title><rect x="2.8652%" y="981" width="0.0500%" height="15" fill="rgb(235,61,29)" fg:x="172" fg:w="3"/><text x="3.1152%" y="991.50"></text></g><g><title>BN_mod_exp_mont_consttime (3 samples, 0.05%)</title><rect x="2.8652%" y="965" width="0.0500%" height="15" fill="rgb(219,207,3)" fg:x="172" fg:w="3"/><text x="3.1152%" y="975.50"></text></g><g><title>bn_powerx5 (3 samples, 0.05%)</title><rect x="2.8652%" y="949" width="0.0500%" height="15" fill="rgb(222,56,46)" fg:x="172" fg:w="3"/><text x="3.1152%" y="959.50"></text></g><g><title>bn_sqrx8x_internal (2 samples, 0.03%)</title><rect x="2.8819%" y="933" width="0.0333%" height="15" fill="rgb(239,76,54)" fg:x="173" fg:w="2"/><text x="3.1319%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9152%" y="421" width="0.0167%" height="15" fill="rgb(231,124,27)" fg:x="175" fg:w="1"/><text x="3.1652%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="2.9152%" y="405" width="0.0167%" height="15" fill="rgb(249,195,6)" fg:x="175" fg:w="1"/><text x="3.1652%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="2.9152%" y="389" width="0.0167%" height="15" fill="rgb(237,174,47)" fg:x="175" fg:w="1"/><text x="3.1652%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9319%" y="85" width="0.0167%" height="15" fill="rgb(206,201,31)" fg:x="176" fg:w="1"/><text x="3.1819%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="2.9319%" y="69" width="0.0167%" height="15" fill="rgb(231,57,52)" fg:x="176" fg:w="1"/><text x="3.1819%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="2.9319%" y="53" width="0.0167%" height="15" fill="rgb(248,177,22)" fg:x="176" fg:w="1"/><text x="3.1819%" y="63.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="2.9319%" y="117" width="0.0333%" height="15" fill="rgb(215,211,37)" fg:x="176" fg:w="2"/><text x="3.1819%" y="127.50"></text></g><g><title>&lt;axum::routing::strip_prefix::StripPrefix&lt;S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="2.9319%" y="101" width="0.0333%" height="15" fill="rgb(241,128,51)" fg:x="176" fg:w="2"/><text x="3.1819%" y="111.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9485%" y="85" width="0.0167%" height="15" fill="rgb(227,165,31)" fg:x="177" fg:w="1"/><text x="3.1985%" y="95.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9485%" y="69" width="0.0167%" height="15" fill="rgb(228,167,24)" fg:x="177" fg:w="1"/><text x="3.1985%" y="79.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="2.9485%" y="53" width="0.0167%" height="15" fill="rgb(228,143,12)" fg:x="177" fg:w="1"/><text x="3.1985%" y="63.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="2.9485%" y="37" width="0.0167%" height="15" fill="rgb(249,149,8)" fg:x="177" fg:w="1"/><text x="3.1985%" y="47.50"></text></g><g><title>hyper::server::conn::Serve&lt;I,S,E&gt;::poll_next_ (5 samples, 0.08%)</title><rect x="2.9152%" y="1061" width="0.0833%" height="15" fill="rgb(243,35,44)" fg:x="175" fg:w="5"/><text x="3.1652%" y="1071.50"></text></g><g><title>&lt;T as hyper::service::make::MakeServiceRef&lt;Target,IB&gt;&gt;::make_service_ref (5 samples, 0.08%)</title><rect x="2.9152%" y="1045" width="0.0833%" height="15" fill="rgb(246,89,9)" fg:x="175" fg:w="5"/><text x="3.1652%" y="1055.50"></text></g><g><title>&lt;axum::routing::into_make_service::IntoMakeService&lt;S&gt; as tower_service::Service&lt;T&gt;&gt;::call (5 samples, 0.08%)</title><rect x="2.9152%" y="1029" width="0.0833%" height="15" fill="rgb(233,213,13)" fg:x="175" fg:w="5"/><text x="3.1652%" y="1039.50"></text></g><g><title>&lt;axum::routing::Router&lt;B&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="1013" width="0.0833%" height="15" fill="rgb(233,141,41)" fg:x="175" fg:w="5"/><text x="3.1652%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="997" width="0.0833%" height="15" fill="rgb(239,167,4)" fg:x="175" fg:w="5"/><text x="3.1652%" y="1007.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="981" width="0.0833%" height="15" fill="rgb(209,217,16)" fg:x="175" fg:w="5"/><text x="3.1652%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="965" width="0.0833%" height="15" fill="rgb(219,88,35)" fg:x="175" fg:w="5"/><text x="3.1652%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (5 samples, 0.08%)</title><rect x="2.9152%" y="949" width="0.0833%" height="15" fill="rgb(220,193,23)" fg:x="175" fg:w="5"/><text x="3.1652%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (5 samples, 0.08%)</title><rect x="2.9152%" y="933" width="0.0833%" height="15" fill="rgb(230,90,52)" fg:x="175" fg:w="5"/><text x="3.1652%" y="943.50"></text></g><g><title>core::clone::Clone::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="917" width="0.0833%" height="15" fill="rgb(252,106,19)" fg:x="175" fg:w="5"/><text x="3.1652%" y="927.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="901" width="0.0833%" height="15" fill="rgb(206,74,20)" fg:x="175" fg:w="5"/><text x="3.1652%" y="911.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="885" width="0.0833%" height="15" fill="rgb(230,138,44)" fg:x="175" fg:w="5"/><text x="3.1652%" y="895.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (5 samples, 0.08%)</title><rect x="2.9152%" y="869" width="0.0833%" height="15" fill="rgb(235,182,43)" fg:x="175" fg:w="5"/><text x="3.1652%" y="879.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="853" width="0.0833%" height="15" fill="rgb(242,16,51)" fg:x="175" fg:w="5"/><text x="3.1652%" y="863.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="837" width="0.0833%" height="15" fill="rgb(248,9,4)" fg:x="175" fg:w="5"/><text x="3.1652%" y="847.50"></text></g><g><title>&lt;tower_http::trace::service::Trace&lt;S,M,MakeSpan,OnRequest,OnResponse,OnBodyChunk,OnEos,OnFailure&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="821" width="0.0833%" height="15" fill="rgb(210,31,22)" fg:x="175" fg:w="5"/><text x="3.1652%" y="831.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="805" width="0.0833%" height="15" fill="rgb(239,54,39)" fg:x="175" fg:w="5"/><text x="3.1652%" y="815.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="789" width="0.0833%" height="15" fill="rgb(230,99,41)" fg:x="175" fg:w="5"/><text x="3.1652%" y="799.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (5 samples, 0.08%)</title><rect x="2.9152%" y="773" width="0.0833%" height="15" fill="rgb(253,106,12)" fg:x="175" fg:w="5"/><text x="3.1652%" y="783.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="757" width="0.0833%" height="15" fill="rgb(213,46,41)" fg:x="175" fg:w="5"/><text x="3.1652%" y="767.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="741" width="0.0833%" height="15" fill="rgb(215,133,35)" fg:x="175" fg:w="5"/><text x="3.1652%" y="751.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="725" width="0.0833%" height="15" fill="rgb(213,28,5)" fg:x="175" fg:w="5"/><text x="3.1652%" y="735.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="709" width="0.0833%" height="15" fill="rgb(215,77,49)" fg:x="175" fg:w="5"/><text x="3.1652%" y="719.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="693" width="0.0833%" height="15" fill="rgb(248,100,22)" fg:x="175" fg:w="5"/><text x="3.1652%" y="703.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (5 samples, 0.08%)</title><rect x="2.9152%" y="677" width="0.0833%" height="15" fill="rgb(208,67,9)" fg:x="175" fg:w="5"/><text x="3.1652%" y="687.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="661" width="0.0833%" height="15" fill="rgb(219,133,21)" fg:x="175" fg:w="5"/><text x="3.1652%" y="671.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="645" width="0.0833%" height="15" fill="rgb(246,46,29)" fg:x="175" fg:w="5"/><text x="3.1652%" y="655.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="629" width="0.0833%" height="15" fill="rgb(246,185,52)" fg:x="175" fg:w="5"/><text x="3.1652%" y="639.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="613" width="0.0833%" height="15" fill="rgb(252,136,11)" fg:x="175" fg:w="5"/><text x="3.1652%" y="623.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="597" width="0.0833%" height="15" fill="rgb(219,138,53)" fg:x="175" fg:w="5"/><text x="3.1652%" y="607.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (5 samples, 0.08%)</title><rect x="2.9152%" y="581" width="0.0833%" height="15" fill="rgb(211,51,23)" fg:x="175" fg:w="5"/><text x="3.1652%" y="591.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="565" width="0.0833%" height="15" fill="rgb(247,221,28)" fg:x="175" fg:w="5"/><text x="3.1652%" y="575.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="549" width="0.0833%" height="15" fill="rgb(251,222,45)" fg:x="175" fg:w="5"/><text x="3.1652%" y="559.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="533" width="0.0833%" height="15" fill="rgb(217,162,53)" fg:x="175" fg:w="5"/><text x="3.1652%" y="543.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="517" width="0.0833%" height="15" fill="rgb(229,93,14)" fg:x="175" fg:w="5"/><text x="3.1652%" y="527.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="501" width="0.0833%" height="15" fill="rgb(209,67,49)" fg:x="175" fg:w="5"/><text x="3.1652%" y="511.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (5 samples, 0.08%)</title><rect x="2.9152%" y="485" width="0.0833%" height="15" fill="rgb(213,87,29)" fg:x="175" fg:w="5"/><text x="3.1652%" y="495.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="469" width="0.0833%" height="15" fill="rgb(205,151,52)" fg:x="175" fg:w="5"/><text x="3.1652%" y="479.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="453" width="0.0833%" height="15" fill="rgb(253,215,39)" fg:x="175" fg:w="5"/><text x="3.1652%" y="463.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="2.9152%" y="437" width="0.0833%" height="15" fill="rgb(221,220,41)" fg:x="175" fg:w="5"/><text x="3.1652%" y="447.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="421" width="0.0666%" height="15" fill="rgb(218,133,21)" fg:x="176" fg:w="4"/><text x="3.1819%" y="431.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="405" width="0.0666%" height="15" fill="rgb(221,193,43)" fg:x="176" fg:w="4"/><text x="3.1819%" y="415.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (4 samples, 0.07%)</title><rect x="2.9319%" y="389" width="0.0666%" height="15" fill="rgb(240,128,52)" fg:x="176" fg:w="4"/><text x="3.1819%" y="399.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="373" width="0.0666%" height="15" fill="rgb(253,114,12)" fg:x="176" fg:w="4"/><text x="3.1819%" y="383.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="357" width="0.0666%" height="15" fill="rgb(215,223,47)" fg:x="176" fg:w="4"/><text x="3.1819%" y="367.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="341" width="0.0666%" height="15" fill="rgb(248,225,23)" fg:x="176" fg:w="4"/><text x="3.1819%" y="351.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="325" width="0.0666%" height="15" fill="rgb(250,108,0)" fg:x="176" fg:w="4"/><text x="3.1819%" y="335.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="309" width="0.0666%" height="15" fill="rgb(228,208,7)" fg:x="176" fg:w="4"/><text x="3.1819%" y="319.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (4 samples, 0.07%)</title><rect x="2.9319%" y="293" width="0.0666%" height="15" fill="rgb(244,45,10)" fg:x="176" fg:w="4"/><text x="3.1819%" y="303.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="277" width="0.0666%" height="15" fill="rgb(207,125,25)" fg:x="176" fg:w="4"/><text x="3.1819%" y="287.50"></text></g><g><title>&lt;axum::routing::strip_prefix::StripPrefix&lt;S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="261" width="0.0666%" height="15" fill="rgb(210,195,18)" fg:x="176" fg:w="4"/><text x="3.1819%" y="271.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="245" width="0.0666%" height="15" fill="rgb(249,80,12)" fg:x="176" fg:w="4"/><text x="3.1819%" y="255.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="229" width="0.0666%" height="15" fill="rgb(221,65,9)" fg:x="176" fg:w="4"/><text x="3.1819%" y="239.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (4 samples, 0.07%)</title><rect x="2.9319%" y="213" width="0.0666%" height="15" fill="rgb(235,49,36)" fg:x="176" fg:w="4"/><text x="3.1819%" y="223.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="197" width="0.0666%" height="15" fill="rgb(225,32,20)" fg:x="176" fg:w="4"/><text x="3.1819%" y="207.50"></text></g><g><title>&lt;axum::routing::strip_prefix::StripPrefix&lt;S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="181" width="0.0666%" height="15" fill="rgb(215,141,46)" fg:x="176" fg:w="4"/><text x="3.1819%" y="191.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="165" width="0.0666%" height="15" fill="rgb(250,160,47)" fg:x="176" fg:w="4"/><text x="3.1819%" y="175.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="2.9319%" y="149" width="0.0666%" height="15" fill="rgb(216,222,40)" fg:x="176" fg:w="4"/><text x="3.1819%" y="159.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (4 samples, 0.07%)</title><rect x="2.9319%" y="133" width="0.0666%" height="15" fill="rgb(234,217,39)" fg:x="176" fg:w="4"/><text x="3.1819%" y="143.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="2.9652%" y="117" width="0.0333%" height="15" fill="rgb(207,178,40)" fg:x="178" fg:w="2"/><text x="3.2152%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="2.9652%" y="101" width="0.0333%" height="15" fill="rgb(221,136,13)" fg:x="178" fg:w="2"/><text x="3.2152%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="2.9652%" y="85" width="0.0333%" height="15" fill="rgb(249,199,10)" fg:x="178" fg:w="2"/><text x="3.2152%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="2.9652%" y="69" width="0.0333%" height="15" fill="rgb(249,222,13)" fg:x="178" fg:w="2"/><text x="3.2152%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.03%)</title><rect x="2.9652%" y="53" width="0.0333%" height="15" fill="rgb(244,185,38)" fg:x="178" fg:w="2"/><text x="3.2152%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.03%)</title><rect x="2.9652%" y="37" width="0.0333%" height="15" fill="rgb(236,202,9)" fg:x="178" fg:w="2"/><text x="3.2152%" y="47.50"></text></g><g><title>&lt;T as hyper::service::make::MakeServiceRef&lt;Target,IB&gt;&gt;::make_service_ref (1 samples, 0.02%)</title><rect x="2.9985%" y="1029" width="0.0167%" height="15" fill="rgb(250,229,37)" fg:x="180" fg:w="1"/><text x="3.2485%" y="1039.50"></text></g><g><title>&lt;axum::routing::into_make_service::IntoMakeService&lt;S&gt; as tower_service::Service&lt;T&gt;&gt;::call (1 samples, 0.02%)</title><rect x="2.9985%" y="1013" width="0.0167%" height="15" fill="rgb(206,174,23)" fg:x="180" fg:w="1"/><text x="3.2485%" y="1023.50"></text></g><g><title>&lt;axum::routing::Router&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="997" width="0.0167%" height="15" fill="rgb(211,33,43)" fg:x="180" fg:w="1"/><text x="3.2485%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="981" width="0.0167%" height="15" fill="rgb(245,58,50)" fg:x="180" fg:w="1"/><text x="3.2485%" y="991.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="965" width="0.0167%" height="15" fill="rgb(244,68,36)" fg:x="180" fg:w="1"/><text x="3.2485%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="949" width="0.0167%" height="15" fill="rgb(232,229,15)" fg:x="180" fg:w="1"/><text x="3.2485%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 0.02%)</title><rect x="2.9985%" y="933" width="0.0167%" height="15" fill="rgb(254,30,23)" fg:x="180" fg:w="1"/><text x="3.2485%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.02%)</title><rect x="2.9985%" y="917" width="0.0167%" height="15" fill="rgb(235,160,14)" fg:x="180" fg:w="1"/><text x="3.2485%" y="927.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="901" width="0.0167%" height="15" fill="rgb(212,155,44)" fg:x="180" fg:w="1"/><text x="3.2485%" y="911.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="885" width="0.0167%" height="15" fill="rgb(226,2,50)" fg:x="180" fg:w="1"/><text x="3.2485%" y="895.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.9985%" y="869" width="0.0167%" height="15" fill="rgb(234,177,6)" fg:x="180" fg:w="1"/><text x="3.2485%" y="879.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="2.9985%" y="853" width="0.0167%" height="15" fill="rgb(217,24,9)" fg:x="180" fg:w="1"/><text x="3.2485%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="2.9985%" y="837" width="0.0167%" height="15" fill="rgb(220,13,46)" fg:x="180" fg:w="1"/><text x="3.2485%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="2.9985%" y="821" width="0.0167%" height="15" fill="rgb(239,221,27)" fg:x="180" fg:w="1"/><text x="3.2485%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="2.9985%" y="805" width="0.0167%" height="15" fill="rgb(222,198,25)" fg:x="180" fg:w="1"/><text x="3.2485%" y="815.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="2.9985%" y="789" width="0.0167%" height="15" fill="rgb(211,99,13)" fg:x="180" fg:w="1"/><text x="3.2485%" y="799.50"></text></g><g><title>core::alloc::layout::Layout::align (1 samples, 0.02%)</title><rect x="2.9985%" y="773" width="0.0167%" height="15" fill="rgb(232,111,31)" fg:x="180" fg:w="1"/><text x="3.2485%" y="783.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::get (1 samples, 0.02%)</title><rect x="2.9985%" y="757" width="0.0167%" height="15" fill="rgb(245,82,37)" fg:x="180" fg:w="1"/><text x="3.2485%" y="767.50"></text></g><g><title>hyper::server::conn::SpawnAll&lt;I,S,E&gt;::poll_watch (3 samples, 0.05%)</title><rect x="2.9985%" y="1061" width="0.0500%" height="15" fill="rgb(227,149,46)" fg:x="180" fg:w="3"/><text x="3.2485%" y="1071.50"></text></g><g><title>hyper::server::conn::Serve&lt;I,S,E&gt;::poll_next_ (3 samples, 0.05%)</title><rect x="2.9985%" y="1045" width="0.0500%" height="15" fill="rgb(218,36,50)" fg:x="180" fg:w="3"/><text x="3.2485%" y="1055.50"></text></g><g><title>&lt;hyper::server::tcp::AddrIncoming as hyper::server::accept::Accept&gt;::poll_accept (2 samples, 0.03%)</title><rect x="3.0152%" y="1029" width="0.0333%" height="15" fill="rgb(226,80,48)" fg:x="181" fg:w="2"/><text x="3.2652%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.03%)</title><rect x="3.0152%" y="1013" width="0.0333%" height="15" fill="rgb(238,224,15)" fg:x="181" fg:w="2"/><text x="3.2652%" y="1023.50"></text></g><g><title>hyper::server::tcp::AddrIncoming::poll_next_ (1 samples, 0.02%)</title><rect x="3.0485%" y="1061" width="0.0167%" height="15" fill="rgb(241,136,10)" fg:x="183" fg:w="1"/><text x="3.2985%" y="1071.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::poll_accept (1 samples, 0.02%)</title><rect x="3.0485%" y="1045" width="0.0167%" height="15" fill="rgb(208,32,45)" fg:x="183" fg:w="1"/><text x="3.2985%" y="1055.50"></text></g><g><title>sqlx_core::mysql::connection::establish::&lt;impl sqlx_core::mysql::connection::MySqlConnection&gt;::establish::{{closure}} (1 samples, 0.02%)</title><rect x="3.0651%" y="1061" width="0.0167%" height="15" fill="rgb(207,135,9)" fg:x="184" fg:w="1"/><text x="3.3151%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0651%" y="1045" width="0.0167%" height="15" fill="rgb(206,86,44)" fg:x="184" fg:w="1"/><text x="3.3151%" y="1055.50"></text></g><g><title>sqlx_core::mysql::connection::auth::&lt;impl sqlx_core::mysql::protocol::auth::AuthPlugin&gt;::scramble::{{closure}} (1 samples, 0.02%)</title><rect x="3.0651%" y="1029" width="0.0167%" height="15" fill="rgb(245,177,15)" fg:x="184" fg:w="1"/><text x="3.3151%" y="1039.50"></text></g><g><title>sqlx_core::mysql::connection::auth::scramble_sha1 (1 samples, 0.02%)</title><rect x="3.0651%" y="1013" width="0.0167%" height="15" fill="rgb(206,64,50)" fg:x="184" fg:w="1"/><text x="3.3151%" y="1023.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (1 samples, 0.02%)</title><rect x="3.0651%" y="997" width="0.0167%" height="15" fill="rgb(234,36,40)" fg:x="184" fg:w="1"/><text x="3.3151%" y="1007.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.02%)</title><rect x="3.0651%" y="981" width="0.0167%" height="15" fill="rgb(213,64,8)" fg:x="184" fg:w="1"/><text x="3.3151%" y="991.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.02%)</title><rect x="3.0651%" y="965" width="0.0167%" height="15" fill="rgb(210,75,36)" fg:x="184" fg:w="1"/><text x="3.3151%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="3.0651%" y="949" width="0.0167%" height="15" fill="rgb(229,88,21)" fg:x="184" fg:w="1"/><text x="3.3151%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="3.0651%" y="933" width="0.0167%" height="15" fill="rgb(252,204,47)" fg:x="184" fg:w="1"/><text x="3.3151%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="3.0651%" y="917" width="0.0167%" height="15" fill="rgb(208,77,27)" fg:x="184" fg:w="1"/><text x="3.3151%" y="927.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="3.0651%" y="901" width="0.0167%" height="15" fill="rgb(221,76,26)" fg:x="184" fg:w="1"/><text x="3.3151%" y="911.50"></text></g><g><title>sqlx_core::mysql::connection::stream::MySqlStream::recv_packet::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="1061" width="0.0167%" height="15" fill="rgb(225,139,18)" fg:x="185" fg:w="1"/><text x="3.3318%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="1045" width="0.0167%" height="15" fill="rgb(230,137,11)" fg:x="185" fg:w="1"/><text x="3.3318%" y="1055.50"></text></g><g><title>sqlx_core::io::buf_stream::BufStream&lt;S&gt;::read::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="1029" width="0.0167%" height="15" fill="rgb(212,28,1)" fg:x="185" fg:w="1"/><text x="3.3318%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="1013" width="0.0167%" height="15" fill="rgb(248,164,17)" fg:x="185" fg:w="1"/><text x="3.3318%" y="1023.50"></text></g><g><title>sqlx_core::io::buf_stream::BufStream&lt;S&gt;::read_with::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="997" width="0.0167%" height="15" fill="rgb(222,171,42)" fg:x="185" fg:w="1"/><text x="3.3318%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="981" width="0.0167%" height="15" fill="rgb(243,84,45)" fg:x="185" fg:w="1"/><text x="3.3318%" y="991.50"></text></g><g><title>sqlx_core::io::buf_stream::BufStream&lt;S&gt;::read_raw::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="965" width="0.0167%" height="15" fill="rgb(252,49,23)" fg:x="185" fg:w="1"/><text x="3.3318%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="949" width="0.0167%" height="15" fill="rgb(215,19,7)" fg:x="185" fg:w="1"/><text x="3.3318%" y="959.50"></text></g><g><title>sqlx_core::io::buf_stream::read_raw_into::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="933" width="0.0167%" height="15" fill="rgb(238,81,41)" fg:x="185" fg:w="1"/><text x="3.3318%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="917" width="0.0167%" height="15" fill="rgb(210,199,37)" fg:x="185" fg:w="1"/><text x="3.3318%" y="927.50"></text></g><g><title>sqlx_core::io::buf_stream::BufTruncator::read::{{closure}} (1 samples, 0.02%)</title><rect x="3.0818%" y="901" width="0.0167%" height="15" fill="rgb(244,192,49)" fg:x="185" fg:w="1"/><text x="3.3318%" y="911.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0818%" y="885" width="0.0167%" height="15" fill="rgb(226,211,11)" fg:x="185" fg:w="1"/><text x="3.3318%" y="895.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="3.0818%" y="869" width="0.0167%" height="15" fill="rgb(236,162,54)" fg:x="185" fg:w="1"/><text x="3.3318%" y="879.50"></text></g><g><title>&lt;sqlx_core::net::tls::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="3.0818%" y="853" width="0.0167%" height="15" fill="rgb(220,229,9)" fg:x="185" fg:w="1"/><text x="3.3318%" y="863.50"></text></g><g><title>&lt;sqlx_core::net::socket::Socket as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="3.0818%" y="837" width="0.0167%" height="15" fill="rgb(250,87,22)" fg:x="185" fg:w="1"/><text x="3.3318%" y="847.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="3.0818%" y="821" width="0.0167%" height="15" fill="rgb(239,43,17)" fg:x="185" fg:w="1"/><text x="3.3318%" y="831.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.02%)</title><rect x="3.0818%" y="805" width="0.0167%" height="15" fill="rgb(231,177,25)" fg:x="185" fg:w="1"/><text x="3.3318%" y="815.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.02%)</title><rect x="3.0818%" y="789" width="0.0167%" height="15" fill="rgb(219,179,1)" fg:x="185" fg:w="1"/><text x="3.3318%" y="799.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (1 samples, 0.02%)</title><rect x="3.0818%" y="773" width="0.0167%" height="15" fill="rgb(238,219,53)" fg:x="185" fg:w="1"/><text x="3.3318%" y="783.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.02%)</title><rect x="3.0818%" y="757" width="0.0167%" height="15" fill="rgb(232,167,36)" fg:x="185" fg:w="1"/><text x="3.3318%" y="767.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="3.0818%" y="741" width="0.0167%" height="15" fill="rgb(244,19,51)" fg:x="185" fg:w="1"/><text x="3.3318%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::io::driver::Inner&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="3.0818%" y="725" width="0.0167%" height="15" fill="rgb(224,6,22)" fg:x="185" fg:w="1"/><text x="3.3318%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::io::driver::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="3.0818%" y="709" width="0.0167%" height="15" fill="rgb(224,145,5)" fg:x="185" fg:w="1"/><text x="3.3318%" y="719.50"></text></g><g><title>sqlx_core::pool::inner::SharedPool&lt;DB&gt;::acquire::{{closure}} (1 samples, 0.02%)</title><rect x="3.0985%" y="1061" width="0.0167%" height="15" fill="rgb(234,130,49)" fg:x="186" fg:w="1"/><text x="3.3485%" y="1071.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0985%" y="1045" width="0.0167%" height="15" fill="rgb(254,6,2)" fg:x="186" fg:w="1"/><text x="3.3485%" y="1055.50"></text></g><g><title>&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.0985%" y="1029" width="0.0167%" height="15" fill="rgb(208,96,46)" fg:x="186" fg:w="1"/><text x="3.3485%" y="1039.50"></text></g><g><title>tokio::time::driver::sleep::Sleep::poll_elapsed (1 samples, 0.02%)</title><rect x="3.0985%" y="1013" width="0.0167%" height="15" fill="rgb(239,3,39)" fg:x="186" fg:w="1"/><text x="3.3485%" y="1023.50"></text></g><g><title>tokio::time::driver::entry::TimerEntry::poll_elapsed (1 samples, 0.02%)</title><rect x="3.0985%" y="997" width="0.0167%" height="15" fill="rgb(233,210,1)" fg:x="186" fg:w="1"/><text x="3.3485%" y="1007.50"></text></g><g><title>tokio::time::driver::entry::TimerEntry::reset (1 samples, 0.02%)</title><rect x="3.0985%" y="981" width="0.0167%" height="15" fill="rgb(244,137,37)" fg:x="186" fg:w="1"/><text x="3.3485%" y="991.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (1 samples, 0.02%)</title><rect x="3.0985%" y="965" width="0.0167%" height="15" fill="rgb(240,136,2)" fg:x="186" fg:w="1"/><text x="3.3485%" y="975.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::insert (1 samples, 0.02%)</title><rect x="3.0985%" y="949" width="0.0167%" height="15" fill="rgb(239,18,37)" fg:x="186" fg:w="1"/><text x="3.3485%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="3.0985%" y="933" width="0.0167%" height="15" fill="rgb(218,185,22)" fg:x="186" fg:w="1"/><text x="3.3485%" y="943.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="3.0985%" y="917" width="0.0167%" height="15" fill="rgb(225,218,4)" fg:x="186" fg:w="1"/><text x="3.3485%" y="927.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (1 samples, 0.02%)</title><rect x="3.1151%" y="1061" width="0.0167%" height="15" fill="rgb(230,182,32)" fg:x="187" fg:w="1"/><text x="3.3651%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="3.1151%" y="1045" width="0.0167%" height="15" fill="rgb(242,56,43)" fg:x="187" fg:w="1"/><text x="3.3651%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="3.1151%" y="1029" width="0.0167%" height="15" fill="rgb(233,99,24)" fg:x="187" fg:w="1"/><text x="3.3651%" y="1039.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.02%)</title><rect x="3.1151%" y="1013" width="0.0167%" height="15" fill="rgb(234,209,42)" fg:x="187" fg:w="1"/><text x="3.3651%" y="1023.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (1 samples, 0.02%)</title><rect x="3.1151%" y="997" width="0.0167%" height="15" fill="rgb(227,7,12)" fg:x="187" fg:w="1"/><text x="3.3651%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="3.1151%" y="981" width="0.0167%" height="15" fill="rgb(245,203,43)" fg:x="187" fg:w="1"/><text x="3.3651%" y="991.50"></text></g><g><title>fydia::main::{{closure}} (1 samples, 0.02%)</title><rect x="3.1151%" y="965" width="0.0167%" height="15" fill="rgb(238,205,33)" fg:x="187" fg:w="1"/><text x="3.3651%" y="975.50"></text></g><g><title>fydia_config::get_config_or_init (1 samples, 0.02%)</title><rect x="3.1151%" y="949" width="0.0167%" height="15" fill="rgb(231,56,7)" fg:x="187" fg:w="1"/><text x="3.3651%" y="959.50"></text></g><g><title>fydia_config::Config::read_config (1 samples, 0.02%)</title><rect x="3.1151%" y="933" width="0.0167%" height="15" fill="rgb(244,186,29)" fg:x="187" fg:w="1"/><text x="3.3651%" y="943.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (11 samples, 0.18%)</title><rect x="3.1318%" y="1061" width="0.1832%" height="15" fill="rgb(234,111,31)" fg:x="188" fg:w="11"/><text x="3.3818%" y="1071.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (11 samples, 0.18%)</title><rect x="3.1318%" y="1045" width="0.1832%" height="15" fill="rgb(241,149,10)" fg:x="188" fg:w="11"/><text x="3.3818%" y="1055.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (11 samples, 0.18%)</title><rect x="3.1318%" y="1029" width="0.1832%" height="15" fill="rgb(249,206,44)" fg:x="188" fg:w="11"/><text x="3.3818%" y="1039.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current (11 samples, 0.18%)</title><rect x="3.1318%" y="1013" width="0.1832%" height="15" fill="rgb(251,153,30)" fg:x="188" fg:w="11"/><text x="3.3818%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.18%)</title><rect x="3.1318%" y="997" width="0.1832%" height="15" fill="rgb(239,152,38)" fg:x="188" fg:w="11"/><text x="3.3818%" y="1007.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current::{{closure}} (11 samples, 0.18%)</title><rect x="3.1318%" y="981" width="0.1832%" height="15" fill="rgb(249,139,47)" fg:x="188" fg:w="11"/><text x="3.3818%" y="991.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::{{closure}} (11 samples, 0.18%)</title><rect x="3.1318%" y="965" width="0.1832%" height="15" fill="rgb(244,64,35)" fg:x="188" fg:w="11"/><text x="3.3818%" y="975.50"></text></g><g><title>tokio::park::thread::Inner::park (11 samples, 0.18%)</title><rect x="3.1318%" y="949" width="0.1832%" height="15" fill="rgb(216,46,15)" fg:x="188" fg:w="11"/><text x="3.3818%" y="959.50"></text></g><g><title>std::sync::condvar::Condvar::wait (11 samples, 0.18%)</title><rect x="3.1318%" y="933" width="0.1832%" height="15" fill="rgb(250,74,19)" fg:x="188" fg:w="11"/><text x="3.3818%" y="943.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (10 samples, 0.17%)</title><rect x="3.1484%" y="917" width="0.1666%" height="15" fill="rgb(249,42,33)" fg:x="189" fg:w="10"/><text x="3.3984%" y="927.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (10 samples, 0.17%)</title><rect x="3.1484%" y="901" width="0.1666%" height="15" fill="rgb(242,149,17)" fg:x="189" fg:w="10"/><text x="3.3984%" y="911.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (9 samples, 0.15%)</title><rect x="3.1651%" y="885" width="0.1499%" height="15" fill="rgb(244,29,21)" fg:x="190" fg:w="9"/><text x="3.4151%" y="895.50"></text></g><g><title>__futex_abstimed_wait_common64 (5 samples, 0.08%)</title><rect x="3.2317%" y="869" width="0.0833%" height="15" fill="rgb(220,130,37)" fg:x="194" fg:w="5"/><text x="3.4817%" y="879.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="3.2984%" y="853" width="0.0167%" height="15" fill="rgb(211,67,2)" fg:x="198" fg:w="1"/><text x="3.5484%" y="863.50"></text></g><g><title>[unknown] (199 samples, 3.32%)</title><rect x="0.0167%" y="1077" width="3.3150%" height="15" fill="rgb(235,68,52)" fg:x="1" fg:w="199"/><text x="0.2667%" y="1087.50">[un..</text></g><g><title>tokio::runtime::spawner::Spawner::spawn (1 samples, 0.02%)</title><rect x="3.3150%" y="1061" width="0.0167%" height="15" fill="rgb(246,142,3)" fg:x="199" fg:w="1"/><text x="3.5650%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (1 samples, 0.02%)</title><rect x="3.3150%" y="1045" width="0.0167%" height="15" fill="rgb(241,25,7)" fg:x="199" fg:w="1"/><text x="3.5650%" y="1055.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::bind_new_task (1 samples, 0.02%)</title><rect x="3.3150%" y="1029" width="0.0167%" height="15" fill="rgb(242,119,39)" fg:x="199" fg:w="1"/><text x="3.5650%" y="1039.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1 samples, 0.02%)</title><rect x="3.3150%" y="1013" width="0.0167%" height="15" fill="rgb(241,98,45)" fg:x="199" fg:w="1"/><text x="3.5650%" y="1023.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="3.3150%" y="997" width="0.0167%" height="15" fill="rgb(254,28,30)" fg:x="199" fg:w="1"/><text x="3.5650%" y="1007.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="3.3150%" y="981" width="0.0167%" height="15" fill="rgb(241,142,54)" fg:x="199" fg:w="1"/><text x="3.5650%" y="991.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="3.3150%" y="965" width="0.0167%" height="15" fill="rgb(222,85,15)" fg:x="199" fg:w="1"/><text x="3.5650%" y="975.50"></text></g><g><title>std::sync::poison::Flag::borrow (1 samples, 0.02%)</title><rect x="3.3150%" y="949" width="0.0167%" height="15" fill="rgb(210,85,47)" fg:x="199" fg:w="1"/><text x="3.5650%" y="959.50"></text></g><g><title>std::thread::panicking (1 samples, 0.02%)</title><rect x="3.3150%" y="933" width="0.0167%" height="15" fill="rgb(224,206,25)" fg:x="199" fg:w="1"/><text x="3.5650%" y="943.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.02%)</title><rect x="3.3150%" y="917" width="0.0167%" height="15" fill="rgb(243,201,19)" fg:x="199" fg:w="1"/><text x="3.5650%" y="927.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="3.3150%" y="901" width="0.0167%" height="15" fill="rgb(236,59,4)" fg:x="199" fg:w="1"/><text x="3.5650%" y="911.50"></text></g><g><title>[unknown] (23 samples, 0.38%)</title><rect x="3.6149%" y="1045" width="0.3831%" height="15" fill="rgb(254,179,45)" fg:x="217" fg:w="23"/><text x="3.8649%" y="1055.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="3.6982%" y="1029" width="0.2999%" height="15" fill="rgb(226,14,10)" fg:x="222" fg:w="18"/><text x="3.9482%" y="1039.50"></text></g><g><title>[unknown] (17 samples, 0.28%)</title><rect x="3.7148%" y="1013" width="0.2832%" height="15" fill="rgb(244,27,41)" fg:x="223" fg:w="17"/><text x="3.9648%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="3.8314%" y="997" width="0.1666%" height="15" fill="rgb(235,35,32)" fg:x="230" fg:w="10"/><text x="4.0814%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="3.8981%" y="981" width="0.1000%" height="15" fill="rgb(218,68,31)" fg:x="234" fg:w="6"/><text x="4.1481%" y="991.50"></text></g><g><title>__ctype_init (9 samples, 0.15%)</title><rect x="3.9980%" y="1045" width="0.1499%" height="15" fill="rgb(207,120,37)" fg:x="240" fg:w="9"/><text x="4.2480%" y="1055.50"></text></g><g><title>__sigsetjmp (1 samples, 0.02%)</title><rect x="4.1479%" y="1045" width="0.0167%" height="15" fill="rgb(227,98,0)" fg:x="249" fg:w="1"/><text x="4.3979%" y="1055.50"></text></g><g><title>__GI___sigaltstack (7 samples, 0.12%)</title><rect x="4.1812%" y="1013" width="0.1166%" height="15" fill="rgb(207,7,3)" fg:x="251" fg:w="7"/><text x="4.4312%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="4.2312%" y="997" width="0.0666%" height="15" fill="rgb(206,98,19)" fg:x="254" fg:w="4"/><text x="4.4812%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="4.2312%" y="981" width="0.0666%" height="15" fill="rgb(217,5,26)" fg:x="254" fg:w="4"/><text x="4.4812%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="4.2312%" y="965" width="0.0666%" height="15" fill="rgb(235,190,38)" fg:x="254" fg:w="4"/><text x="4.4812%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.2645%" y="949" width="0.0333%" height="15" fill="rgb(247,86,24)" fg:x="256" fg:w="2"/><text x="4.5145%" y="959.50"></text></g><g><title>__clone (60 samples, 1.00%)</title><rect x="3.3317%" y="1077" width="0.9995%" height="15" fill="rgb(205,101,16)" fg:x="200" fg:w="60"/><text x="3.5817%" y="1087.50"></text></g><g><title>start_thread (46 samples, 0.77%)</title><rect x="3.5649%" y="1061" width="0.7663%" height="15" fill="rgb(246,168,33)" fg:x="214" fg:w="46"/><text x="3.8149%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (10 samples, 0.17%)</title><rect x="4.1646%" y="1045" width="0.1666%" height="15" fill="rgb(231,114,1)" fg:x="250" fg:w="10"/><text x="4.4146%" y="1055.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (10 samples, 0.17%)</title><rect x="4.1646%" y="1029" width="0.1666%" height="15" fill="rgb(207,184,53)" fg:x="250" fg:w="10"/><text x="4.4146%" y="1039.50"></text></g><g><title>__mmap (2 samples, 0.03%)</title><rect x="4.2979%" y="1013" width="0.0333%" height="15" fill="rgb(224,95,51)" fg:x="258" fg:w="2"/><text x="4.5479%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.2979%" y="997" width="0.0333%" height="15" fill="rgb(212,188,45)" fg:x="258" fg:w="2"/><text x="4.5479%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.2979%" y="981" width="0.0333%" height="15" fill="rgb(223,154,38)" fg:x="258" fg:w="2"/><text x="4.5479%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.2979%" y="965" width="0.0333%" height="15" fill="rgb(251,22,52)" fg:x="258" fg:w="2"/><text x="4.5479%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.2979%" y="949" width="0.0333%" height="15" fill="rgb(229,209,22)" fg:x="258" fg:w="2"/><text x="4.5479%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="4.3145%" y="933" width="0.0167%" height="15" fill="rgb(234,138,34)" fg:x="259" fg:w="1"/><text x="4.5645%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="4.3312%" y="1061" width="0.0167%" height="15" fill="rgb(212,95,11)" fg:x="260" fg:w="1"/><text x="4.5812%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="4.3645%" y="1045" width="0.0500%" height="15" fill="rgb(240,179,47)" fg:x="262" fg:w="3"/><text x="4.6145%" y="1055.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.02%)</title><rect x="4.4311%" y="1013" width="0.0167%" height="15" fill="rgb(240,163,11)" fg:x="266" fg:w="1"/><text x="4.6811%" y="1023.50"></text></g><g><title>_dl_dst_count (1 samples, 0.02%)</title><rect x="4.4311%" y="997" width="0.0167%" height="15" fill="rgb(236,37,12)" fg:x="266" fg:w="1"/><text x="4.6811%" y="1007.50"></text></g><g><title>strchr (1 samples, 0.02%)</title><rect x="4.4311%" y="981" width="0.0167%" height="15" fill="rgb(232,164,16)" fg:x="266" fg:w="1"/><text x="4.6811%" y="991.50"></text></g><g><title>fydia (269 samples, 4.48%)</title><rect x="0.0000%" y="1093" width="4.4811%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="269"/><text x="0.2500%" y="1103.50">fydia</text></g><g><title>_start (9 samples, 0.15%)</title><rect x="4.3312%" y="1077" width="0.1499%" height="15" fill="rgb(223,117,47)" fg:x="260" fg:w="9"/><text x="4.5812%" y="1087.50"></text></g><g><title>_dl_start (8 samples, 0.13%)</title><rect x="4.3478%" y="1061" width="0.1333%" height="15" fill="rgb(244,107,35)" fg:x="261" fg:w="8"/><text x="4.5978%" y="1071.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.07%)</title><rect x="4.4145%" y="1045" width="0.0666%" height="15" fill="rgb(205,140,8)" fg:x="265" fg:w="4"/><text x="4.6645%" y="1055.50"></text></g><g><title>dl_main (3 samples, 0.05%)</title><rect x="4.4311%" y="1029" width="0.0500%" height="15" fill="rgb(228,84,46)" fg:x="266" fg:w="3"/><text x="4.6811%" y="1039.50"></text></g><g><title>_dl_relocate_object (2 samples, 0.03%)</title><rect x="4.4478%" y="1013" width="0.0333%" height="15" fill="rgb(254,188,9)" fg:x="267" fg:w="2"/><text x="4.6978%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.4478%" y="997" width="0.0333%" height="15" fill="rgb(206,112,54)" fg:x="267" fg:w="2"/><text x="4.6978%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="4.4478%" y="981" width="0.0333%" height="15" fill="rgb(216,84,49)" fg:x="267" fg:w="2"/><text x="4.6978%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="4.4644%" y="965" width="0.0167%" height="15" fill="rgb(214,194,35)" fg:x="268" fg:w="1"/><text x="4.7144%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="4.4644%" y="949" width="0.0167%" height="15" fill="rgb(249,28,3)" fg:x="268" fg:w="1"/><text x="4.7144%" y="959.50"></text></g><g><title>&lt;axum::extract::ws::WebSocketUpgradeResponse&lt;F&gt; as axum::response::IntoResponse&gt;::into_response (1 samples, 0.02%)</title><rect x="4.4811%" y="1061" width="0.0167%" height="15" fill="rgb(222,56,52)" fg:x="269" fg:w="1"/><text x="4.7311%" y="1071.50"></text></g><g><title>axum::extract::ws::sign (1 samples, 0.02%)</title><rect x="4.4811%" y="1045" width="0.0167%" height="15" fill="rgb(245,217,50)" fg:x="269" fg:w="1"/><text x="4.7311%" y="1055.50"></text></g><g><title>http::header::value::HeaderValue::from_maybe_shared (1 samples, 0.02%)</title><rect x="4.4811%" y="1029" width="0.0167%" height="15" fill="rgb(213,201,24)" fg:x="269" fg:w="1"/><text x="4.7311%" y="1039.50"></text></g><g><title>http::header::value::HeaderValue::from_shared (1 samples, 0.02%)</title><rect x="4.4811%" y="1013" width="0.0167%" height="15" fill="rgb(248,116,28)" fg:x="269" fg:w="1"/><text x="4.7311%" y="1023.50"></text></g><g><title>http::header::value::HeaderValue::try_from_generic (1 samples, 0.02%)</title><rect x="4.4811%" y="997" width="0.0167%" height="15" fill="rgb(219,72,43)" fg:x="269" fg:w="1"/><text x="4.7311%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="4.4811%" y="981" width="0.0167%" height="15" fill="rgb(209,138,14)" fg:x="269" fg:w="1"/><text x="4.7311%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.02%)</title><rect x="4.4811%" y="965" width="0.0167%" height="15" fill="rgb(222,18,33)" fg:x="269" fg:w="1"/><text x="4.7311%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.4978%" y="1061" width="0.0167%" height="15" fill="rgb(213,199,7)" fg:x="270" fg:w="1"/><text x="4.7478%" y="1071.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;B,(T1,T2,T3,T4)&gt;&gt;::call::{{closure}} (1 samples, 0.02%)</title><rect x="4.4978%" y="1045" width="0.0167%" height="15" fill="rgb(250,110,10)" fg:x="270" fg:w="1"/><text x="4.7478%" y="1055.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.4978%" y="1029" width="0.0167%" height="15" fill="rgb(248,123,6)" fg:x="270" fg:w="1"/><text x="4.7478%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.4978%" y="1013" width="0.0167%" height="15" fill="rgb(206,91,31)" fg:x="270" fg:w="1"/><text x="4.7478%" y="1023.50"></text></g><g><title>&lt;axum::extract::ws::WebSocketUpgrade as axum::extract::FromRequest&lt;B&gt;&gt;::from_request::{{closure}} (1 samples, 0.02%)</title><rect x="4.4978%" y="997" width="0.0167%" height="15" fill="rgb(211,154,13)" fg:x="270" fg:w="1"/><text x="4.7478%" y="1007.50"></text></g><g><title>axum::extract::ws::header_contains (1 samples, 0.02%)</title><rect x="4.4978%" y="981" width="0.0167%" height="15" fill="rgb(225,148,7)" fg:x="270" fg:w="1"/><text x="4.7478%" y="991.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_ascii_lowercase (1 samples, 0.02%)</title><rect x="4.4978%" y="965" width="0.0167%" height="15" fill="rgb(220,160,43)" fg:x="270" fg:w="1"/><text x="4.7478%" y="975.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="4.5144%" y="389" width="0.0333%" height="15" fill="rgb(213,52,39)" fg:x="271" fg:w="2"/><text x="4.7644%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="4.5144%" y="373" width="0.0333%" height="15" fill="rgb(243,137,7)" fg:x="271" fg:w="2"/><text x="4.7644%" y="383.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="4.5144%" y="357" width="0.0333%" height="15" fill="rgb(230,79,13)" fg:x="271" fg:w="2"/><text x="4.7644%" y="367.50"></text></g><g><title>std::sync::poison::map_result (2 samples, 0.03%)</title><rect x="4.5144%" y="341" width="0.0333%" height="15" fill="rgb(247,105,23)" fg:x="271" fg:w="2"/><text x="4.7644%" y="351.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.05%)</title><rect x="4.5144%" y="1061" width="0.0500%" height="15" fill="rgb(223,179,41)" fg:x="271" fg:w="3"/><text x="4.7644%" y="1071.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="1045" width="0.0500%" height="15" fill="rgb(218,9,34)" fg:x="271" fg:w="3"/><text x="4.7644%" y="1055.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.05%)</title><rect x="4.5144%" y="1029" width="0.0500%" height="15" fill="rgb(222,106,8)" fg:x="271" fg:w="3"/><text x="4.7644%" y="1039.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="1013" width="0.0500%" height="15" fill="rgb(211,220,0)" fg:x="271" fg:w="3"/><text x="4.7644%" y="1023.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3 samples, 0.05%)</title><rect x="4.5144%" y="997" width="0.0500%" height="15" fill="rgb(229,52,16)" fg:x="271" fg:w="3"/><text x="4.7644%" y="1007.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (3 samples, 0.05%)</title><rect x="4.5144%" y="981" width="0.0500%" height="15" fill="rgb(212,155,18)" fg:x="271" fg:w="3"/><text x="4.7644%" y="991.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3 samples, 0.05%)</title><rect x="4.5144%" y="965" width="0.0500%" height="15" fill="rgb(242,21,14)" fg:x="271" fg:w="3"/><text x="4.7644%" y="975.50"></text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.05%)</title><rect x="4.5144%" y="949" width="0.0500%" height="15" fill="rgb(222,19,48)" fg:x="271" fg:w="3"/><text x="4.7644%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.05%)</title><rect x="4.5144%" y="933" width="0.0500%" height="15" fill="rgb(232,45,27)" fg:x="271" fg:w="3"/><text x="4.7644%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3 samples, 0.05%)</title><rect x="4.5144%" y="917" width="0.0500%" height="15" fill="rgb(249,103,42)" fg:x="271" fg:w="3"/><text x="4.7644%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3 samples, 0.05%)</title><rect x="4.5144%" y="901" width="0.0500%" height="15" fill="rgb(246,81,33)" fg:x="271" fg:w="3"/><text x="4.7644%" y="911.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.05%)</title><rect x="4.5144%" y="885" width="0.0500%" height="15" fill="rgb(252,33,42)" fg:x="271" fg:w="3"/><text x="4.7644%" y="895.50"></text></g><g><title>std::panicking::try (3 samples, 0.05%)</title><rect x="4.5144%" y="869" width="0.0500%" height="15" fill="rgb(209,212,41)" fg:x="271" fg:w="3"/><text x="4.7644%" y="879.50"></text></g><g><title>__rust_try (3 samples, 0.05%)</title><rect x="4.5144%" y="853" width="0.0500%" height="15" fill="rgb(207,154,6)" fg:x="271" fg:w="3"/><text x="4.7644%" y="863.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.05%)</title><rect x="4.5144%" y="837" width="0.0500%" height="15" fill="rgb(223,64,47)" fg:x="271" fg:w="3"/><text x="4.7644%" y="847.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.05%)</title><rect x="4.5144%" y="821" width="0.0500%" height="15" fill="rgb(211,161,38)" fg:x="271" fg:w="3"/><text x="4.7644%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="805" width="0.0500%" height="15" fill="rgb(219,138,40)" fg:x="271" fg:w="3"/><text x="4.7644%" y="815.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3 samples, 0.05%)</title><rect x="4.5144%" y="789" width="0.0500%" height="15" fill="rgb(241,228,46)" fg:x="271" fg:w="3"/><text x="4.7644%" y="799.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.05%)</title><rect x="4.5144%" y="773" width="0.0500%" height="15" fill="rgb(223,209,38)" fg:x="271" fg:w="3"/><text x="4.7644%" y="783.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="757" width="0.0500%" height="15" fill="rgb(236,164,45)" fg:x="271" fg:w="3"/><text x="4.7644%" y="767.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="4.5144%" y="741" width="0.0500%" height="15" fill="rgb(231,15,5)" fg:x="271" fg:w="3"/><text x="4.7644%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="725" width="0.0500%" height="15" fill="rgb(252,35,15)" fg:x="271" fg:w="3"/><text x="4.7644%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (3 samples, 0.05%)</title><rect x="4.5144%" y="709" width="0.0500%" height="15" fill="rgb(248,181,18)" fg:x="271" fg:w="3"/><text x="4.7644%" y="719.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3 samples, 0.05%)</title><rect x="4.5144%" y="693" width="0.0500%" height="15" fill="rgb(233,39,42)" fg:x="271" fg:w="3"/><text x="4.7644%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (3 samples, 0.05%)</title><rect x="4.5144%" y="677" width="0.0500%" height="15" fill="rgb(238,110,33)" fg:x="271" fg:w="3"/><text x="4.7644%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3 samples, 0.05%)</title><rect x="4.5144%" y="661" width="0.0500%" height="15" fill="rgb(233,195,10)" fg:x="271" fg:w="3"/><text x="4.7644%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (3 samples, 0.05%)</title><rect x="4.5144%" y="645" width="0.0500%" height="15" fill="rgb(254,105,3)" fg:x="271" fg:w="3"/><text x="4.7644%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (3 samples, 0.05%)</title><rect x="4.5144%" y="629" width="0.0500%" height="15" fill="rgb(221,225,9)" fg:x="271" fg:w="3"/><text x="4.7644%" y="639.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (3 samples, 0.05%)</title><rect x="4.5144%" y="613" width="0.0500%" height="15" fill="rgb(224,227,45)" fg:x="271" fg:w="3"/><text x="4.7644%" y="623.50"></text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.05%)</title><rect x="4.5144%" y="597" width="0.0500%" height="15" fill="rgb(229,198,43)" fg:x="271" fg:w="3"/><text x="4.7644%" y="607.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (3 samples, 0.05%)</title><rect x="4.5144%" y="581" width="0.0500%" height="15" fill="rgb(206,209,35)" fg:x="271" fg:w="3"/><text x="4.7644%" y="591.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (3 samples, 0.05%)</title><rect x="4.5144%" y="565" width="0.0500%" height="15" fill="rgb(245,195,53)" fg:x="271" fg:w="3"/><text x="4.7644%" y="575.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (3 samples, 0.05%)</title><rect x="4.5144%" y="549" width="0.0500%" height="15" fill="rgb(240,92,26)" fg:x="271" fg:w="3"/><text x="4.7644%" y="559.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (3 samples, 0.05%)</title><rect x="4.5144%" y="533" width="0.0500%" height="15" fill="rgb(207,40,23)" fg:x="271" fg:w="3"/><text x="4.7644%" y="543.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (3 samples, 0.05%)</title><rect x="4.5144%" y="517" width="0.0500%" height="15" fill="rgb(223,111,35)" fg:x="271" fg:w="3"/><text x="4.7644%" y="527.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (3 samples, 0.05%)</title><rect x="4.5144%" y="501" width="0.0500%" height="15" fill="rgb(229,147,28)" fg:x="271" fg:w="3"/><text x="4.7644%" y="511.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (3 samples, 0.05%)</title><rect x="4.5144%" y="485" width="0.0500%" height="15" fill="rgb(211,29,28)" fg:x="271" fg:w="3"/><text x="4.7644%" y="495.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 0.05%)</title><rect x="4.5144%" y="469" width="0.0500%" height="15" fill="rgb(228,72,33)" fg:x="271" fg:w="3"/><text x="4.7644%" y="479.50"></text></g><g><title>tokio::io::driver::Driver::turn (3 samples, 0.05%)</title><rect x="4.5144%" y="453" width="0.0500%" height="15" fill="rgb(205,214,31)" fg:x="271" fg:w="3"/><text x="4.7644%" y="463.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (3 samples, 0.05%)</title><rect x="4.5144%" y="437" width="0.0500%" height="15" fill="rgb(224,111,15)" fg:x="271" fg:w="3"/><text x="4.7644%" y="447.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (3 samples, 0.05%)</title><rect x="4.5144%" y="421" width="0.0500%" height="15" fill="rgb(253,21,26)" fg:x="271" fg:w="3"/><text x="4.7644%" y="431.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (3 samples, 0.05%)</title><rect x="4.5144%" y="405" width="0.0500%" height="15" fill="rgb(245,139,43)" fg:x="271" fg:w="3"/><text x="4.7644%" y="415.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="4.5477%" y="389" width="0.0167%" height="15" fill="rgb(252,170,7)" fg:x="273" fg:w="1"/><text x="4.7977%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.02%)</title><rect x="4.5477%" y="373" width="0.0167%" height="15" fill="rgb(231,118,14)" fg:x="273" fg:w="1"/><text x="4.7977%" y="383.50"></text></g><g><title>tokio::park::thread::wake (1 samples, 0.02%)</title><rect x="4.5477%" y="357" width="0.0167%" height="15" fill="rgb(238,83,0)" fg:x="273" fg:w="1"/><text x="4.7977%" y="367.50"></text></g><g><title>tokio::park::thread::Inner::unpark (1 samples, 0.02%)</title><rect x="4.5477%" y="341" width="0.0167%" height="15" fill="rgb(221,39,39)" fg:x="273" fg:w="1"/><text x="4.7977%" y="351.50"></text></g><g><title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="4.5477%" y="325" width="0.0167%" height="15" fill="rgb(222,119,46)" fg:x="273" fg:w="1"/><text x="4.7977%" y="335.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5644%" y="1061" width="0.0167%" height="15" fill="rgb(222,165,49)" fg:x="274" fg:w="1"/><text x="4.8144%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5644%" y="1045" width="0.0167%" height="15" fill="rgb(219,113,52)" fg:x="274" fg:w="1"/><text x="4.8144%" y="1055.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;B,(T1,T2,T3,T4)&gt;&gt;::call::{{closure}} (1 samples, 0.02%)</title><rect x="4.5644%" y="1029" width="0.0167%" height="15" fill="rgb(214,7,15)" fg:x="274" fg:w="1"/><text x="4.8144%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5644%" y="1013" width="0.0167%" height="15" fill="rgb(235,32,4)" fg:x="274" fg:w="1"/><text x="4.8144%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5644%" y="997" width="0.0167%" height="15" fill="rgb(238,90,54)" fg:x="274" fg:w="1"/><text x="4.8144%" y="1007.50"></text></g><g><title>&lt;axum::extract::ws::WebSocketUpgrade as axum::extract::FromRequest&lt;B&gt;&gt;::from_request::{{closure}} (1 samples, 0.02%)</title><rect x="4.5644%" y="981" width="0.0167%" height="15" fill="rgb(213,208,19)" fg:x="274" fg:w="1"/><text x="4.8144%" y="991.50"></text></g><g><title>http::extensions::Extensions::remove (1 samples, 0.02%)</title><rect x="4.5644%" y="965" width="0.0167%" height="15" fill="rgb(233,156,4)" fg:x="274" fg:w="1"/><text x="4.8144%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.02%)</title><rect x="4.5644%" y="949" width="0.0167%" height="15" fill="rgb(207,194,5)" fg:x="274" fg:w="1"/><text x="4.8144%" y="959.50"></text></g><g><title>http::extensions::Extensions::remove::{{closure}} (1 samples, 0.02%)</title><rect x="4.5644%" y="933" width="0.0167%" height="15" fill="rgb(206,111,30)" fg:x="274" fg:w="1"/><text x="4.8144%" y="943.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (1 samples, 0.02%)</title><rect x="4.5810%" y="1061" width="0.0167%" height="15" fill="rgb(243,70,54)" fg:x="275" fg:w="1"/><text x="4.8310%" y="1071.50"></text></g><g><title>&lt;axum::routing::future::RouterFuture&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5810%" y="1045" width="0.0167%" height="15" fill="rgb(242,28,8)" fg:x="275" fg:w="1"/><text x="4.8310%" y="1055.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5810%" y="1029" width="0.0167%" height="15" fill="rgb(219,106,18)" fg:x="275" fg:w="1"/><text x="4.8310%" y="1039.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5810%" y="1013" width="0.0167%" height="15" fill="rgb(244,222,10)" fg:x="275" fg:w="1"/><text x="4.8310%" y="1023.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5810%" y="997" width="0.0167%" height="15" fill="rgb(236,179,52)" fg:x="275" fg:w="1"/><text x="4.8310%" y="1007.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.5810%" y="981" width="0.0167%" height="15" fill="rgb(213,23,39)" fg:x="275" fg:w="1"/><text x="4.8310%" y="991.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="4.5810%" y="965" width="0.0167%" height="15" fill="rgb(238,48,10)" fg:x="275" fg:w="1"/><text x="4.8310%" y="975.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="4.5810%" y="949" width="0.0167%" height="15" fill="rgb(251,196,23)" fg:x="275" fg:w="1"/><text x="4.8310%" y="959.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="4.5810%" y="933" width="0.0167%" height="15" fill="rgb(250,152,24)" fg:x="275" fg:w="1"/><text x="4.8310%" y="943.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (1 samples, 0.02%)</title><rect x="4.5810%" y="917" width="0.0167%" height="15" fill="rgb(209,150,17)" fg:x="275" fg:w="1"/><text x="4.8310%" y="927.50"></text></g><g><title>&lt;http::uri::Uri as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.5977%" y="1013" width="0.0167%" height="15" fill="rgb(234,202,34)" fg:x="276" fg:w="1"/><text x="4.8477%" y="1023.50"></text></g><g><title>&lt;http::uri::path::PathAndQuery as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.5977%" y="997" width="0.0167%" height="15" fill="rgb(253,148,53)" fg:x="276" fg:w="1"/><text x="4.8477%" y="1007.50"></text></g><g><title>&lt;http::byte_str::ByteStr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.5977%" y="981" width="0.0167%" height="15" fill="rgb(218,129,16)" fg:x="276" fg:w="1"/><text x="4.8477%" y="991.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.5977%" y="965" width="0.0167%" height="15" fill="rgb(216,85,19)" fg:x="276" fg:w="1"/><text x="4.8477%" y="975.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.02%)</title><rect x="4.5977%" y="949" width="0.0167%" height="15" fill="rgb(235,228,7)" fg:x="276" fg:w="1"/><text x="4.8477%" y="959.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.02%)</title><rect x="4.5977%" y="933" width="0.0167%" height="15" fill="rgb(245,175,0)" fg:x="276" fg:w="1"/><text x="4.8477%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (1 samples, 0.02%)</title><rect x="4.5977%" y="917" width="0.0167%" height="15" fill="rgb(208,168,36)" fg:x="276" fg:w="1"/><text x="4.8477%" y="927.50"></text></g><g><title>axum::routing::Router&lt;B&gt;::call_route (1 samples, 0.02%)</title><rect x="4.6144%" y="1013" width="0.0167%" height="15" fill="rgb(246,171,24)" fg:x="277" fg:w="1"/><text x="4.8644%" y="1023.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="997" width="0.0167%" height="15" fill="rgb(215,142,24)" fg:x="277" fg:w="1"/><text x="4.8644%" y="1007.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="981" width="0.0167%" height="15" fill="rgb(250,187,7)" fg:x="277" fg:w="1"/><text x="4.8644%" y="991.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="4.6144%" y="965" width="0.0167%" height="15" fill="rgb(228,66,33)" fg:x="277" fg:w="1"/><text x="4.8644%" y="975.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="949" width="0.0167%" height="15" fill="rgb(234,215,21)" fg:x="277" fg:w="1"/><text x="4.8644%" y="959.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="933" width="0.0167%" height="15" fill="rgb(222,191,20)" fg:x="277" fg:w="1"/><text x="4.8644%" y="943.50"></text></g><g><title>&lt;tower_http::trace::service::Trace&lt;S,M,MakeSpan,OnRequest,OnResponse,OnBodyChunk,OnEos,OnFailure&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="917" width="0.0167%" height="15" fill="rgb(245,79,54)" fg:x="277" fg:w="1"/><text x="4.8644%" y="927.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="901" width="0.0167%" height="15" fill="rgb(240,10,37)" fg:x="277" fg:w="1"/><text x="4.8644%" y="911.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="885" width="0.0167%" height="15" fill="rgb(214,192,32)" fg:x="277" fg:w="1"/><text x="4.8644%" y="895.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="4.6144%" y="869" width="0.0167%" height="15" fill="rgb(209,36,54)" fg:x="277" fg:w="1"/><text x="4.8644%" y="879.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="853" width="0.0167%" height="15" fill="rgb(220,10,11)" fg:x="277" fg:w="1"/><text x="4.8644%" y="863.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="837" width="0.0167%" height="15" fill="rgb(221,106,17)" fg:x="277" fg:w="1"/><text x="4.8644%" y="847.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="821" width="0.0167%" height="15" fill="rgb(251,142,44)" fg:x="277" fg:w="1"/><text x="4.8644%" y="831.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;ReqBody&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="805" width="0.0167%" height="15" fill="rgb(238,13,15)" fg:x="277" fg:w="1"/><text x="4.8644%" y="815.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="789" width="0.0167%" height="15" fill="rgb(208,107,27)" fg:x="277" fg:w="1"/><text x="4.8644%" y="799.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="4.6144%" y="773" width="0.0167%" height="15" fill="rgb(205,136,37)" fg:x="277" fg:w="1"/><text x="4.8644%" y="783.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="757" width="0.0167%" height="15" fill="rgb(250,205,27)" fg:x="277" fg:w="1"/><text x="4.8644%" y="767.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="741" width="0.0167%" height="15" fill="rgb(210,80,43)" fg:x="277" fg:w="1"/><text x="4.8644%" y="751.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="725" width="0.0167%" height="15" fill="rgb(247,160,36)" fg:x="277" fg:w="1"/><text x="4.8644%" y="735.50"></text></g><g><title>&lt;fydia_struct::instance::RsaData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="709" width="0.0167%" height="15" fill="rgb(234,13,49)" fg:x="277" fg:w="1"/><text x="4.8644%" y="719.50"></text></g><g><title>&lt;openssl::rsa::Rsa&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.6144%" y="693" width="0.0167%" height="15" fill="rgb(234,122,0)" fg:x="277" fg:w="1"/><text x="4.8644%" y="703.50"></text></g><g><title>&lt;openssl::rsa::RsaRef&lt;T&gt; as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.02%)</title><rect x="4.6144%" y="677" width="0.0167%" height="15" fill="rgb(207,146,38)" fg:x="277" fg:w="1"/><text x="4.8644%" y="687.50"></text></g><g><title>RSA_up_ref (1 samples, 0.02%)</title><rect x="4.6144%" y="661" width="0.0167%" height="15" fill="rgb(207,177,25)" fg:x="277" fg:w="1"/><text x="4.8644%" y="671.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (3 samples, 0.05%)</title><rect x="4.5977%" y="1061" width="0.0500%" height="15" fill="rgb(211,178,42)" fg:x="276" fg:w="3"/><text x="4.8477%" y="1071.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (3 samples, 0.05%)</title><rect x="4.5977%" y="1045" width="0.0500%" height="15" fill="rgb(230,69,54)" fg:x="276" fg:w="3"/><text x="4.8477%" y="1055.50"></text></g><g><title>&lt;axum::routing::Router&lt;B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (3 samples, 0.05%)</title><rect x="4.5977%" y="1029" width="0.0500%" height="15" fill="rgb(214,135,41)" fg:x="276" fg:w="3"/><text x="4.8477%" y="1039.50"></text></g><g><title>http::extensions::Extensions::insert (1 samples, 0.02%)</title><rect x="4.6310%" y="1013" width="0.0167%" height="15" fill="rgb(237,67,25)" fg:x="278" fg:w="1"/><text x="4.8810%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="4.6310%" y="997" width="0.0167%" height="15" fill="rgb(222,189,50)" fg:x="278" fg:w="1"/><text x="4.8810%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="4.6310%" y="981" width="0.0167%" height="15" fill="rgb(245,148,34)" fg:x="278" fg:w="1"/><text x="4.8810%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="4.6310%" y="965" width="0.0167%" height="15" fill="rgb(222,29,6)" fg:x="278" fg:w="1"/><text x="4.8810%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="4.6310%" y="949" width="0.0167%" height="15" fill="rgb(221,189,43)" fg:x="278" fg:w="1"/><text x="4.8810%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="4.6310%" y="933" width="0.0167%" height="15" fill="rgb(207,36,27)" fg:x="278" fg:w="1"/><text x="4.8810%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (1 samples, 0.02%)</title><rect x="4.6310%" y="917" width="0.0167%" height="15" fill="rgb(217,90,24)" fg:x="278" fg:w="1"/><text x="4.8810%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.02%)</title><rect x="4.6310%" y="901" width="0.0167%" height="15" fill="rgb(224,66,35)" fg:x="278" fg:w="1"/><text x="4.8810%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="4.6310%" y="885" width="0.0167%" height="15" fill="rgb(221,13,50)" fg:x="278" fg:w="1"/><text x="4.8810%" y="895.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.02%)</title><rect x="4.6477%" y="997" width="0.0167%" height="15" fill="rgb(236,68,49)" fg:x="279" fg:w="1"/><text x="4.8977%" y="1007.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="4.6477%" y="981" width="0.0167%" height="15" fill="rgb(229,146,28)" fg:x="279" fg:w="1"/><text x="4.8977%" y="991.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="4.6477%" y="965" width="0.0167%" height="15" fill="rgb(225,31,38)" fg:x="279" fg:w="1"/><text x="4.8977%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="4.6477%" y="949" width="0.0167%" height="15" fill="rgb(250,208,3)" fg:x="279" fg:w="1"/><text x="4.8977%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::into_box (1 samples, 0.02%)</title><rect x="4.6477%" y="933" width="0.0167%" height="15" fill="rgb(246,54,23)" fg:x="279" fg:w="1"/><text x="4.8977%" y="943.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 0.03%)</title><rect x="4.6477%" y="1045" width="0.0333%" height="15" fill="rgb(243,76,11)" fg:x="279" fg:w="2"/><text x="4.8977%" y="1055.50"></text></g><g><title>&lt;http::uri::Uri as core::str::traits::FromStr&gt;::from_str (2 samples, 0.03%)</title><rect x="4.6477%" y="1029" width="0.0333%" height="15" fill="rgb(245,21,50)" fg:x="279" fg:w="2"/><text x="4.8977%" y="1039.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (2 samples, 0.03%)</title><rect x="4.6477%" y="1013" width="0.0333%" height="15" fill="rgb(228,9,43)" fg:x="279" fg:w="2"/><text x="4.8977%" y="1023.50"></text></g><g><title>http::uri::Uri::from_shared (1 samples, 0.02%)</title><rect x="4.6643%" y="997" width="0.0167%" height="15" fill="rgb(208,100,47)" fg:x="280" fg:w="1"/><text x="4.9143%" y="1007.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.02%)</title><rect x="4.6643%" y="981" width="0.0167%" height="15" fill="rgb(232,26,8)" fg:x="280" fg:w="1"/><text x="4.9143%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="4.6643%" y="965" width="0.0167%" height="15" fill="rgb(216,166,38)" fg:x="280" fg:w="1"/><text x="4.9143%" y="975.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="4.6643%" y="949" width="0.0167%" height="15" fill="rgb(251,202,51)" fg:x="280" fg:w="1"/><text x="4.9143%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="4.6643%" y="933" width="0.0167%" height="15" fill="rgb(254,216,34)" fg:x="280" fg:w="1"/><text x="4.9143%" y="943.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (1 samples, 0.02%)</title><rect x="4.6810%" y="1045" width="0.0167%" height="15" fill="rgb(251,32,27)" fg:x="281" fg:w="1"/><text x="4.9310%" y="1055.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::append (1 samples, 0.02%)</title><rect x="4.6810%" y="1029" width="0.0167%" height="15" fill="rgb(208,127,28)" fg:x="281" fg:w="1"/><text x="4.9310%" y="1039.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append2 (1 samples, 0.02%)</title><rect x="4.6810%" y="1013" width="0.0167%" height="15" fill="rgb(224,137,22)" fg:x="281" fg:w="1"/><text x="4.9310%" y="1023.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (1 samples, 0.02%)</title><rect x="4.6810%" y="997" width="0.0167%" height="15" fill="rgb(254,70,32)" fg:x="281" fg:w="1"/><text x="4.9310%" y="1007.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::grow (1 samples, 0.02%)</title><rect x="4.6810%" y="981" width="0.0167%" height="15" fill="rgb(229,75,37)" fg:x="281" fg:w="1"/><text x="4.9310%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="4.6810%" y="965" width="0.0167%" height="15" fill="rgb(252,64,23)" fg:x="281" fg:w="1"/><text x="4.9310%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;[core::mem::maybe_uninit::MaybeUninit&lt;T&gt;],A&gt;::assume_init (1 samples, 0.02%)</title><rect x="4.6810%" y="949" width="0.0167%" height="15" fill="rgb(232,162,48)" fg:x="281" fg:w="1"/><text x="4.9310%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (4 samples, 0.07%)</title><rect x="4.6477%" y="1061" width="0.0666%" height="15" fill="rgb(246,160,12)" fg:x="279" fg:w="4"/><text x="4.8977%" y="1071.50"></text></g><g><title>httparse::Request::parse_with_uninit_headers (1 samples, 0.02%)</title><rect x="4.6977%" y="1045" width="0.0167%" height="15" fill="rgb(247,166,0)" fg:x="282" fg:w="1"/><text x="4.9477%" y="1055.50"></text></g><g><title>httparse::parse_headers_iter_uninit (1 samples, 0.02%)</title><rect x="4.6977%" y="1029" width="0.0167%" height="15" fill="rgb(249,219,21)" fg:x="282" fg:w="1"/><text x="4.9477%" y="1039.50"></text></g><g><title>httparse::iter::Bytes8::_0 (1 samples, 0.02%)</title><rect x="4.6977%" y="1013" width="0.0167%" height="15" fill="rgb(205,209,3)" fg:x="282" fg:w="1"/><text x="4.9477%" y="1023.50"></text></g><g><title>httparse::iter::Bytes8::assert_pos (1 samples, 0.02%)</title><rect x="4.6977%" y="997" width="0.0167%" height="15" fill="rgb(243,44,1)" fg:x="282" fg:w="1"/><text x="4.9477%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::Node&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="997" width="0.0167%" height="15" fill="rgb(206,159,16)" fg:x="283" fg:w="1"/><text x="4.9643%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;axum::routing::RouteId,alloc::sync::Arc&lt;str&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="981" width="0.0167%" height="15" fill="rgb(244,77,30)" fg:x="283" fg:w="1"/><text x="4.9643%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;axum::routing::RouteId,alloc::sync::Arc&lt;str&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="965" width="0.0167%" height="15" fill="rgb(218,69,12)" fg:x="283" fg:w="1"/><text x="4.9643%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(axum::routing::RouteId,alloc::sync::Arc&lt;str&gt;)&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="949" width="0.0167%" height="15" fill="rgb(212,87,7)" fg:x="283" fg:w="1"/><text x="4.9643%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="4.7143%" y="933" width="0.0167%" height="15" fill="rgb(245,114,25)" fg:x="283" fg:w="1"/><text x="4.9643%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.02%)</title><rect x="4.7143%" y="917" width="0.0167%" height="15" fill="rgb(210,61,42)" fg:x="283" fg:w="1"/><text x="4.9643%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.02%)</title><rect x="4.7143%" y="901" width="0.0167%" height="15" fill="rgb(211,52,33)" fg:x="283" fg:w="1"/><text x="4.9643%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(axum::routing::RouteId,alloc::sync::Arc&lt;str&gt;)&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="885" width="0.0167%" height="15" fill="rgb(234,58,33)" fg:x="283" fg:w="1"/><text x="4.9643%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7143%" y="869" width="0.0167%" height="15" fill="rgb(220,115,36)" fg:x="283" fg:w="1"/><text x="4.9643%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="4.7143%" y="853" width="0.0167%" height="15" fill="rgb(243,153,54)" fg:x="283" fg:w="1"/><text x="4.9643%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="4.7143%" y="837" width="0.0167%" height="15" fill="rgb(251,47,18)" fg:x="283" fg:w="1"/><text x="4.9643%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="4.7143%" y="821" width="0.0167%" height="15" fill="rgb(242,102,42)" fg:x="283" fg:w="1"/><text x="4.9643%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::dispatch::Server&lt;axum::routing::Router,hyper::body::body::Body&gt;&gt; (3 samples, 0.05%)</title><rect x="4.7143%" y="1029" width="0.0500%" height="15" fill="rgb(234,31,38)" fg:x="283" fg:w="3"/><text x="4.9643%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::Router&gt; (3 samples, 0.05%)</title><rect x="4.7143%" y="1013" width="0.0500%" height="15" fill="rgb(221,117,51)" fg:x="283" fg:w="3"/><text x="4.9643%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;axum::routing::RouteId,axum::routing::route::Route&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="997" width="0.0333%" height="15" fill="rgb(212,20,18)" fg:x="284" fg:w="2"/><text x="4.9810%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;axum::routing::RouteId,axum::routing::route::Route,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="981" width="0.0333%" height="15" fill="rgb(245,133,36)" fg:x="284" fg:w="2"/><text x="4.9810%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(axum::routing::RouteId,axum::routing::route::Route)&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="965" width="0.0333%" height="15" fill="rgb(212,6,19)" fg:x="284" fg:w="2"/><text x="4.9810%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="4.7310%" y="949" width="0.0333%" height="15" fill="rgb(218,1,36)" fg:x="284" fg:w="2"/><text x="4.9810%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.03%)</title><rect x="4.7310%" y="933" width="0.0333%" height="15" fill="rgb(246,84,54)" fg:x="284" fg:w="2"/><text x="4.9810%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.03%)</title><rect x="4.7310%" y="917" width="0.0333%" height="15" fill="rgb(242,110,6)" fg:x="284" fg:w="2"/><text x="4.9810%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;(axum::routing::RouteId,axum::routing::route::Route)&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="901" width="0.0333%" height="15" fill="rgb(214,47,5)" fg:x="284" fg:w="2"/><text x="4.9810%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="885" width="0.0333%" height="15" fill="rgb(218,159,25)" fg:x="284" fg:w="2"/><text x="4.9810%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="869" width="0.0333%" height="15" fill="rgb(215,211,28)" fg:x="284" fg:w="2"/><text x="4.9810%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="853" width="0.0333%" height="15" fill="rgb(238,59,32)" fg:x="284" fg:w="2"/><text x="4.9810%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,fydia_router::Log&gt;,axum::body::box_body&lt;tower_http::trace::body::ResponseBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;,tower_http::classify::NeverClassifyEos&lt;tower_http::classify::ServerErrorsFailureClass&gt;,tower_http::trace::on_body_chunk::DefaultOnBodyChunk,tower_http::trace::on_eos::DefaultOnEos,tower_http::trace::on_failure::DefaultOnFailure&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,fydia_router::Log&gt;,axum::body::box_body&lt;tower_http::trace::body::ResponseBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;,tower_http::classify::NeverClassifyEos&lt;tower_http::classify::ServerErrorsFailureClass&gt;,tower_http::trace::on_body_chunk::DefaultOnBodyChunk,tower_http::trace::on_eos::DefaultOnEos,tower_http::trace::on_failure::DefaultOnFailure&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="837" width="0.0333%" height="15" fill="rgb(226,82,3)" fg:x="284" fg:w="2"/><text x="4.9810%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,fydia_router::Log&gt;,axum::body::box_body&lt;tower_http::trace::body::ResponseBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;,tower_http::classify::NeverClassifyEos&lt;tower_http::classify::ServerErrorsFailureClass&gt;,tower_http::trace::on_body_chunk::DefaultOnBodyChunk,tower_http::trace::on_eos::DefaultOnEos,tower_http::trace::on_failure::DefaultOnFailure&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="821" width="0.0333%" height="15" fill="rgb(240,164,32)" fg:x="284" fg:w="2"/><text x="4.9810%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,fydia_router::Log&gt;&gt; (2 samples, 0.03%)</title><rect x="4.7310%" y="805" width="0.0333%" height="15" fill="rgb(232,46,7)" fg:x="284" fg:w="2"/><text x="4.9810%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="789" width="0.0167%" height="15" fill="rgb(229,129,53)" fg:x="285" fg:w="1"/><text x="4.9976%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="773" width="0.0167%" height="15" fill="rgb(234,188,29)" fg:x="285" fg:w="1"/><text x="4.9976%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="757" width="0.0167%" height="15" fill="rgb(246,141,4)" fg:x="285" fg:w="1"/><text x="4.9976%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_router::handlers::api::websocket::Websockets&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_router::handlers::api::websocket::Websockets&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="741" width="0.0167%" height="15" fill="rgb(229,23,39)" fg:x="285" fg:w="1"/><text x="4.9976%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_router::handlers::api::websocket::Websockets&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="725" width="0.0167%" height="15" fill="rgb(206,12,3)" fg:x="285" fg:w="1"/><text x="4.9976%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_router::handlers::api::websocket::Websockets&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="709" width="0.0167%" height="15" fill="rgb(252,226,20)" fg:x="285" fg:w="1"/><text x="4.9976%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="693" width="0.0167%" height="15" fill="rgb(216,123,35)" fg:x="285" fg:w="1"/><text x="4.9976%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="677" width="0.0167%" height="15" fill="rgb(212,68,40)" fg:x="285" fg:w="1"/><text x="4.9976%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="661" width="0.0167%" height="15" fill="rgb(254,125,32)" fg:x="285" fg:w="1"/><text x="4.9976%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_struct::instance::RsaData&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_struct::instance::RsaData&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="645" width="0.0167%" height="15" fill="rgb(253,97,22)" fg:x="285" fg:w="1"/><text x="4.9976%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_struct::instance::RsaData&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="629" width="0.0167%" height="15" fill="rgb(241,101,14)" fg:x="285" fg:w="1"/><text x="4.9976%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,fydia_struct::instance::RsaData&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="613" width="0.0167%" height="15" fill="rgb(238,103,29)" fg:x="285" fg:w="1"/><text x="4.9976%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="597" width="0.0167%" height="15" fill="rgb(233,195,47)" fg:x="285" fg:w="1"/><text x="4.9976%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="581" width="0.0167%" height="15" fill="rgb(246,218,30)" fg:x="285" fg:w="1"/><text x="4.9976%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="565" width="0.0167%" height="15" fill="rgb(219,145,47)" fg:x="285" fg:w="1"/><text x="4.9976%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_router::handlers::api::websocket::Websockets&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_router::handlers::api::websocket::Websockets&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="549" width="0.0167%" height="15" fill="rgb(243,12,26)" fg:x="285" fg:w="1"/><text x="4.9976%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_router::handlers::api::websocket::Websockets&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="533" width="0.0167%" height="15" fill="rgb(214,87,16)" fg:x="285" fg:w="1"/><text x="4.9976%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_router::handlers::api::websocket::Websockets&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="517" width="0.0167%" height="15" fill="rgb(208,99,42)" fg:x="285" fg:w="1"/><text x="4.9976%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="501" width="0.0167%" height="15" fill="rgb(253,99,2)" fg:x="285" fg:w="1"/><text x="4.9976%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="485" width="0.0167%" height="15" fill="rgb(220,168,23)" fg:x="285" fg:w="1"/><text x="4.9976%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="469" width="0.0167%" height="15" fill="rgb(242,38,24)" fg:x="285" fg:w="1"/><text x="4.9976%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_struct::instance::Instance&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_struct::instance::Instance&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="453" width="0.0167%" height="15" fill="rgb(225,182,9)" fg:x="285" fg:w="1"/><text x="4.9976%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_struct::instance::Instance&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="437" width="0.0167%" height="15" fill="rgb(243,178,37)" fg:x="285" fg:w="1"/><text x="4.9976%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;fydia_struct::instance::Instance&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="421" width="0.0167%" height="15" fill="rgb(232,139,19)" fg:x="285" fg:w="1"/><text x="4.9976%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="405" width="0.0167%" height="15" fill="rgb(225,201,24)" fg:x="285" fg:w="1"/><text x="4.9976%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="389" width="0.0167%" height="15" fill="rgb(221,47,46)" fg:x="285" fg:w="1"/><text x="4.9976%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="373" width="0.0167%" height="15" fill="rgb(249,23,13)" fg:x="285" fg:w="1"/><text x="4.9976%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;sea_orm::database::db_connection::DatabaseConnection&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;sea_orm::database::db_connection::DatabaseConnection&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="357" width="0.0167%" height="15" fill="rgb(219,9,5)" fg:x="285" fg:w="1"/><text x="4.9976%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::map_response_body::MapResponseBody&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;sea_orm::database::db_connection::DatabaseConnection&gt;&gt;,axum::body::box_body&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="341" width="0.0167%" height="15" fill="rgb(254,171,16)" fg:x="285" fg:w="1"/><text x="4.9976%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::add_extension::AddExtension&lt;axum::routing::route::Route,alloc::sync::Arc&lt;sea_orm::database::db_connection::DatabaseConnection&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="325" width="0.0167%" height="15" fill="rgb(230,171,20)" fg:x="285" fg:w="1"/><text x="4.9976%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="309" width="0.0167%" height="15" fill="rgb(210,71,41)" fg:x="285" fg:w="1"/><text x="4.9976%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="293" width="0.0167%" height="15" fill="rgb(206,173,20)" fg:x="285" fg:w="1"/><text x="4.9976%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="277" width="0.0167%" height="15" fill="rgb(233,88,34)" fg:x="285" fg:w="1"/><text x="4.9976%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="261" width="0.0167%" height="15" fill="rgb(223,209,46)" fg:x="285" fg:w="1"/><text x="4.9976%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="245" width="0.0167%" height="15" fill="rgb(250,43,18)" fg:x="285" fg:w="1"/><text x="4.9976%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="229" width="0.0167%" height="15" fill="rgb(208,13,10)" fg:x="285" fg:w="1"/><text x="4.9976%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="213" width="0.0167%" height="15" fill="rgb(212,200,36)" fg:x="285" fg:w="1"/><text x="4.9976%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="197" width="0.0167%" height="15" fill="rgb(225,90,30)" fg:x="285" fg:w="1"/><text x="4.9976%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;,axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="181" width="0.0167%" height="15" fill="rgb(236,182,39)" fg:x="285" fg:w="1"/><text x="4.9976%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::strip_prefix::StripPrefix&lt;axum::routing::route::Route&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="165" width="0.0167%" height="15" fill="rgb(212,144,35)" fg:x="285" fg:w="1"/><text x="4.9976%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::Route&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="149" width="0.0167%" height="15" fill="rgb(228,63,44)" fg:x="285" fg:w="1"/><text x="4.9976%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::clone_box_service::CloneBoxService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="133" width="0.0167%" height="15" fill="rgb(228,109,6)" fg:x="285" fg:w="1"/><text x="4.9976%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn axum::clone_box_service::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Error = core::convert::Infallible+core::marker::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="4.7476%" y="117" width="0.0167%" height="15" fill="rgb(238,117,24)" fg:x="285" fg:w="1"/><text x="4.9976%" y="127.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.02%)</title><rect x="4.7476%" y="101" width="0.0167%" height="15" fill="rgb(242,26,26)" fg:x="285" fg:w="1"/><text x="4.9976%" y="111.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="4.7476%" y="85" width="0.0167%" height="15" fill="rgb(221,92,48)" fg:x="285" fg:w="1"/><text x="4.9976%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="4.7476%" y="69" width="0.0167%" height="15" fill="rgb(209,209,32)" fg:x="285" fg:w="1"/><text x="4.9976%" y="79.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="4.7143%" y="1061" width="0.0666%" height="15" fill="rgb(221,70,22)" fg:x="283" fg:w="4"/><text x="4.9643%" y="1071.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="4.7143%" y="1045" width="0.0666%" height="15" fill="rgb(248,145,5)" fg:x="283" fg:w="4"/><text x="4.9643%" y="1055.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::into_inner (1 samples, 0.02%)</title><rect x="4.7643%" y="1029" width="0.0167%" height="15" fill="rgb(226,116,26)" fg:x="286" fg:w="1"/><text x="5.0143%" y="1039.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::into_inner (1 samples, 0.02%)</title><rect x="4.7643%" y="1013" width="0.0167%" height="15" fill="rgb(244,5,17)" fg:x="286" fg:w="1"/><text x="5.0143%" y="1023.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::into_inner (1 samples, 0.02%)</title><rect x="4.7643%" y="997" width="0.0167%" height="15" fill="rgb(252,159,33)" fg:x="286" fg:w="1"/><text x="5.0143%" y="1007.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (1 samples, 0.02%)</title><rect x="4.7643%" y="981" width="0.0167%" height="15" fill="rgb(206,71,0)" fg:x="286" fg:w="1"/><text x="5.0143%" y="991.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="4.7643%" y="965" width="0.0167%" height="15" fill="rgb(233,118,54)" fg:x="286" fg:w="1"/><text x="5.0143%" y="975.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="4.7643%" y="949" width="0.0167%" height="15" fill="rgb(234,83,48)" fg:x="286" fg:w="1"/><text x="5.0143%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="4.7643%" y="933" width="0.0167%" height="15" fill="rgb(228,3,54)" fg:x="286" fg:w="1"/><text x="5.0143%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.02%)</title><rect x="4.7643%" y="917" width="0.0167%" height="15" fill="rgb(226,155,13)" fg:x="286" fg:w="1"/><text x="5.0143%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.02%)</title><rect x="4.7643%" y="901" width="0.0167%" height="15" fill="rgb(241,28,37)" fg:x="286" fg:w="1"/><text x="5.0143%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.02%)</title><rect x="4.7643%" y="885" width="0.0167%" height="15" fill="rgb(233,93,10)" fg:x="286" fg:w="1"/><text x="5.0143%" y="895.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.02%)</title><rect x="4.7809%" y="917" width="0.0167%" height="15" fill="rgb(225,113,19)" fg:x="287" fg:w="1"/><text x="5.0309%" y="927.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="4.7809%" y="901" width="0.0167%" height="15" fill="rgb(241,2,18)" fg:x="287" fg:w="1"/><text x="5.0309%" y="911.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="4.7809%" y="885" width="0.0167%" height="15" fill="rgb(228,207,21)" fg:x="287" fg:w="1"/><text x="5.0309%" y="895.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="4.7809%" y="869" width="0.0167%" height="15" fill="rgb(213,211,35)" fg:x="287" fg:w="1"/><text x="5.0309%" y="879.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="4.7809%" y="1045" width="0.0333%" height="15" fill="rgb(209,83,10)" fg:x="287" fg:w="2"/><text x="5.0309%" y="1055.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="4.7809%" y="1029" width="0.0333%" height="15" fill="rgb(209,164,1)" fg:x="287" fg:w="2"/><text x="5.0309%" y="1039.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::call (2 samples, 0.03%)</title><rect x="4.7809%" y="1013" width="0.0333%" height="15" fill="rgb(213,184,43)" fg:x="287" fg:w="2"/><text x="5.0309%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (2 samples, 0.03%)</title><rect x="4.7809%" y="997" width="0.0333%" height="15" fill="rgb(231,61,34)" fg:x="287" fg:w="2"/><text x="5.0309%" y="1007.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (2 samples, 0.03%)</title><rect x="4.7809%" y="981" width="0.0333%" height="15" fill="rgb(235,75,3)" fg:x="287" fg:w="2"/><text x="5.0309%" y="991.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as tower_service::Service&lt;Req&gt;&gt;::call (2 samples, 0.03%)</title><rect x="4.7809%" y="965" width="0.0333%" height="15" fill="rgb(220,106,47)" fg:x="287" fg:w="2"/><text x="5.0309%" y="975.50"></text></g><g><title>&lt;tower_http::trace::service::Trace&lt;S,M,MakeSpanT,OnRequestT,OnResponseT,OnBodyChunkT,OnEosT,OnFailureT&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (2 samples, 0.03%)</title><rect x="4.7809%" y="949" width="0.0333%" height="15" fill="rgb(210,196,33)" fg:x="287" fg:w="2"/><text x="5.0309%" y="959.50"></text></g><g><title>&lt;fydia_router::Log as tower_http::trace::on_request::OnRequest&lt;hyper::body::body::Body&gt;&gt;::on_request (2 samples, 0.03%)</title><rect x="4.7809%" y="933" width="0.0333%" height="15" fill="rgb(229,154,42)" fg:x="287" fg:w="2"/><text x="5.0309%" y="943.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.02%)</title><rect x="4.7976%" y="917" width="0.0167%" height="15" fill="rgb(228,114,26)" fg:x="288" fg:w="1"/><text x="5.0476%" y="927.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.8143%" y="1029" width="0.0167%" height="15" fill="rgb(208,144,1)" fg:x="289" fg:w="1"/><text x="5.0643%" y="1039.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.8143%" y="1013" width="0.0167%" height="15" fill="rgb(239,112,37)" fg:x="289" fg:w="1"/><text x="5.0643%" y="1023.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8143%" y="997" width="0.0167%" height="15" fill="rgb(210,96,50)" fg:x="289" fg:w="1"/><text x="5.0643%" y="1007.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8143%" y="981" width="0.0167%" height="15" fill="rgb(222,178,2)" fg:x="289" fg:w="1"/><text x="5.0643%" y="991.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8143%" y="965" width="0.0167%" height="15" fill="rgb(226,74,18)" fg:x="289" fg:w="1"/><text x="5.0643%" y="975.50"></text></g><g><title>&lt;axum::routing::strip_prefix::StripPrefix&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8143%" y="949" width="0.0167%" height="15" fill="rgb(225,67,54)" fg:x="289" fg:w="1"/><text x="5.0643%" y="959.50"></text></g><g><title>&lt;axum::routing::route::Route&lt;B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8143%" y="933" width="0.0167%" height="15" fill="rgb(251,92,32)" fg:x="289" fg:w="1"/><text x="5.0643%" y="943.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="4.8143%" y="917" width="0.0167%" height="15" fill="rgb(228,149,22)" fg:x="289" fg:w="1"/><text x="5.0643%" y="927.50"></text></g><g><title>&lt;T as axum::clone_box_service::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="4.8143%" y="901" width="0.0167%" height="15" fill="rgb(243,54,13)" fg:x="289" fg:w="1"/><text x="5.0643%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="4.8143%" y="885" width="0.0167%" height="15" fill="rgb(243,180,28)" fg:x="289" fg:w="1"/><text x="5.0643%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="4.8143%" y="869" width="0.0167%" height="15" fill="rgb(208,167,24)" fg:x="289" fg:w="1"/><text x="5.0643%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="4.8143%" y="853" width="0.0167%" height="15" fill="rgb(245,73,45)" fg:x="289" fg:w="1"/><text x="5.0643%" y="863.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="4.8143%" y="837" width="0.0167%" height="15" fill="rgb(237,203,48)" fg:x="289" fg:w="1"/><text x="5.0643%" y="847.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="4.7809%" y="1061" width="0.0666%" height="15" fill="rgb(211,197,16)" fg:x="287" fg:w="4"/><text x="5.0309%" y="1071.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="4.8143%" y="1045" width="0.0333%" height="15" fill="rgb(243,99,51)" fg:x="289" fg:w="2"/><text x="5.0643%" y="1055.50"></text></g><g><title>&lt;tower_http::map_response_body::ResponseFuture&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.8309%" y="1029" width="0.0167%" height="15" fill="rgb(215,123,29)" fg:x="290" fg:w="1"/><text x="5.0809%" y="1039.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.8309%" y="1013" width="0.0167%" height="15" fill="rgb(239,186,37)" fg:x="290" fg:w="1"/><text x="5.0809%" y="1023.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="4.8309%" y="997" width="0.0167%" height="15" fill="rgb(252,136,39)" fg:x="290" fg:w="1"/><text x="5.0809%" y="1007.50"></text></g><g><title>&lt;axum::clone_box_service::CloneBoxService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8309%" y="981" width="0.0167%" height="15" fill="rgb(223,213,32)" fg:x="290" fg:w="1"/><text x="5.0809%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8309%" y="965" width="0.0167%" height="15" fill="rgb(233,115,5)" fg:x="290" fg:w="1"/><text x="5.0809%" y="975.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8309%" y="949" width="0.0167%" height="15" fill="rgb(207,226,44)" fg:x="290" fg:w="1"/><text x="5.0809%" y="959.50"></text></g><g><title>&lt;tower_http::map_response_body::MapResponseBody&lt;S,F&gt; as tower_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8309%" y="933" width="0.0167%" height="15" fill="rgb(208,126,0)" fg:x="290" fg:w="1"/><text x="5.0809%" y="943.50"></text></g><g><title>&lt;axum::add_extension::AddExtension&lt;S,T&gt; as tower_service::Service&lt;http::request::Request&lt;ResBody&gt;&gt;&gt;::call (1 samples, 0.02%)</title><rect x="4.8309%" y="917" width="0.0167%" height="15" fill="rgb(244,66,21)" fg:x="290" fg:w="1"/><text x="5.0809%" y="927.50"></text></g><g><title>http::extensions::Extensions::insert (1 samples, 0.02%)</title><rect x="4.8309%" y="901" width="0.0167%" height="15" fill="rgb(222,97,12)" fg:x="290" fg:w="1"/><text x="5.0809%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="4.8309%" y="885" width="0.0167%" height="15" fill="rgb(219,213,19)" fg:x="290" fg:w="1"/><text x="5.0809%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="4.8309%" y="869" width="0.0167%" height="15" fill="rgb(252,169,30)" fg:x="290" fg:w="1"/><text x="5.0809%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.02%)</title><rect x="4.8309%" y="853" width="0.0167%" height="15" fill="rgb(206,32,51)" fg:x="290" fg:w="1"/><text x="5.0809%" y="863.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="4.8476%" y="1061" width="0.0167%" height="15" fill="rgb(250,172,42)" fg:x="291" fg:w="1"/><text x="5.0976%" y="1071.50"></text></g><g><title>argon2::Argon2::hash_password_into (1 samples, 0.02%)</title><rect x="4.8642%" y="1061" width="0.0167%" height="15" fill="rgb(209,34,43)" fg:x="292" fg:w="1"/><text x="5.1142%" y="1071.50"></text></g><g><title>argon2::Argon2::hash_password_into_with_memory (1 samples, 0.02%)</title><rect x="4.8642%" y="1045" width="0.0167%" height="15" fill="rgb(223,11,35)" fg:x="292" fg:w="1"/><text x="5.1142%" y="1055.50"></text></g><g><title>argon2::instance::Instance::hash (1 samples, 0.02%)</title><rect x="4.8642%" y="1029" width="0.0167%" height="15" fill="rgb(251,219,26)" fg:x="292" fg:w="1"/><text x="5.1142%" y="1039.50"></text></g><g><title>argon2::instance::Instance::new (1 samples, 0.02%)</title><rect x="4.8642%" y="1013" width="0.0167%" height="15" fill="rgb(231,119,3)" fg:x="292" fg:w="1"/><text x="5.1142%" y="1023.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (1 samples, 0.02%)</title><rect x="4.8642%" y="997" width="0.0167%" height="15" fill="rgb(216,97,11)" fg:x="292" fg:w="1"/><text x="5.1142%" y="1007.50"></text></g><g><title>argon2::instance::blake2b_long (1 samples, 0.02%)</title><rect x="4.8642%" y="981" width="0.0167%" height="15" fill="rgb(223,59,9)" fg:x="292" fg:w="1"/><text x="5.1142%" y="991.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.02%)</title><rect x="4.8642%" y="965" width="0.0167%" height="15" fill="rgb(233,93,31)" fg:x="292" fg:w="1"/><text x="5.1142%" y="975.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::Update&gt;::update (1 samples, 0.02%)</title><rect x="4.8642%" y="949" width="0.0167%" height="15" fill="rgb(239,81,33)" fg:x="292" fg:w="1"/><text x="5.1142%" y="959.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::Update&gt;::update (1 samples, 0.02%)</title><rect x="4.8809%" y="965" width="0.0167%" height="15" fill="rgb(213,120,34)" fg:x="293" fg:w="1"/><text x="5.1309%" y="975.50"></text></g><g><title>blake2::blake2b::VarBlake2b::update (1 samples, 0.02%)</title><rect x="4.8809%" y="949" width="0.0167%" height="15" fill="rgb(243,49,53)" fg:x="293" fg:w="1"/><text x="5.1309%" y="959.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="4.8809%" y="933" width="0.0167%" height="15" fill="rgb(247,216,33)" fg:x="293" fg:w="1"/><text x="5.1309%" y="943.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="4.8809%" y="917" width="0.0167%" height="15" fill="rgb(226,26,14)" fg:x="293" fg:w="1"/><text x="5.1309%" y="927.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="4.8809%" y="901" width="0.0167%" height="15" fill="rgb(215,49,53)" fg:x="293" fg:w="1"/><text x="5.1309%" y="911.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="4.8809%" y="885" width="0.0167%" height="15" fill="rgb(245,162,40)" fg:x="293" fg:w="1"/><text x="5.1309%" y="895.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="4.8809%" y="869" width="0.0167%" height="15" fill="rgb(229,68,17)" fg:x="293" fg:w="1"/><text x="5.1309%" y="879.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (5 samples, 0.08%)</title><rect x="4.8976%" y="949" width="0.0833%" height="15" fill="rgb(213,182,10)" fg:x="294" fg:w="5"/><text x="5.1476%" y="959.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (5 samples, 0.08%)</title><rect x="4.8976%" y="933" width="0.0833%" height="15" fill="rgb(245,125,30)" fg:x="294" fg:w="5"/><text x="5.1476%" y="943.50"></text></g><g><title>blake2::blake2b::VarBlake2b::finalize_with_flag (5 samples, 0.08%)</title><rect x="4.8976%" y="917" width="0.0833%" height="15" fill="rgb(232,202,2)" fg:x="294" fg:w="5"/><text x="5.1476%" y="927.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5 samples, 0.08%)</title><rect x="4.8976%" y="901" width="0.0833%" height="15" fill="rgb(237,140,51)" fg:x="294" fg:w="5"/><text x="5.1476%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="4.9142%" y="885" width="0.0666%" height="15" fill="rgb(236,157,25)" fg:x="295" fg:w="4"/><text x="5.1642%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.03%)</title><rect x="4.9475%" y="869" width="0.0333%" height="15" fill="rgb(219,209,0)" fg:x="297" fg:w="2"/><text x="5.1975%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="4.9642%" y="853" width="0.0167%" height="15" fill="rgb(240,116,54)" fg:x="298" fg:w="1"/><text x="5.2142%" y="863.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (8 samples, 0.13%)</title><rect x="4.8809%" y="981" width="0.1333%" height="15" fill="rgb(216,10,36)" fg:x="293" fg:w="8"/><text x="5.1309%" y="991.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (7 samples, 0.12%)</title><rect x="4.8976%" y="965" width="0.1166%" height="15" fill="rgb(222,72,44)" fg:x="294" fg:w="7"/><text x="5.1476%" y="975.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.03%)</title><rect x="4.9808%" y="949" width="0.0333%" height="15" fill="rgb(232,159,9)" fg:x="299" fg:w="2"/><text x="5.2308%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.03%)</title><rect x="4.9808%" y="933" width="0.0333%" height="15" fill="rgb(210,39,32)" fg:x="299" fg:w="2"/><text x="5.2308%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.03%)</title><rect x="4.9808%" y="917" width="0.0333%" height="15" fill="rgb(216,194,45)" fg:x="299" fg:w="2"/><text x="5.2308%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.03%)</title><rect x="4.9808%" y="901" width="0.0333%" height="15" fill="rgb(218,18,35)" fg:x="299" fg:w="2"/><text x="5.2308%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="4.9808%" y="885" width="0.0333%" height="15" fill="rgb(207,83,51)" fg:x="299" fg:w="2"/><text x="5.2308%" y="895.50"></text></g><g><title>argon2::Argon2::hash_password_into_with_memory (9 samples, 0.15%)</title><rect x="4.8809%" y="1061" width="0.1499%" height="15" fill="rgb(225,63,43)" fg:x="293" fg:w="9"/><text x="5.1309%" y="1071.50"></text></g><g><title>argon2::instance::Instance::hash (9 samples, 0.15%)</title><rect x="4.8809%" y="1045" width="0.1499%" height="15" fill="rgb(207,57,36)" fg:x="293" fg:w="9"/><text x="5.1309%" y="1055.50"></text></g><g><title>argon2::instance::Instance::new (9 samples, 0.15%)</title><rect x="4.8809%" y="1029" width="0.1499%" height="15" fill="rgb(216,99,33)" fg:x="293" fg:w="9"/><text x="5.1309%" y="1039.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (9 samples, 0.15%)</title><rect x="4.8809%" y="1013" width="0.1499%" height="15" fill="rgb(225,42,16)" fg:x="293" fg:w="9"/><text x="5.1309%" y="1023.50"></text></g><g><title>argon2::instance::blake2b_long (9 samples, 0.15%)</title><rect x="4.8809%" y="997" width="0.1499%" height="15" fill="rgb(220,201,45)" fg:x="293" fg:w="9"/><text x="5.1309%" y="1007.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (1 samples, 0.02%)</title><rect x="5.0142%" y="981" width="0.0167%" height="15" fill="rgb(225,33,4)" fg:x="301" fg:w="1"/><text x="5.2642%" y="991.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.02%)</title><rect x="5.0142%" y="965" width="0.0167%" height="15" fill="rgb(224,33,50)" fg:x="301" fg:w="1"/><text x="5.2642%" y="975.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.02%)</title><rect x="5.0142%" y="949" width="0.0167%" height="15" fill="rgb(246,198,51)" fg:x="301" fg:w="1"/><text x="5.2642%" y="959.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.02%)</title><rect x="5.0142%" y="933" width="0.0167%" height="15" fill="rgb(205,22,4)" fg:x="301" fg:w="1"/><text x="5.2642%" y="943.50"></text></g><g><title>blake2::blake2b::VarBlake2b::finalize_with_flag (1 samples, 0.02%)</title><rect x="5.0142%" y="917" width="0.0167%" height="15" fill="rgb(206,3,8)" fg:x="301" fg:w="1"/><text x="5.2642%" y="927.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="5.0142%" y="901" width="0.0167%" height="15" fill="rgb(251,23,15)" fg:x="301" fg:w="1"/><text x="5.2642%" y="911.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="5.0142%" y="885" width="0.0167%" height="15" fill="rgb(252,88,28)" fg:x="301" fg:w="1"/><text x="5.2642%" y="895.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (1 samples, 0.02%)</title><rect x="5.0142%" y="869" width="0.0167%" height="15" fill="rgb(212,127,14)" fg:x="301" fg:w="1"/><text x="5.2642%" y="879.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="47.3097%" y="1013" width="0.0167%" height="15" fill="rgb(247,145,37)" fg:x="2840" fg:w="1"/><text x="47.5597%" y="1023.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (116 samples, 1.93%)</title><rect x="52.9735%" y="981" width="1.9324%" height="15" fill="rgb(209,117,53)" fg:x="3180" fg:w="116"/><text x="53.2235%" y="991.50">&lt;..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (28 samples, 0.47%)</title><rect x="54.4394%" y="965" width="0.4664%" height="15" fill="rgb(212,90,42)" fg:x="3268" fg:w="28"/><text x="54.6894%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (625 samples, 10.41%)</title><rect x="47.3263%" y="1013" width="10.4115%" height="15" fill="rgb(218,164,37)" fg:x="2841" fg:w="625"/><text x="47.5763%" y="1023.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (552 samples, 9.20%)</title><rect x="48.5424%" y="997" width="9.1954%" height="15" fill="rgb(246,65,34)" fg:x="2914" fg:w="552"/><text x="48.7924%" y="1007.50">&lt;core::iter::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (170 samples, 2.83%)</title><rect x="54.9059%" y="981" width="2.8319%" height="15" fill="rgb(231,100,33)" fg:x="3296" fg:w="170"/><text x="55.1559%" y="991.50">&lt;c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (19 samples, 0.32%)</title><rect x="57.4213%" y="965" width="0.3165%" height="15" fill="rgb(228,126,14)" fg:x="3447" fg:w="19"/><text x="57.6713%" y="975.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.07%)</title><rect x="57.7378%" y="1013" width="0.0666%" height="15" fill="rgb(215,173,21)" fg:x="3466" fg:w="4"/><text x="57.9878%" y="1023.50"></text></g><g><title>argon2::block::Block::iter (8 samples, 0.13%)</title><rect x="57.8044%" y="1013" width="0.1333%" height="15" fill="rgb(210,6,40)" fg:x="3470" fg:w="8"/><text x="58.0544%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.08%)</title><rect x="57.8544%" y="997" width="0.0833%" height="15" fill="rgb(212,48,18)" fg:x="3473" fg:w="5"/><text x="58.1044%" y="1007.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.07%)</title><rect x="57.8711%" y="981" width="0.0666%" height="15" fill="rgb(230,214,11)" fg:x="3474" fg:w="4"/><text x="58.1211%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.03%)</title><rect x="57.9044%" y="965" width="0.0333%" height="15" fill="rgb(254,105,39)" fg:x="3476" fg:w="2"/><text x="58.1544%" y="975.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="57.9210%" y="949" width="0.0167%" height="15" fill="rgb(245,158,5)" fg:x="3477" fg:w="1"/><text x="58.1710%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3 samples, 0.05%)</title><rect x="57.9877%" y="965" width="0.0500%" height="15" fill="rgb(249,208,11)" fg:x="3481" fg:w="3"/><text x="58.2377%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="58.0210%" y="949" width="0.0167%" height="15" fill="rgb(210,39,28)" fg:x="3483" fg:w="1"/><text x="58.2710%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.02%)</title><rect x="58.0376%" y="965" width="0.0167%" height="15" fill="rgb(211,56,53)" fg:x="3484" fg:w="1"/><text x="58.2876%" y="975.50"></text></g><g><title>argon2::block::Block::iter_mut (8 samples, 0.13%)</title><rect x="57.9377%" y="1013" width="0.1333%" height="15" fill="rgb(226,201,30)" fg:x="3478" fg:w="8"/><text x="58.1877%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (8 samples, 0.13%)</title><rect x="57.9377%" y="997" width="0.1333%" height="15" fill="rgb(239,101,34)" fg:x="3478" fg:w="8"/><text x="58.1877%" y="1007.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (7 samples, 0.12%)</title><rect x="57.9544%" y="981" width="0.1166%" height="15" fill="rgb(226,209,5)" fg:x="3479" fg:w="7"/><text x="58.2044%" y="991.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="58.0543%" y="965" width="0.0167%" height="15" fill="rgb(250,105,47)" fg:x="3485" fg:w="1"/><text x="58.3043%" y="975.50"></text></g><g><title>core::cmp::min (14 samples, 0.23%)</title><rect x="58.1376%" y="965" width="0.2332%" height="15" fill="rgb(230,72,3)" fg:x="3490" fg:w="14"/><text x="58.3876%" y="975.50"></text></g><g><title>core::cmp::Ord::min (14 samples, 0.23%)</title><rect x="58.1376%" y="949" width="0.2332%" height="15" fill="rgb(232,218,39)" fg:x="3490" fg:w="14"/><text x="58.3876%" y="959.50"></text></g><g><title>core::cmp::min_by (14 samples, 0.23%)</title><rect x="58.1376%" y="933" width="0.2332%" height="15" fill="rgb(248,166,6)" fg:x="3490" fg:w="14"/><text x="58.3876%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.15%)</title><rect x="58.2209%" y="917" width="0.1499%" height="15" fill="rgb(247,89,20)" fg:x="3495" fg:w="9"/><text x="58.4709%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.03%)</title><rect x="58.3375%" y="901" width="0.0333%" height="15" fill="rgb(248,130,54)" fg:x="3502" fg:w="2"/><text x="58.5875%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4 samples, 0.07%)</title><rect x="58.3708%" y="949" width="0.0666%" height="15" fill="rgb(234,196,4)" fg:x="3504" fg:w="4"/><text x="58.6208%" y="959.50"></text></g><g><title>&lt;argon2::block::Block as core::ops::bit::BitXorAssign&gt;::bitxor_assign (792 samples, 13.19%)</title><rect x="45.3107%" y="1029" width="13.1934%" height="15" fill="rgb(250,143,31)" fg:x="2720" fg:w="792"/><text x="45.5607%" y="1039.50">&lt;argon2::block::Bloc..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (26 samples, 0.43%)</title><rect x="58.0710%" y="1013" width="0.4331%" height="15" fill="rgb(211,110,34)" fg:x="3486" fg:w="26"/><text x="58.3210%" y="1023.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (24 samples, 0.40%)</title><rect x="58.1043%" y="997" width="0.3998%" height="15" fill="rgb(215,124,48)" fg:x="3488" fg:w="24"/><text x="58.3543%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (24 samples, 0.40%)</title><rect x="58.1043%" y="981" width="0.3998%" height="15" fill="rgb(216,46,13)" fg:x="3488" fg:w="24"/><text x="58.3543%" y="991.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (8 samples, 0.13%)</title><rect x="58.3708%" y="965" width="0.1333%" height="15" fill="rgb(205,184,25)" fg:x="3504" fg:w="8"/><text x="58.6208%" y="975.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4 samples, 0.07%)</title><rect x="58.4374%" y="949" width="0.0666%" height="15" fill="rgb(228,1,10)" fg:x="3508" fg:w="4"/><text x="58.6874%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="58.4708%" y="933" width="0.0333%" height="15" fill="rgb(213,116,27)" fg:x="3510" fg:w="2"/><text x="58.7208%" y="943.50"></text></g><g><title>&lt;argon2::block::Block as core::ops::bit::BitXor&gt;::bitxor (809 samples, 13.48%)</title><rect x="45.2440%" y="1045" width="13.4766%" height="15" fill="rgb(241,95,50)" fg:x="2716" fg:w="809"/><text x="45.4940%" y="1055.50">&lt;argon2::block::Bloc..</text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.22%)</title><rect x="58.5041%" y="1029" width="0.2166%" height="15" fill="rgb(238,48,32)" fg:x="3512" fg:w="13"/><text x="58.7541%" y="1039.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (35 samples, 0.58%)</title><rect x="61.4026%" y="997" width="0.5830%" height="15" fill="rgb(235,113,49)" fg:x="3686" fg:w="35"/><text x="61.6526%" y="1007.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (5 samples, 0.08%)</title><rect x="61.9024%" y="981" width="0.0833%" height="15" fill="rgb(205,127,43)" fg:x="3716" fg:w="5"/><text x="62.1524%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 3.18%)</title><rect x="59.5702%" y="1029" width="3.1817%" height="15" fill="rgb(250,162,2)" fg:x="3576" fg:w="191"/><text x="59.8202%" y="1039.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (154 samples, 2.57%)</title><rect x="60.1866%" y="1013" width="2.5654%" height="15" fill="rgb(220,13,41)" fg:x="3613" fg:w="154"/><text x="60.4366%" y="1023.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (46 samples, 0.77%)</title><rect x="61.9857%" y="997" width="0.7663%" height="15" fill="rgb(249,221,25)" fg:x="3721" fg:w="46"/><text x="62.2357%" y="1007.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (9 samples, 0.15%)</title><rect x="62.6020%" y="981" width="0.1499%" height="15" fill="rgb(215,208,19)" fg:x="3758" fg:w="9"/><text x="62.8520%" y="991.50"></text></g><g><title>argon2::block::Block::iter (2 samples, 0.03%)</title><rect x="62.7520%" y="1029" width="0.0333%" height="15" fill="rgb(236,175,2)" fg:x="3767" fg:w="2"/><text x="63.0020%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.03%)</title><rect x="62.7520%" y="1013" width="0.0333%" height="15" fill="rgb(241,52,2)" fg:x="3767" fg:w="2"/><text x="63.0020%" y="1023.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="62.7520%" y="997" width="0.0333%" height="15" fill="rgb(248,140,14)" fg:x="3767" fg:w="2"/><text x="63.0020%" y="1007.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.03%)</title><rect x="62.7520%" y="981" width="0.0333%" height="15" fill="rgb(253,22,42)" fg:x="3767" fg:w="2"/><text x="63.0020%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.03%)</title><rect x="62.7520%" y="965" width="0.0333%" height="15" fill="rgb(234,61,47)" fg:x="3767" fg:w="2"/><text x="63.0020%" y="975.50"></text></g><g><title>argon2::block::Block::iter_mut (1 samples, 0.02%)</title><rect x="62.7853%" y="1029" width="0.0167%" height="15" fill="rgb(208,226,15)" fg:x="3769" fg:w="1"/><text x="63.0353%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.02%)</title><rect x="62.7853%" y="1013" width="0.0167%" height="15" fill="rgb(217,221,4)" fg:x="3769" fg:w="1"/><text x="63.0353%" y="1023.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="62.7853%" y="997" width="0.0167%" height="15" fill="rgb(212,174,34)" fg:x="3769" fg:w="1"/><text x="63.0353%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="62.7853%" y="981" width="0.0167%" height="15" fill="rgb(253,83,4)" fg:x="3769" fg:w="1"/><text x="63.0353%" y="991.50"></text></g><g><title>core::cmp::min (2 samples, 0.03%)</title><rect x="62.8019%" y="981" width="0.0333%" height="15" fill="rgb(250,195,49)" fg:x="3770" fg:w="2"/><text x="63.0519%" y="991.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.03%)</title><rect x="62.8019%" y="965" width="0.0333%" height="15" fill="rgb(241,192,25)" fg:x="3770" fg:w="2"/><text x="63.0519%" y="975.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.03%)</title><rect x="62.8019%" y="949" width="0.0333%" height="15" fill="rgb(208,124,10)" fg:x="3770" fg:w="2"/><text x="63.0519%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="62.8019%" y="933" width="0.0333%" height="15" fill="rgb(222,33,0)" fg:x="3770" fg:w="2"/><text x="63.0519%" y="943.50"></text></g><g><title>&lt;argon2::block::Block as core::ops::bit::BitXorAssign&gt;::bitxor_assign (250 samples, 4.16%)</title><rect x="58.7206%" y="1045" width="4.1646%" height="15" fill="rgb(234,209,28)" fg:x="3525" fg:w="250"/><text x="58.9706%" y="1055.50">&lt;argo..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (5 samples, 0.08%)</title><rect x="62.8019%" y="1029" width="0.0833%" height="15" fill="rgb(224,11,23)" fg:x="3770" fg:w="5"/><text x="63.0519%" y="1039.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (5 samples, 0.08%)</title><rect x="62.8019%" y="1013" width="0.0833%" height="15" fill="rgb(232,99,1)" fg:x="3770" fg:w="5"/><text x="63.0519%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5 samples, 0.08%)</title><rect x="62.8019%" y="997" width="0.0833%" height="15" fill="rgb(237,95,45)" fg:x="3770" fg:w="5"/><text x="63.0519%" y="1007.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (3 samples, 0.05%)</title><rect x="62.8352%" y="981" width="0.0500%" height="15" fill="rgb(208,109,11)" fg:x="3772" fg:w="3"/><text x="63.0852%" y="991.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.05%)</title><rect x="62.8352%" y="965" width="0.0500%" height="15" fill="rgb(216,190,48)" fg:x="3772" fg:w="3"/><text x="63.0852%" y="975.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="62.8519%" y="949" width="0.0333%" height="15" fill="rgb(251,171,36)" fg:x="3773" fg:w="2"/><text x="63.1019%" y="959.50"></text></g><g><title>&lt;argon2::block::Block as core::ops::index::Index&lt;usize&gt;&gt;::index (426 samples, 7.10%)</title><rect x="62.8852%" y="1045" width="7.0965%" height="15" fill="rgb(230,62,22)" fg:x="3775" fg:w="426"/><text x="63.1352%" y="1055.50">&lt;argon2::b..</text></g><g><title>&lt;argon2::block::Block as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (201 samples, 3.35%)</title><rect x="69.9817%" y="1045" width="3.3483%" height="15" fill="rgb(225,114,35)" fg:x="4201" fg:w="201"/><text x="70.2317%" y="1055.50">&lt;ar..</text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="73.3300%" y="1045" width="0.0333%" height="15" fill="rgb(215,118,42)" fg:x="4402" fg:w="2"/><text x="73.5800%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3467%" y="1029" width="0.0167%" height="15" fill="rgb(243,119,21)" fg:x="4403" fg:w="1"/><text x="73.5967%" y="1039.50"></text></g><g><title>__memmove_avx_unaligned (5 samples, 0.08%)</title><rect x="73.3633%" y="1045" width="0.0833%" height="15" fill="rgb(252,177,53)" fg:x="4404" fg:w="5"/><text x="73.6133%" y="1055.50"></text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.57%)</title><rect x="73.4466%" y="1045" width="0.5664%" height="15" fill="rgb(237,209,29)" fg:x="4409" fg:w="34"/><text x="73.6966%" y="1055.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (356 samples, 5.93%)</title><rect x="84.4245%" y="1029" width="5.9304%" height="15" fill="rgb(212,65,23)" fg:x="5068" fg:w="356"/><text x="84.6745%" y="1039.50">&lt;core::n..</text></g><g><title>argon2::block::Block::fill_block::blake2_mult (1,305 samples, 21.74%)</title><rect x="74.0130%" y="1045" width="21.7391%" height="15" fill="rgb(230,222,46)" fg:x="4443" fg:w="1305"/><text x="74.2630%" y="1055.50">argon2::block::Block::fill_block::..</text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Mul&gt;::mul (324 samples, 5.40%)</title><rect x="90.3548%" y="1029" width="5.3973%" height="15" fill="rgb(215,135,32)" fg:x="5424" fg:w="324"/><text x="90.6048%" y="1039.50">&lt;core::..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8 samples, 0.13%)</title><rect x="96.3518%" y="1013" width="0.1333%" height="15" fill="rgb(246,101,22)" fg:x="5784" fg:w="8"/><text x="96.6018%" y="1023.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (3 samples, 0.05%)</title><rect x="96.4851%" y="1013" width="0.0500%" height="15" fill="rgb(206,107,13)" fg:x="5792" fg:w="3"/><text x="96.7351%" y="1023.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 0.08%)</title><rect x="96.5351%" y="1013" width="0.0833%" height="15" fill="rgb(250,100,44)" fg:x="5795" fg:w="5"/><text x="96.7851%" y="1023.50"></text></g><g><title>argon2::block::Block::fill_block (5,521 samples, 91.97%)</title><rect x="5.0308%" y="1061" width="91.9707%" height="15" fill="rgb(231,147,38)" fg:x="302" fg:w="5521"/><text x="5.2808%" y="1071.50">argon2::block::Block::fill_block</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (75 samples, 1.25%)</title><rect x="95.7521%" y="1045" width="1.2494%" height="15" fill="rgb(229,8,40)" fg:x="5748" fg:w="75"/><text x="96.0021%" y="1055.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (63 samples, 1.05%)</title><rect x="95.9520%" y="1029" width="1.0495%" height="15" fill="rgb(221,135,30)" fg:x="5760" fg:w="63"/><text x="96.2020%" y="1039.50"></text></g><g><title>core::mem::replace (23 samples, 0.38%)</title><rect x="96.6184%" y="1013" width="0.3831%" height="15" fill="rgb(249,193,18)" fg:x="5800" fg:w="23"/><text x="96.8684%" y="1023.50"></text></g><g><title>core::ptr::read (13 samples, 0.22%)</title><rect x="96.7849%" y="997" width="0.2166%" height="15" fill="rgb(209,133,39)" fg:x="5810" fg:w="13"/><text x="97.0349%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="97.0015%" y="949" width="0.0167%" height="15" fill="rgb(232,100,14)" fg:x="5823" fg:w="1"/><text x="97.2515%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="97.0015%" y="933" width="0.0167%" height="15" fill="rgb(224,185,1)" fg:x="5823" fg:w="1"/><text x="97.2515%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="97.0015%" y="917" width="0.0167%" height="15" fill="rgb(223,139,8)" fg:x="5823" fg:w="1"/><text x="97.2515%" y="927.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.03%)</title><rect x="97.0015%" y="965" width="0.0333%" height="15" fill="rgb(232,213,38)" fg:x="5823" fg:w="2"/><text x="97.2515%" y="975.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.02%)</title><rect x="97.0182%" y="949" width="0.0167%" height="15" fill="rgb(207,94,22)" fg:x="5824" fg:w="1"/><text x="97.2682%" y="959.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (3 samples, 0.05%)</title><rect x="97.0015%" y="1061" width="0.0500%" height="15" fill="rgb(219,183,54)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="1071.50"></text></g><g><title>argon2::instance::blake2b_long (3 samples, 0.05%)</title><rect x="97.0015%" y="1045" width="0.0500%" height="15" fill="rgb(216,185,54)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="1055.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (3 samples, 0.05%)</title><rect x="97.0015%" y="1029" width="0.0500%" height="15" fill="rgb(254,217,39)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="1039.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as core::default::Default&gt;::default (3 samples, 0.05%)</title><rect x="97.0015%" y="1013" width="0.0500%" height="15" fill="rgb(240,178,23)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="1023.50"></text></g><g><title>blake2::blake2b::VarBlake2b::new_keyed (3 samples, 0.05%)</title><rect x="97.0015%" y="997" width="0.0500%" height="15" fill="rgb(218,11,47)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="1007.50"></text></g><g><title>blake2::blake2b::VarBlake2b::with_params (3 samples, 0.05%)</title><rect x="97.0015%" y="981" width="0.0500%" height="15" fill="rgb(218,51,51)" fg:x="5823" fg:w="3"/><text x="97.2515%" y="991.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.02%)</title><rect x="97.0348%" y="965" width="0.0167%" height="15" fill="rgb(238,126,27)" fg:x="5825" fg:w="1"/><text x="97.2848%" y="975.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.02%)</title><rect x="97.0348%" y="949" width="0.0167%" height="15" fill="rgb(249,202,22)" fg:x="5825" fg:w="1"/><text x="97.2848%" y="959.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.02%)</title><rect x="97.0348%" y="933" width="0.0167%" height="15" fill="rgb(254,195,49)" fg:x="5825" fg:w="1"/><text x="97.2848%" y="943.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.13%)</title><rect x="97.1181%" y="1045" width="0.1333%" height="15" fill="rgb(208,123,14)" fg:x="5830" fg:w="8"/><text x="97.3681%" y="1055.50"></text></g><g><title>argon2::instance::Instance::index_alpha (3 samples, 0.05%)</title><rect x="97.2514%" y="1045" width="0.0500%" height="15" fill="rgb(224,200,8)" fg:x="5838" fg:w="3"/><text x="97.5014%" y="1055.50"></text></g><g><title>argon2::instance::next_addresses (2 samples, 0.03%)</title><rect x="97.3013%" y="1045" width="0.0333%" height="15" fill="rgb(217,61,36)" fg:x="5841" fg:w="2"/><text x="97.5513%" y="1055.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="97.3013%" y="1029" width="0.0333%" height="15" fill="rgb(206,35,45)" fg:x="5841" fg:w="2"/><text x="97.5513%" y="1039.50"></text></g><g><title>argon2::memory::Memory::get_block (19 samples, 0.32%)</title><rect x="97.3347%" y="1045" width="0.3165%" height="15" fill="rgb(217,65,33)" fg:x="5843" fg:w="19"/><text x="97.5847%" y="1055.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.28%)</title><rect x="97.3680%" y="1029" width="0.2832%" height="15" fill="rgb(222,158,48)" fg:x="5845" fg:w="17"/><text x="97.6180%" y="1039.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1 samples, 0.02%)</title><rect x="97.7011%" y="1013" width="0.0167%" height="15" fill="rgb(254,2,54)" fg:x="5865" fg:w="1"/><text x="97.9511%" y="1023.50"></text></g><g><title>argon2::instance::Instance::fill_segment (43 samples, 0.72%)</title><rect x="97.0515%" y="1061" width="0.7163%" height="15" fill="rgb(250,143,38)" fg:x="5826" fg:w="43"/><text x="97.3015%" y="1071.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.12%)</title><rect x="97.6512%" y="1045" width="0.1166%" height="15" fill="rgb(248,25,0)" fg:x="5862" fg:w="7"/><text x="97.9012%" y="1055.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.08%)</title><rect x="97.6845%" y="1029" width="0.0833%" height="15" fill="rgb(206,152,27)" fg:x="5864" fg:w="5"/><text x="97.9345%" y="1039.50"></text></g><g><title>core::mem::replace (3 samples, 0.05%)</title><rect x="97.7178%" y="1013" width="0.0500%" height="15" fill="rgb(240,77,30)" fg:x="5866" fg:w="3"/><text x="97.9678%" y="1023.50"></text></g><g><title>core::ptr::read (2 samples, 0.03%)</title><rect x="97.7345%" y="997" width="0.0333%" height="15" fill="rgb(231,5,3)" fg:x="5867" fg:w="2"/><text x="97.9845%" y="1007.50"></text></g><g><title>argon2::instance::Instance::hash (1 samples, 0.02%)</title><rect x="97.7678%" y="1061" width="0.0167%" height="15" fill="rgb(207,226,32)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="1071.50"></text></g><g><title>argon2::instance::Instance::new (1 samples, 0.02%)</title><rect x="97.7678%" y="1045" width="0.0167%" height="15" fill="rgb(222,207,47)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="1055.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (1 samples, 0.02%)</title><rect x="97.7678%" y="1029" width="0.0167%" height="15" fill="rgb(229,115,45)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="1039.50"></text></g><g><title>argon2::instance::blake2b_long (1 samples, 0.02%)</title><rect x="97.7678%" y="1013" width="0.0167%" height="15" fill="rgb(224,191,6)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="1023.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.02%)</title><rect x="97.7678%" y="997" width="0.0167%" height="15" fill="rgb(230,227,24)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="1007.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.02%)</title><rect x="97.7678%" y="981" width="0.0167%" height="15" fill="rgb(228,80,19)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="991.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.02%)</title><rect x="97.7678%" y="965" width="0.0167%" height="15" fill="rgb(247,229,0)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="975.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.02%)</title><rect x="97.7678%" y="949" width="0.0167%" height="15" fill="rgb(237,194,15)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="959.50"></text></g><g><title>blake2::blake2b::VarBlake2b::finalize_with_flag (1 samples, 0.02%)</title><rect x="97.7678%" y="933" width="0.0167%" height="15" fill="rgb(219,203,20)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="943.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.02%)</title><rect x="97.7678%" y="917" width="0.0167%" height="15" fill="rgb(234,128,8)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="97.7678%" y="901" width="0.0167%" height="15" fill="rgb(248,202,8)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="97.7678%" y="885" width="0.0167%" height="15" fill="rgb(206,104,37)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="97.7678%" y="869" width="0.0167%" height="15" fill="rgb(223,8,27)" fg:x="5869" fg:w="1"/><text x="98.0178%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.03%)</title><rect x="97.7844%" y="869" width="0.0333%" height="15" fill="rgb(216,217,28)" fg:x="5870" fg:w="2"/><text x="98.0344%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.02%)</title><rect x="97.8011%" y="853" width="0.0167%" height="15" fill="rgb(249,199,1)" fg:x="5871" fg:w="1"/><text x="98.0511%" y="863.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.02%)</title><rect x="97.8011%" y="837" width="0.0167%" height="15" fill="rgb(240,85,17)" fg:x="5871" fg:w="1"/><text x="98.0511%" y="847.50"></text></g><g><title>argon2::instance::Instance::new (3 samples, 0.05%)</title><rect x="97.7844%" y="1061" width="0.0500%" height="15" fill="rgb(206,108,45)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="1071.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (3 samples, 0.05%)</title><rect x="97.7844%" y="1045" width="0.0500%" height="15" fill="rgb(245,210,41)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="1055.50"></text></g><g><title>argon2::instance::blake2b_long (3 samples, 0.05%)</title><rect x="97.7844%" y="1029" width="0.0500%" height="15" fill="rgb(206,13,37)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="1039.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (3 samples, 0.05%)</title><rect x="97.7844%" y="1013" width="0.0500%" height="15" fill="rgb(250,61,18)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="1023.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (3 samples, 0.05%)</title><rect x="97.7844%" y="997" width="0.0500%" height="15" fill="rgb(235,172,48)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="1007.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (3 samples, 0.05%)</title><rect x="97.7844%" y="981" width="0.0500%" height="15" fill="rgb(249,201,17)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="991.50"></text></g><g><title>&lt;blake2::blake2b::Blake2b as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (3 samples, 0.05%)</title><rect x="97.7844%" y="965" width="0.0500%" height="15" fill="rgb(219,208,6)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="975.50"></text></g><g><title>blake2::blake2b::VarBlake2b::finalize_with_flag (3 samples, 0.05%)</title><rect x="97.7844%" y="949" width="0.0500%" height="15" fill="rgb(248,31,23)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="959.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (3 samples, 0.05%)</title><rect x="97.7844%" y="933" width="0.0500%" height="15" fill="rgb(245,15,42)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.05%)</title><rect x="97.7844%" y="917" width="0.0500%" height="15" fill="rgb(222,217,39)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="97.7844%" y="901" width="0.0500%" height="15" fill="rgb(210,219,27)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.05%)</title><rect x="97.7844%" y="885" width="0.0500%" height="15" fill="rgb(252,166,36)" fg:x="5870" fg:w="3"/><text x="98.0344%" y="895.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.8178%" y="869" width="0.0167%" height="15" fill="rgb(245,132,34)" fg:x="5872" fg:w="1"/><text x="98.0678%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="97.8178%" y="853" width="0.0167%" height="15" fill="rgb(236,54,3)" fg:x="5872" fg:w="1"/><text x="98.0678%" y="863.50"></text></g><g><title>blake2::blake2b::VarBlake2b::compress (3 samples, 0.05%)</title><rect x="97.8344%" y="1061" width="0.0500%" height="15" fill="rgb(241,173,43)" fg:x="5873" fg:w="3"/><text x="98.0844%" y="1071.50"></text></g><g><title>fydia_router::handlers::api::websocket::messages::connected::{{closure}} (1 samples, 0.02%)</title><rect x="97.8844%" y="1061" width="0.0167%" height="15" fill="rgb(215,190,9)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="1071.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.02%)</title><rect x="97.8844%" y="1045" width="0.0167%" height="15" fill="rgb(242,101,16)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="1055.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="1029" width="0.0167%" height="15" fill="rgb(223,190,21)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="1039.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="97.8844%" y="1013" width="0.0167%" height="15" fill="rgb(215,228,25)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="1023.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="997" width="0.0167%" height="15" fill="rgb(225,36,22)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="1007.50"></text></g><g><title>&lt;fydia_router::handlers::api::websocket::WbUser as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="981" width="0.0167%" height="15" fill="rgb(251,106,46)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="991.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.02%)</title><rect x="97.8844%" y="965" width="0.0167%" height="15" fill="rgb(208,90,1)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="975.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="949" width="0.0167%" height="15" fill="rgb(243,10,4)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="959.50"></text></g><g><title>&lt;(T10,T11) as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="933" width="0.0167%" height="15" fill="rgb(212,137,27)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="943.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.02%)</title><rect x="97.8844%" y="917" width="0.0167%" height="15" fill="rgb(231,220,49)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="927.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="901" width="0.0167%" height="15" fill="rgb(237,96,20)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="911.50"></text></g><g><title>&lt;flume::Sender&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="97.8844%" y="885" width="0.0167%" height="15" fill="rgb(239,229,30)" fg:x="5876" fg:w="1"/><text x="98.1344%" y="895.50"></text></g><g><title>fydia_router::handlers::api::websocket::messages::ws_handler::{{closure}} (1 samples, 0.02%)</title><rect x="97.9010%" y="1061" width="0.0167%" height="15" fill="rgb(219,65,33)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="1071.50"></text></g><g><title>fydia_struct::user::User::new (1 samples, 0.02%)</title><rect x="97.9010%" y="1045" width="0.0167%" height="15" fill="rgb(243,134,7)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="1055.50"></text></g><g><title>fydia_utils::hash (1 samples, 0.02%)</title><rect x="97.9010%" y="1029" width="0.0167%" height="15" fill="rgb(216,177,54)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="1039.50"></text></g><g><title>&lt;argon2::Argon2 as password_hash::traits::PasswordHasher&gt;::hash_password (1 samples, 0.02%)</title><rect x="97.9010%" y="1013" width="0.0167%" height="15" fill="rgb(211,160,20)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="1023.50"></text></g><g><title>password_hash::output::Output::init_with (1 samples, 0.02%)</title><rect x="97.9010%" y="997" width="0.0167%" height="15" fill="rgb(239,85,39)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="1007.50"></text></g><g><title>&lt;argon2::Argon2 as password_hash::traits::PasswordHasher&gt;::hash_password::{{closure}} (1 samples, 0.02%)</title><rect x="97.9010%" y="981" width="0.0167%" height="15" fill="rgb(232,125,22)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="991.50"></text></g><g><title>argon2::Argon2::hash_password_into (1 samples, 0.02%)</title><rect x="97.9010%" y="965" width="0.0167%" height="15" fill="rgb(244,57,34)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="975.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="97.9010%" y="949" width="0.0167%" height="15" fill="rgb(214,203,32)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="959.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="97.9010%" y="933" width="0.0167%" height="15" fill="rgb(207,58,43)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="97.9010%" y="917" width="0.0167%" height="15" fill="rgb(215,193,15)" fg:x="5877" fg:w="1"/><text x="98.1510%" y="927.50"></text></g><g><title>fydia_struct::user::User::new (1 samples, 0.02%)</title><rect x="97.9177%" y="1061" width="0.0167%" height="15" fill="rgb(232,15,44)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="1071.50"></text></g><g><title>fydia_utils::hash (1 samples, 0.02%)</title><rect x="97.9177%" y="1045" width="0.0167%" height="15" fill="rgb(212,3,48)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="1055.50"></text></g><g><title>&lt;argon2::Argon2 as password_hash::traits::PasswordHasher&gt;::hash_password (1 samples, 0.02%)</title><rect x="97.9177%" y="1029" width="0.0167%" height="15" fill="rgb(218,128,7)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="1039.50"></text></g><g><title>password_hash::output::Output::init_with (1 samples, 0.02%)</title><rect x="97.9177%" y="1013" width="0.0167%" height="15" fill="rgb(226,216,39)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="1023.50"></text></g><g><title>&lt;argon2::Argon2 as password_hash::traits::PasswordHasher&gt;::hash_password::{{closure}} (1 samples, 0.02%)</title><rect x="97.9177%" y="997" width="0.0167%" height="15" fill="rgb(243,47,51)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="1007.50"></text></g><g><title>argon2::Argon2::hash_password_into (1 samples, 0.02%)</title><rect x="97.9177%" y="981" width="0.0167%" height="15" fill="rgb(241,183,40)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="991.50"></text></g><g><title>argon2::Argon2::hash_password_into_with_memory (1 samples, 0.02%)</title><rect x="97.9177%" y="965" width="0.0167%" height="15" fill="rgb(231,217,32)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="975.50"></text></g><g><title>argon2::instance::Instance::hash (1 samples, 0.02%)</title><rect x="97.9177%" y="949" width="0.0167%" height="15" fill="rgb(229,61,38)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="959.50"></text></g><g><title>argon2::instance::Instance::new (1 samples, 0.02%)</title><rect x="97.9177%" y="933" width="0.0167%" height="15" fill="rgb(225,210,5)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="943.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (1 samples, 0.02%)</title><rect x="97.9177%" y="917" width="0.0167%" height="15" fill="rgb(231,79,45)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="927.50"></text></g><g><title>argon2::block::Block::load (1 samples, 0.02%)</title><rect x="97.9177%" y="901" width="0.0167%" height="15" fill="rgb(224,100,7)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.9177%" y="885" width="0.0167%" height="15" fill="rgb(241,198,18)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.9177%" y="869" width="0.0167%" height="15" fill="rgb(252,97,53)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.02%)</title><rect x="97.9177%" y="853" width="0.0167%" height="15" fill="rgb(220,88,7)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.02%)</title><rect x="97.9177%" y="837" width="0.0167%" height="15" fill="rgb(213,176,14)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="97.9177%" y="821" width="0.0167%" height="15" fill="rgb(246,73,7)" fg:x="5878" fg:w="1"/><text x="98.1677%" y="831.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_buffer_body (1 samples, 0.02%)</title><rect x="97.9344%" y="1029" width="0.0167%" height="15" fill="rgb(245,64,36)" fg:x="5879" fg:w="1"/><text x="98.1844%" y="1039.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (1 samples, 0.02%)</title><rect x="97.9344%" y="1013" width="0.0167%" height="15" fill="rgb(245,80,10)" fg:x="5879" fg:w="1"/><text x="98.1844%" y="1023.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::can_buffer (1 samples, 0.02%)</title><rect x="97.9344%" y="997" width="0.0167%" height="15" fill="rgb(232,107,50)" fg:x="5879" fg:w="1"/><text x="98.1844%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="97.9344%" y="981" width="0.0167%" height="15" fill="rgb(253,3,0)" fg:x="5879" fg:w="1"/><text x="98.1844%" y="991.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (2 samples, 0.03%)</title><rect x="97.9344%" y="1061" width="0.0333%" height="15" fill="rgb(212,99,53)" fg:x="5879" fg:w="2"/><text x="98.1844%" y="1071.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (2 samples, 0.03%)</title><rect x="97.9344%" y="1045" width="0.0333%" height="15" fill="rgb(249,111,54)" fg:x="5879" fg:w="2"/><text x="98.1844%" y="1055.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_write_head (1 samples, 0.02%)</title><rect x="97.9510%" y="1029" width="0.0167%" height="15" fill="rgb(249,55,30)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="1039.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_headers_buf (1 samples, 0.02%)</title><rect x="97.9510%" y="1013" width="0.0167%" height="15" fill="rgb(237,47,42)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="1023.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (1 samples, 0.02%)</title><rect x="97.9510%" y="997" width="0.0167%" height="15" fill="rgb(211,20,18)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="1007.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="97.9510%" y="981" width="0.0167%" height="15" fill="rgb(231,203,46)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.02%)</title><rect x="97.9510%" y="965" width="0.0167%" height="15" fill="rgb(237,142,3)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="975.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.02%)</title><rect x="97.9510%" y="949" width="0.0167%" height="15" fill="rgb(241,107,1)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="97.9510%" y="933" width="0.0167%" height="15" fill="rgb(229,83,13)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="943.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="97.9510%" y="917" width="0.0167%" height="15" fill="rgb(241,91,40)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::ring_slices::RingSlices::ring_slices (1 samples, 0.02%)</title><rect x="97.9510%" y="901" width="0.0167%" height="15" fill="rgb(225,3,45)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="911.50"></text></g><g><title>&lt;&amp;[T] as alloc::collections::vec_deque::ring_slices::RingSlices&gt;::split_at (1 samples, 0.02%)</title><rect x="97.9510%" y="885" width="0.0167%" height="15" fill="rgb(244,223,14)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.02%)</title><rect x="97.9510%" y="869" width="0.0167%" height="15" fill="rgb(224,124,37)" fg:x="5880" fg:w="1"/><text x="98.2010%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (1 samples, 0.02%)</title><rect x="97.9677%" y="1029" width="0.0167%" height="15" fill="rgb(251,171,30)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="1039.50"></text></g><g><title>bytes::bytes_mut::BytesMut::uninit_slice (1 samples, 0.02%)</title><rect x="97.9677%" y="1013" width="0.0167%" height="15" fill="rgb(236,46,54)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="1023.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (1 samples, 0.02%)</title><rect x="97.9677%" y="997" width="0.0167%" height="15" fill="rgb(245,213,5)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="1007.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.02%)</title><rect x="97.9677%" y="981" width="0.0167%" height="15" fill="rgb(230,144,27)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="991.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.02%)</title><rect x="97.9677%" y="965" width="0.0167%" height="15" fill="rgb(220,86,6)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="975.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.02%)</title><rect x="97.9677%" y="949" width="0.0167%" height="15" fill="rgb(240,20,13)" fg:x="5881" fg:w="1"/><text x="98.2177%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (2 samples, 0.03%)</title><rect x="97.9677%" y="1061" width="0.0333%" height="15" fill="rgb(217,89,34)" fg:x="5881" fg:w="2"/><text x="98.2177%" y="1071.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 0.03%)</title><rect x="97.9677%" y="1045" width="0.0333%" height="15" fill="rgb(229,13,5)" fg:x="5881" fg:w="2"/><text x="98.2177%" y="1055.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.02%)</title><rect x="97.9843%" y="1029" width="0.0167%" height="15" fill="rgb(244,67,35)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="1039.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.02%)</title><rect x="97.9843%" y="1013" width="0.0167%" height="15" fill="rgb(221,40,2)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="97.9843%" y="997" width="0.0167%" height="15" fill="rgb(237,157,21)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="97.9843%" y="981" width="0.0167%" height="15" fill="rgb(222,94,11)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="97.9843%" y="965" width="0.0167%" height="15" fill="rgb(249,113,6)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="97.9843%" y="949" width="0.0167%" height="15" fill="rgb(238,137,36)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="959.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="97.9843%" y="933" width="0.0167%" height="15" fill="rgb(210,102,26)" fg:x="5882" fg:w="1"/><text x="98.2343%" y="943.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::new (1 samples, 0.02%)</title><rect x="98.0010%" y="1045" width="0.0167%" height="15" fill="rgb(218,30,30)" fg:x="5883" fg:w="1"/><text x="98.2510%" y="1055.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::new (1 samples, 0.02%)</title><rect x="98.0010%" y="1029" width="0.0167%" height="15" fill="rgb(214,67,26)" fg:x="5883" fg:w="1"/><text x="98.2510%" y="1039.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::new (1 samples, 0.02%)</title><rect x="98.0010%" y="1013" width="0.0167%" height="15" fill="rgb(251,9,53)" fg:x="5883" fg:w="1"/><text x="98.2510%" y="1023.50"></text></g><g><title>hyper::common::buf::BufList&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="98.0010%" y="997" width="0.0167%" height="15" fill="rgb(228,204,25)" fg:x="5883" fg:w="1"/><text x="98.2510%" y="1007.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="98.0010%" y="981" width="0.0167%" height="15" fill="rgb(207,153,8)" fg:x="5883" fg:w="1"/><text x="98.2510%" y="991.50"></text></g><g><title>hyper::server::conn::Http&lt;E&gt;::serve_connection (2 samples, 0.03%)</title><rect x="98.0010%" y="1061" width="0.0333%" height="15" fill="rgb(242,9,16)" fg:x="5883" fg:w="2"/><text x="98.2510%" y="1071.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::set_flush_pipeline (1 samples, 0.02%)</title><rect x="98.0177%" y="1045" width="0.0167%" height="15" fill="rgb(217,211,10)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="1055.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::set_flush_pipeline (1 samples, 0.02%)</title><rect x="98.0177%" y="1029" width="0.0167%" height="15" fill="rgb(219,228,52)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="1039.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (1 samples, 0.02%)</title><rect x="98.0177%" y="1013" width="0.0167%" height="15" fill="rgb(231,92,29)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="1023.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="98.0177%" y="997" width="0.0167%" height="15" fill="rgb(232,8,23)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="1007.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="98.0177%" y="981" width="0.0167%" height="15" fill="rgb(216,211,34)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.02%)</title><rect x="98.0177%" y="965" width="0.0167%" height="15" fill="rgb(236,151,0)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="975.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.02%)</title><rect x="98.0177%" y="949" width="0.0167%" height="15" fill="rgb(209,168,3)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="98.0177%" y="933" width="0.0167%" height="15" fill="rgb(208,129,28)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="943.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="98.0177%" y="917" width="0.0167%" height="15" fill="rgb(229,78,22)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::ring_slices::RingSlices::ring_slices (1 samples, 0.02%)</title><rect x="98.0177%" y="901" width="0.0167%" height="15" fill="rgb(228,187,13)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="911.50"></text></g><g><title>&lt;&amp;[T] as alloc::collections::vec_deque::ring_slices::RingSlices&gt;::split_at (1 samples, 0.02%)</title><rect x="98.0177%" y="885" width="0.0167%" height="15" fill="rgb(240,119,24)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.02%)</title><rect x="98.0177%" y="869" width="0.0167%" height="15" fill="rgb(209,194,42)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.02%)</title><rect x="98.0177%" y="853" width="0.0167%" height="15" fill="rgb(247,200,46)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="98.0177%" y="837" width="0.0167%" height="15" fill="rgb(218,76,16)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="98.0177%" y="821" width="0.0167%" height="15" fill="rgb(225,21,48)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (1 samples, 0.02%)</title><rect x="98.0177%" y="805" width="0.0167%" height="15" fill="rgb(239,223,50)" fg:x="5884" fg:w="1"/><text x="98.2677%" y="815.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (3 samples, 0.05%)</title><rect x="98.0676%" y="965" width="0.0500%" height="15" fill="rgb(244,45,21)" fg:x="5887" fg:w="3"/><text x="98.3176%" y="975.50"></text></g><g><title>&lt;argon2::block::Block as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="98.0676%" y="949" width="0.0500%" height="15" fill="rgb(232,33,43)" fg:x="5887" fg:w="3"/><text x="98.3176%" y="959.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="98.0676%" y="933" width="0.0500%" height="15" fill="rgb(209,8,3)" fg:x="5887" fg:w="3"/><text x="98.3176%" y="943.50"></text></g><g><title>alloc::vec::from_elem (13 samples, 0.22%)</title><rect x="98.0343%" y="1013" width="0.2166%" height="15" fill="rgb(214,25,53)" fg:x="5885" fg:w="13"/><text x="98.2843%" y="1023.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.22%)</title><rect x="98.0343%" y="997" width="0.2166%" height="15" fill="rgb(254,186,54)" fg:x="5885" fg:w="13"/><text x="98.2843%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 0.22%)</title><rect x="98.0343%" y="981" width="0.2166%" height="15" fill="rgb(208,174,49)" fg:x="5885" fg:w="13"/><text x="98.2843%" y="991.50"></text></g><g><title>core::ptr::write (8 samples, 0.13%)</title><rect x="98.1176%" y="965" width="0.1333%" height="15" fill="rgb(233,191,51)" fg:x="5890" fg:w="8"/><text x="98.3676%" y="975.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.13%)</title><rect x="98.1176%" y="949" width="0.1333%" height="15" fill="rgb(222,134,10)" fg:x="5890" fg:w="8"/><text x="98.3676%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.1842%" y="933" width="0.0666%" height="15" fill="rgb(230,226,20)" fg:x="5894" fg:w="4"/><text x="98.4342%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.2009%" y="917" width="0.0500%" height="15" fill="rgb(251,111,25)" fg:x="5895" fg:w="3"/><text x="98.4509%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.2176%" y="901" width="0.0333%" height="15" fill="rgb(224,40,46)" fg:x="5896" fg:w="2"/><text x="98.4676%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.2176%" y="885" width="0.0333%" height="15" fill="rgb(236,108,47)" fg:x="5896" fg:w="2"/><text x="98.4676%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2342%" y="869" width="0.0167%" height="15" fill="rgb(234,93,0)" fg:x="5897" fg:w="1"/><text x="98.4842%" y="879.50"></text></g><g><title>password_hash::output::Output::init_with (14 samples, 0.23%)</title><rect x="98.0343%" y="1061" width="0.2332%" height="15" fill="rgb(224,213,32)" fg:x="5885" fg:w="14"/><text x="98.2843%" y="1071.50"></text></g><g><title>&lt;argon2::Argon2 as password_hash::traits::PasswordHasher&gt;::hash_password::{{closure}} (14 samples, 0.23%)</title><rect x="98.0343%" y="1045" width="0.2332%" height="15" fill="rgb(251,11,48)" fg:x="5885" fg:w="14"/><text x="98.2843%" y="1055.50"></text></g><g><title>argon2::Argon2::hash_password_into (14 samples, 0.23%)</title><rect x="98.0343%" y="1029" width="0.2332%" height="15" fill="rgb(236,173,5)" fg:x="5885" fg:w="14"/><text x="98.2843%" y="1039.50"></text></g><g><title>argon2::Argon2::hash_password_into_with_memory (1 samples, 0.02%)</title><rect x="98.2509%" y="1013" width="0.0167%" height="15" fill="rgb(230,95,12)" fg:x="5898" fg:w="1"/><text x="98.5009%" y="1023.50"></text></g><g><title>argon2::instance::Instance::hash (1 samples, 0.02%)</title><rect x="98.2509%" y="997" width="0.0167%" height="15" fill="rgb(232,209,1)" fg:x="5898" fg:w="1"/><text x="98.5009%" y="1007.50"></text></g><g><title>argon2::instance::Instance::new (1 samples, 0.02%)</title><rect x="98.2509%" y="981" width="0.0167%" height="15" fill="rgb(232,6,1)" fg:x="5898" fg:w="1"/><text x="98.5009%" y="991.50"></text></g><g><title>argon2::instance::Instance::fill_first_blocks (1 samples, 0.02%)</title><rect x="98.2509%" y="965" width="0.0167%" height="15" fill="rgb(210,224,50)" fg:x="5898" fg:w="1"/><text x="98.5009%" y="975.50"></text></g><g><title>argon2::instance::blake2b_long (1 samples, 0.02%)</title><rect x="98.2509%" y="949" width="0.0167%" height="15" fill="rgb(228,127,35)" fg:x="5898" fg:w="1"/><text x="98.5009%" y="959.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.02%)</title><rect x="98.2675%" y="1061" width="0.0167%" height="15" fill="rgb(245,102,45)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.02%)</title><rect x="98.2675%" y="1045" width="0.0167%" height="15" fill="rgb(214,1,49)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="1055.50"></text></g><g><title>core::array::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T: N]&gt;::into_iter (1 samples, 0.02%)</title><rect x="98.2675%" y="1029" width="0.0167%" height="15" fill="rgb(226,163,40)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="98.2675%" y="1013" width="0.0167%" height="15" fill="rgb(239,212,28)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="1023.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="98.2675%" y="997" width="0.0167%" height="15" fill="rgb(220,20,13)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="1007.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.02%)</title><rect x="98.2675%" y="981" width="0.0167%" height="15" fill="rgb(210,164,35)" fg:x="5899" fg:w="1"/><text x="98.5175%" y="991.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (1 samples, 0.02%)</title><rect x="98.2842%" y="373" width="0.0167%" height="15" fill="rgb(248,109,41)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="383.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (1 samples, 0.02%)</title><rect x="98.2842%" y="357" width="0.0167%" height="15" fill="rgb(238,23,50)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="367.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.02%)</title><rect x="98.2842%" y="341" width="0.0167%" height="15" fill="rgb(211,48,49)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="351.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.02%)</title><rect x="98.2842%" y="325" width="0.0167%" height="15" fill="rgb(223,36,21)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="335.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.2842%" y="309" width="0.0167%" height="15" fill="rgb(207,123,46)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="98.2842%" y="293" width="0.0167%" height="15" fill="rgb(240,218,32)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.02%)</title><rect x="98.2842%" y="277" width="0.0167%" height="15" fill="rgb(252,5,43)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.02%)</title><rect x="98.2842%" y="261" width="0.0167%" height="15" fill="rgb(252,84,19)" fg:x="5900" fg:w="1"/><text x="98.5342%" y="271.50"></text></g><g><title>start_thread (2 samples, 0.03%)</title><rect x="98.2842%" y="1061" width="0.0333%" height="15" fill="rgb(243,152,39)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.03%)</title><rect x="98.2842%" y="1045" width="0.0333%" height="15" fill="rgb(234,160,15)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.03%)</title><rect x="98.2842%" y="1029" width="0.0333%" height="15" fill="rgb(237,34,20)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="1013" width="0.0333%" height="15" fill="rgb(229,97,13)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="98.2842%" y="997" width="0.0333%" height="15" fill="rgb(234,71,50)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="1007.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="98.2842%" y="981" width="0.0333%" height="15" fill="rgb(253,155,4)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="991.50"></text></g><g><title>__rust_try (2 samples, 0.03%)</title><rect x="98.2842%" y="965" width="0.0333%" height="15" fill="rgb(222,185,37)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="975.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="98.2842%" y="949" width="0.0333%" height="15" fill="rgb(251,177,13)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="98.2842%" y="933" width="0.0333%" height="15" fill="rgb(250,179,40)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="917" width="0.0333%" height="15" fill="rgb(242,44,2)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.03%)</title><rect x="98.2842%" y="901" width="0.0333%" height="15" fill="rgb(216,177,13)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="885" width="0.0333%" height="15" fill="rgb(216,106,43)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.03%)</title><rect x="98.2842%" y="869" width="0.0333%" height="15" fill="rgb(216,183,2)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="879.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 0.03%)</title><rect x="98.2842%" y="853" width="0.0333%" height="15" fill="rgb(249,75,3)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="863.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.03%)</title><rect x="98.2842%" y="837" width="0.0333%" height="15" fill="rgb(219,67,39)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="847.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.03%)</title><rect x="98.2842%" y="821" width="0.0333%" height="15" fill="rgb(253,228,2)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.03%)</title><rect x="98.2842%" y="805" width="0.0333%" height="15" fill="rgb(235,138,27)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 0.03%)</title><rect x="98.2842%" y="789" width="0.0333%" height="15" fill="rgb(236,97,51)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.03%)</title><rect x="98.2842%" y="773" width="0.0333%" height="15" fill="rgb(240,80,30)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="783.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="98.2842%" y="757" width="0.0333%" height="15" fill="rgb(230,178,19)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="767.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="98.2842%" y="741" width="0.0333%" height="15" fill="rgb(210,190,27)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="751.50"></text></g><g><title>__rust_try (2 samples, 0.03%)</title><rect x="98.2842%" y="725" width="0.0333%" height="15" fill="rgb(222,107,31)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="735.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="98.2842%" y="709" width="0.0333%" height="15" fill="rgb(216,127,34)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="98.2842%" y="693" width="0.0333%" height="15" fill="rgb(234,116,52)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="677" width="0.0333%" height="15" fill="rgb(222,124,15)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="687.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 0.03%)</title><rect x="98.2842%" y="661" width="0.0333%" height="15" fill="rgb(231,179,28)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="671.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.03%)</title><rect x="98.2842%" y="645" width="0.0333%" height="15" fill="rgb(226,93,45)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="655.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="629" width="0.0333%" height="15" fill="rgb(215,8,51)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="639.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="98.2842%" y="613" width="0.0333%" height="15" fill="rgb(223,106,5)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="597" width="0.0333%" height="15" fill="rgb(250,191,5)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 0.03%)</title><rect x="98.2842%" y="581" width="0.0333%" height="15" fill="rgb(242,132,44)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="591.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="98.2842%" y="565" width="0.0333%" height="15" fill="rgb(251,152,29)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 0.03%)</title><rect x="98.2842%" y="549" width="0.0333%" height="15" fill="rgb(218,179,5)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 0.03%)</title><rect x="98.2842%" y="533" width="0.0333%" height="15" fill="rgb(227,67,19)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 0.03%)</title><rect x="98.2842%" y="517" width="0.0333%" height="15" fill="rgb(233,119,31)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 0.03%)</title><rect x="98.2842%" y="501" width="0.0333%" height="15" fill="rgb(241,120,22)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="511.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (2 samples, 0.03%)</title><rect x="98.2842%" y="485" width="0.0333%" height="15" fill="rgb(224,102,30)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="495.50"></text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.03%)</title><rect x="98.2842%" y="469" width="0.0333%" height="15" fill="rgb(210,164,37)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="479.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (2 samples, 0.03%)</title><rect x="98.2842%" y="453" width="0.0333%" height="15" fill="rgb(226,191,16)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="463.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.03%)</title><rect x="98.2842%" y="437" width="0.0333%" height="15" fill="rgb(214,40,45)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="447.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 0.03%)</title><rect x="98.2842%" y="421" width="0.0333%" height="15" fill="rgb(244,29,26)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="431.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 0.03%)</title><rect x="98.2842%" y="405" width="0.0333%" height="15" fill="rgb(216,16,5)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="415.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 0.03%)</title><rect x="98.2842%" y="389" width="0.0333%" height="15" fill="rgb(249,76,35)" fg:x="5900" fg:w="2"/><text x="98.5342%" y="399.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (1 samples, 0.02%)</title><rect x="98.3008%" y="373" width="0.0167%" height="15" fill="rgb(207,11,44)" fg:x="5901" fg:w="1"/><text x="98.5508%" y="383.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="98.3008%" y="357" width="0.0167%" height="15" fill="rgb(228,190,49)" fg:x="5901" fg:w="1"/><text x="98.5508%" y="367.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (1 samples, 0.02%)</title><rect x="98.3008%" y="341" width="0.0167%" height="15" fill="rgb(214,173,12)" fg:x="5901" fg:w="1"/><text x="98.5508%" y="351.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="98.3175%" y="1061" width="0.0167%" height="15" fill="rgb(218,26,35)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="1071.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="98.3175%" y="1045" width="0.0167%" height="15" fill="rgb(220,200,19)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="1055.50"></text></g><g><title>__rust_try (1 samples, 0.02%)</title><rect x="98.3175%" y="1029" width="0.0167%" height="15" fill="rgb(239,95,49)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="98.3175%" y="1013" width="0.0167%" height="15" fill="rgb(235,85,53)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="98.3175%" y="997" width="0.0167%" height="15" fill="rgb(233,133,31)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="981" width="0.0167%" height="15" fill="rgb(218,25,20)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="98.3175%" y="965" width="0.0167%" height="15" fill="rgb(252,210,38)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="975.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="949" width="0.0167%" height="15" fill="rgb(242,134,21)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.02%)</title><rect x="98.3175%" y="933" width="0.0167%" height="15" fill="rgb(213,28,48)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="943.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.02%)</title><rect x="98.3175%" y="917" width="0.0167%" height="15" fill="rgb(250,196,2)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="927.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="901" width="0.0167%" height="15" fill="rgb(227,5,17)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="911.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="885" width="0.0167%" height="15" fill="rgb(221,226,24)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="869" width="0.0167%" height="15" fill="rgb(211,5,48)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.02%)</title><rect x="98.3175%" y="853" width="0.0167%" height="15" fill="rgb(219,150,6)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.02%)</title><rect x="98.3175%" y="837" width="0.0167%" height="15" fill="rgb(251,46,16)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="847.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="98.3175%" y="821" width="0.0167%" height="15" fill="rgb(220,204,40)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="831.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="98.3175%" y="805" width="0.0167%" height="15" fill="rgb(211,85,2)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="815.50"></text></g><g><title>__rust_try (1 samples, 0.02%)</title><rect x="98.3175%" y="789" width="0.0167%" height="15" fill="rgb(229,17,7)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="799.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="98.3175%" y="773" width="0.0167%" height="15" fill="rgb(239,72,28)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="98.3175%" y="757" width="0.0167%" height="15" fill="rgb(230,47,54)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="741" width="0.0167%" height="15" fill="rgb(214,50,8)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="751.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="725" width="0.0167%" height="15" fill="rgb(216,198,43)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="98.3175%" y="709" width="0.0167%" height="15" fill="rgb(234,20,35)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="719.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="693" width="0.0167%" height="15" fill="rgb(254,45,19)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="703.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="677" width="0.0167%" height="15" fill="rgb(219,14,44)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="661" width="0.0167%" height="15" fill="rgb(217,220,26)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.02%)</title><rect x="98.3175%" y="645" width="0.0167%" height="15" fill="rgb(213,158,28)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="655.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="98.3175%" y="629" width="0.0167%" height="15" fill="rgb(252,51,52)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.02%)</title><rect x="98.3175%" y="613" width="0.0167%" height="15" fill="rgb(246,89,16)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.02%)</title><rect x="98.3175%" y="597" width="0.0167%" height="15" fill="rgb(216,158,49)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1 samples, 0.02%)</title><rect x="98.3175%" y="581" width="0.0167%" height="15" fill="rgb(236,107,19)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="98.3175%" y="565" width="0.0167%" height="15" fill="rgb(228,185,30)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="575.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3175%" y="549" width="0.0167%" height="15" fill="rgb(246,134,8)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="559.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="98.3175%" y="533" width="0.0167%" height="15" fill="rgb(214,143,50)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="543.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (1 samples, 0.02%)</title><rect x="98.3175%" y="517" width="0.0167%" height="15" fill="rgb(228,75,8)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="527.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3175%" y="501" width="0.0167%" height="15" fill="rgb(207,175,4)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="511.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3175%" y="485" width="0.0167%" height="15" fill="rgb(205,108,24)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="495.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3175%" y="469" width="0.0167%" height="15" fill="rgb(244,120,49)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="479.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.02%)</title><rect x="98.3175%" y="453" width="0.0167%" height="15" fill="rgb(223,47,38)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="463.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.02%)</title><rect x="98.3175%" y="437" width="0.0167%" height="15" fill="rgb(229,179,11)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="447.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="98.3175%" y="421" width="0.0167%" height="15" fill="rgb(231,122,1)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="431.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.02%)</title><rect x="98.3175%" y="405" width="0.0167%" height="15" fill="rgb(245,119,9)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="415.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="98.3175%" y="389" width="0.0167%" height="15" fill="rgb(241,163,25)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="399.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (1 samples, 0.02%)</title><rect x="98.3175%" y="373" width="0.0167%" height="15" fill="rgb(217,214,3)" fg:x="5902" fg:w="1"/><text x="98.5675%" y="383.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="997" width="0.0167%" height="15" fill="rgb(240,86,28)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="1007.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="98.3342%" y="981" width="0.0167%" height="15" fill="rgb(215,47,9)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="991.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="965" width="0.0167%" height="15" fill="rgb(252,25,45)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="975.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.02%)</title><rect x="98.3342%" y="949" width="0.0167%" height="15" fill="rgb(251,164,9)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="959.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.02%)</title><rect x="98.3342%" y="933" width="0.0167%" height="15" fill="rgb(233,194,0)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="943.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="917" width="0.0167%" height="15" fill="rgb(249,111,24)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="927.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="901" width="0.0167%" height="15" fill="rgb(250,223,3)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="885" width="0.0167%" height="15" fill="rgb(236,178,37)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.02%)</title><rect x="98.3342%" y="869" width="0.0167%" height="15" fill="rgb(241,158,50)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.02%)</title><rect x="98.3342%" y="853" width="0.0167%" height="15" fill="rgb(213,121,41)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="863.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="98.3342%" y="837" width="0.0167%" height="15" fill="rgb(240,92,3)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="847.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="98.3342%" y="821" width="0.0167%" height="15" fill="rgb(205,123,3)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="831.50"></text></g><g><title>__rust_try (1 samples, 0.02%)</title><rect x="98.3342%" y="805" width="0.0167%" height="15" fill="rgb(205,97,47)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="815.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="98.3342%" y="789" width="0.0167%" height="15" fill="rgb(247,152,14)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="799.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="98.3342%" y="773" width="0.0167%" height="15" fill="rgb(248,195,53)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="757" width="0.0167%" height="15" fill="rgb(226,201,16)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="767.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="741" width="0.0167%" height="15" fill="rgb(205,98,0)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="751.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="98.3342%" y="725" width="0.0167%" height="15" fill="rgb(214,191,48)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="735.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="709" width="0.0167%" height="15" fill="rgb(237,112,39)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="719.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="693" width="0.0167%" height="15" fill="rgb(247,203,27)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="677" width="0.0167%" height="15" fill="rgb(235,124,28)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.02%)</title><rect x="98.3342%" y="661" width="0.0167%" height="15" fill="rgb(208,207,46)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="671.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="98.3342%" y="645" width="0.0167%" height="15" fill="rgb(234,176,4)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.02%)</title><rect x="98.3342%" y="629" width="0.0167%" height="15" fill="rgb(230,133,28)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.02%)</title><rect x="98.3342%" y="613" width="0.0167%" height="15" fill="rgb(211,137,40)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1 samples, 0.02%)</title><rect x="98.3342%" y="597" width="0.0167%" height="15" fill="rgb(254,35,13)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="98.3342%" y="581" width="0.0167%" height="15" fill="rgb(225,49,51)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="591.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3342%" y="565" width="0.0167%" height="15" fill="rgb(251,10,15)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="575.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="98.3342%" y="549" width="0.0167%" height="15" fill="rgb(228,207,15)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="559.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (1 samples, 0.02%)</title><rect x="98.3342%" y="533" width="0.0167%" height="15" fill="rgb(241,99,19)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="543.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3342%" y="517" width="0.0167%" height="15" fill="rgb(207,104,49)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="527.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3342%" y="501" width="0.0167%" height="15" fill="rgb(234,99,18)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="511.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="98.3342%" y="485" width="0.0167%" height="15" fill="rgb(213,191,49)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="495.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.02%)</title><rect x="98.3342%" y="469" width="0.0167%" height="15" fill="rgb(210,226,19)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="479.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.02%)</title><rect x="98.3342%" y="453" width="0.0167%" height="15" fill="rgb(229,97,18)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="463.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="98.3342%" y="437" width="0.0167%" height="15" fill="rgb(211,167,15)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="447.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.02%)</title><rect x="98.3342%" y="421" width="0.0167%" height="15" fill="rgb(210,169,34)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="431.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="98.3342%" y="405" width="0.0167%" height="15" fill="rgb(241,121,31)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="98.3342%" y="389" width="0.0167%" height="15" fill="rgb(232,40,11)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="98.3342%" y="373" width="0.0167%" height="15" fill="rgb(205,86,26)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.02%)</title><rect x="98.3342%" y="357" width="0.0167%" height="15" fill="rgb(231,126,28)" fg:x="5903" fg:w="1"/><text x="98.5842%" y="367.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="98.3342%" y="1061" width="0.0333%" height="15" fill="rgb(219,221,18)" fg:x="5903" fg:w="2"/><text x="98.5842%" y="1071.50"></text></g><g><title>__rust_try (2 samples, 0.03%)</title><rect x="98.3342%" y="1045" width="0.0333%" height="15" fill="rgb(211,40,0)" fg:x="5903" fg:w="2"/><text x="98.5842%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="98.3342%" y="1029" width="0.0333%" height="15" fill="rgb(239,85,43)" fg:x="5903" fg:w="2"/><text x="98.5842%" y="1039.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="98.3342%" y="1013" width="0.0333%" height="15" fill="rgb(231,55,21)" fg:x="5903" fg:w="2"/><text x="98.5842%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.02%)</title><rect x="98.3508%" y="997" width="0.0167%" height="15" fill="rgb(225,184,43)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="1007.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="981" width="0.0167%" height="15" fill="rgb(251,158,41)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="98.3508%" y="965" width="0.0167%" height="15" fill="rgb(234,159,37)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="975.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="98.3508%" y="949" width="0.0167%" height="15" fill="rgb(216,204,22)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="933" width="0.0167%" height="15" fill="rgb(214,17,3)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="943.50"></text></g><g><title>sqlx_core::pool::connection::PoolConnection&lt;DB&gt;::return_to_pool::{{closure}} (1 samples, 0.02%)</title><rect x="98.3508%" y="917" width="0.0167%" height="15" fill="rgb(212,111,17)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="927.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="901" width="0.0167%" height="15" fill="rgb(221,157,24)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="885" width="0.0167%" height="15" fill="rgb(252,16,13)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="895.50"></text></g><g><title>&lt;sqlx_core::mysql::connection::MySqlConnection as sqlx_core::connection::Connection&gt;::ping::{{closure}} (1 samples, 0.02%)</title><rect x="98.3508%" y="869" width="0.0167%" height="15" fill="rgb(221,62,2)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="853" width="0.0167%" height="15" fill="rgb(247,87,22)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="863.50"></text></g><g><title>sqlx_core::mysql::connection::stream::MySqlStream::send_packet::{{closure}} (1 samples, 0.02%)</title><rect x="98.3508%" y="837" width="0.0167%" height="15" fill="rgb(215,73,9)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="847.50"></text></g><g><title>&lt;sqlx_core::io::write_and_flush::WriteAndFlush&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.3508%" y="821" width="0.0167%" height="15" fill="rgb(207,175,33)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="831.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.02%)</title><rect x="98.3508%" y="805" width="0.0167%" height="15" fill="rgb(243,129,54)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="815.50"></text></g><g><title>std::io::cursor::Cursor&lt;T&gt;::remaining_slice (1 samples, 0.02%)</title><rect x="98.3508%" y="789" width="0.0167%" height="15" fill="rgb(227,119,45)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="799.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="98.3508%" y="773" width="0.0167%" height="15" fill="rgb(205,109,36)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="98.3508%" y="757" width="0.0167%" height="15" fill="rgb(205,6,39)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="98.3508%" y="741" width="0.0167%" height="15" fill="rgb(221,32,16)" fg:x="5904" fg:w="1"/><text x="98.6008%" y="751.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 0.07%)</title><rect x="98.3675%" y="1061" width="0.0666%" height="15" fill="rgb(228,144,50)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="1071.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.07%)</title><rect x="98.3675%" y="1045" width="0.0666%" height="15" fill="rgb(229,201,53)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="1055.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="1029" width="0.0666%" height="15" fill="rgb(249,153,27)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.07%)</title><rect x="98.3675%" y="1013" width="0.0666%" height="15" fill="rgb(227,106,25)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="1023.50"></text></g><g><title>std::panicking::try (4 samples, 0.07%)</title><rect x="98.3675%" y="997" width="0.0666%" height="15" fill="rgb(230,65,29)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="1007.50"></text></g><g><title>__rust_try (4 samples, 0.07%)</title><rect x="98.3675%" y="981" width="0.0666%" height="15" fill="rgb(221,57,46)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="991.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.07%)</title><rect x="98.3675%" y="965" width="0.0666%" height="15" fill="rgb(229,161,17)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="975.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="98.3675%" y="949" width="0.0666%" height="15" fill="rgb(222,213,11)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="933" width="0.0666%" height="15" fill="rgb(235,35,13)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.07%)</title><rect x="98.3675%" y="917" width="0.0666%" height="15" fill="rgb(233,158,34)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="927.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="901" width="0.0666%" height="15" fill="rgb(215,151,48)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 0.07%)</title><rect x="98.3675%" y="885" width="0.0666%" height="15" fill="rgb(229,84,14)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="895.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (4 samples, 0.07%)</title><rect x="98.3675%" y="869" width="0.0666%" height="15" fill="rgb(229,68,14)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="879.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="853" width="0.0666%" height="15" fill="rgb(243,106,26)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="863.50"></text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="837" width="0.0666%" height="15" fill="rgb(206,45,38)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="821" width="0.0666%" height="15" fill="rgb(226,6,15)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 0.07%)</title><rect x="98.3675%" y="805" width="0.0666%" height="15" fill="rgb(232,22,54)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.07%)</title><rect x="98.3675%" y="789" width="0.0666%" height="15" fill="rgb(229,222,32)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="799.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.07%)</title><rect x="98.3675%" y="773" width="0.0666%" height="15" fill="rgb(228,62,29)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="783.50"></text></g><g><title>std::panicking::try (4 samples, 0.07%)</title><rect x="98.3675%" y="757" width="0.0666%" height="15" fill="rgb(251,103,34)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="767.50"></text></g><g><title>__rust_try (4 samples, 0.07%)</title><rect x="98.3675%" y="741" width="0.0666%" height="15" fill="rgb(233,12,30)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="751.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.07%)</title><rect x="98.3675%" y="725" width="0.0666%" height="15" fill="rgb(238,52,0)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="98.3675%" y="709" width="0.0666%" height="15" fill="rgb(223,98,5)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="693" width="0.0666%" height="15" fill="rgb(228,75,37)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="703.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="677" width="0.0666%" height="15" fill="rgb(205,115,49)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="687.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.07%)</title><rect x="98.3675%" y="661" width="0.0666%" height="15" fill="rgb(250,154,43)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="671.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="645" width="0.0666%" height="15" fill="rgb(226,43,29)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="655.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="629" width="0.0666%" height="15" fill="rgb(249,228,39)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="613" width="0.0666%" height="15" fill="rgb(216,79,43)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (4 samples, 0.07%)</title><rect x="98.3675%" y="597" width="0.0666%" height="15" fill="rgb(228,95,12)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="607.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (4 samples, 0.07%)</title><rect x="98.3675%" y="581" width="0.0666%" height="15" fill="rgb(249,221,15)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (4 samples, 0.07%)</title><rect x="98.3675%" y="565" width="0.0666%" height="15" fill="rgb(233,34,13)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (4 samples, 0.07%)</title><rect x="98.3675%" y="549" width="0.0666%" height="15" fill="rgb(214,103,39)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (4 samples, 0.07%)</title><rect x="98.3675%" y="533" width="0.0666%" height="15" fill="rgb(251,126,39)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (4 samples, 0.07%)</title><rect x="98.3675%" y="517" width="0.0666%" height="15" fill="rgb(214,216,36)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="527.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (4 samples, 0.07%)</title><rect x="98.3675%" y="501" width="0.0666%" height="15" fill="rgb(220,221,8)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="511.50"></text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.07%)</title><rect x="98.3675%" y="485" width="0.0666%" height="15" fill="rgb(240,216,3)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="495.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (4 samples, 0.07%)</title><rect x="98.3675%" y="469" width="0.0666%" height="15" fill="rgb(232,218,17)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="479.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (4 samples, 0.07%)</title><rect x="98.3675%" y="453" width="0.0666%" height="15" fill="rgb(229,163,45)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="463.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (4 samples, 0.07%)</title><rect x="98.3675%" y="437" width="0.0666%" height="15" fill="rgb(231,110,42)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="447.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (4 samples, 0.07%)</title><rect x="98.3675%" y="421" width="0.0666%" height="15" fill="rgb(208,170,48)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="431.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (4 samples, 0.07%)</title><rect x="98.3675%" y="405" width="0.0666%" height="15" fill="rgb(239,116,25)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="415.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (4 samples, 0.07%)</title><rect x="98.3675%" y="389" width="0.0666%" height="15" fill="rgb(219,200,50)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="399.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (4 samples, 0.07%)</title><rect x="98.3675%" y="373" width="0.0666%" height="15" fill="rgb(245,200,0)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="383.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (4 samples, 0.07%)</title><rect x="98.3675%" y="357" width="0.0666%" height="15" fill="rgb(245,119,33)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="367.50"></text></g><g><title>tokio::io::driver::Driver::turn (4 samples, 0.07%)</title><rect x="98.3675%" y="341" width="0.0666%" height="15" fill="rgb(231,125,12)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="351.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.07%)</title><rect x="98.3675%" y="325" width="0.0666%" height="15" fill="rgb(216,96,41)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="335.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (4 samples, 0.07%)</title><rect x="98.3675%" y="309" width="0.0666%" height="15" fill="rgb(248,43,45)" fg:x="5905" fg:w="4"/><text x="98.6175%" y="319.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.02%)</title><rect x="98.4341%" y="421" width="0.0167%" height="15" fill="rgb(217,222,7)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="431.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="98.4341%" y="405" width="0.0167%" height="15" fill="rgb(233,28,6)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="415.50"></text></g><g><title>tokio::time::driver::Inner::lock (1 samples, 0.02%)</title><rect x="98.4341%" y="389" width="0.0167%" height="15" fill="rgb(231,218,15)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="399.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="98.4341%" y="373" width="0.0167%" height="15" fill="rgb(226,171,48)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="98.4341%" y="357" width="0.0167%" height="15" fill="rgb(235,201,9)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="367.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="98.4341%" y="341" width="0.0167%" height="15" fill="rgb(217,80,15)" fg:x="5909" fg:w="1"/><text x="98.6841%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="98.4508%" y="325" width="0.0167%" height="15" fill="rgb(219,152,8)" fg:x="5910" fg:w="1"/><text x="98.7008%" y="335.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (1 samples, 0.02%)</title><rect x="98.4508%" y="309" width="0.0167%" height="15" fill="rgb(243,107,38)" fg:x="5910" fg:w="1"/><text x="98.7008%" y="319.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="98.4508%" y="293" width="0.0167%" height="15" fill="rgb(231,17,5)" fg:x="5910" fg:w="1"/><text x="98.7008%" y="303.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="98.4508%" y="277" width="0.0167%" height="15" fill="rgb(209,25,54)" fg:x="5910" fg:w="1"/><text x="98.7008%" y="287.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="98.4508%" y="261" width="0.0167%" height="15" fill="rgb(219,0,2)" fg:x="5910" fg:w="1"/><text x="98.7008%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="98.4674%" y="325" width="0.0167%" height="15" fill="rgb(246,9,5)" fg:x="5911" fg:w="1"/><text x="98.7174%" y="335.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (1 samples, 0.02%)</title><rect x="98.4674%" y="309" width="0.0167%" height="15" fill="rgb(226,159,4)" fg:x="5911" fg:w="1"/><text x="98.7174%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.02%)</title><rect x="98.4674%" y="293" width="0.0167%" height="15" fill="rgb(219,175,34)" fg:x="5911" fg:w="1"/><text x="98.7174%" y="303.50"></text></g><g><title>mio::poll::Poll::poll (26 samples, 0.43%)</title><rect x="98.4508%" y="357" width="0.4331%" height="15" fill="rgb(236,10,46)" fg:x="5910" fg:w="26"/><text x="98.7008%" y="367.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (26 samples, 0.43%)</title><rect x="98.4508%" y="341" width="0.4331%" height="15" fill="rgb(240,211,16)" fg:x="5910" fg:w="26"/><text x="98.7008%" y="351.50"></text></g><g><title>epoll_wait (24 samples, 0.40%)</title><rect x="98.4841%" y="325" width="0.3998%" height="15" fill="rgb(205,3,43)" fg:x="5912" fg:w="24"/><text x="98.7341%" y="335.50"></text></g><g><title>__libc_disable_asynccancel (12 samples, 0.20%)</title><rect x="98.6840%" y="309" width="0.1999%" height="15" fill="rgb(245,7,22)" fg:x="5924" fg:w="12"/><text x="98.9340%" y="319.50"></text></g><g><title>[unknown] (5,668 samples, 94.42%)</title><rect x="4.4811%" y="1077" width="94.4195%" height="15" fill="rgb(239,132,32)" fg:x="269" fg:w="5668"/><text x="4.7311%" y="1087.50">[unknown]</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="1061" width="0.4664%" height="15" fill="rgb(228,202,34)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (28 samples, 0.47%)</title><rect x="98.4341%" y="1045" width="0.4664%" height="15" fill="rgb(254,200,22)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="1055.50"></text></g><g><title>std::panicking::try (28 samples, 0.47%)</title><rect x="98.4341%" y="1029" width="0.4664%" height="15" fill="rgb(219,10,39)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="1039.50"></text></g><g><title>__rust_try (28 samples, 0.47%)</title><rect x="98.4341%" y="1013" width="0.4664%" height="15" fill="rgb(226,210,39)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (28 samples, 0.47%)</title><rect x="98.4341%" y="997" width="0.4664%" height="15" fill="rgb(208,219,16)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="1007.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (28 samples, 0.47%)</title><rect x="98.4341%" y="981" width="0.4664%" height="15" fill="rgb(216,158,51)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="965" width="0.4664%" height="15" fill="rgb(233,14,44)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 0.47%)</title><rect x="98.4341%" y="949" width="0.4664%" height="15" fill="rgb(237,97,39)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="933" width="0.4664%" height="15" fill="rgb(218,198,43)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="943.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (28 samples, 0.47%)</title><rect x="98.4341%" y="917" width="0.4664%" height="15" fill="rgb(231,104,20)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="927.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (28 samples, 0.47%)</title><rect x="98.4341%" y="901" width="0.4664%" height="15" fill="rgb(254,36,13)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="911.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (28 samples, 0.47%)</title><rect x="98.4341%" y="885" width="0.4664%" height="15" fill="rgb(248,14,50)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="895.50"></text></g><g><title>tokio::runtime::task::raw::poll (28 samples, 0.47%)</title><rect x="98.4341%" y="869" width="0.4664%" height="15" fill="rgb(217,107,29)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (28 samples, 0.47%)</title><rect x="98.4341%" y="853" width="0.4664%" height="15" fill="rgb(251,169,33)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (28 samples, 0.47%)</title><rect x="98.4341%" y="837" width="0.4664%" height="15" fill="rgb(217,108,32)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (28 samples, 0.47%)</title><rect x="98.4341%" y="821" width="0.4664%" height="15" fill="rgb(219,66,42)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="831.50"></text></g><g><title>std::panic::catch_unwind (28 samples, 0.47%)</title><rect x="98.4341%" y="805" width="0.4664%" height="15" fill="rgb(206,180,7)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="815.50"></text></g><g><title>std::panicking::try (28 samples, 0.47%)</title><rect x="98.4341%" y="789" width="0.4664%" height="15" fill="rgb(208,226,31)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="799.50"></text></g><g><title>__rust_try (28 samples, 0.47%)</title><rect x="98.4341%" y="773" width="0.4664%" height="15" fill="rgb(218,26,49)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="783.50"></text></g><g><title>std::panicking::try::do_call (28 samples, 0.47%)</title><rect x="98.4341%" y="757" width="0.4664%" height="15" fill="rgb(233,197,48)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (28 samples, 0.47%)</title><rect x="98.4341%" y="741" width="0.4664%" height="15" fill="rgb(252,181,51)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="725" width="0.4664%" height="15" fill="rgb(253,90,19)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="735.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (28 samples, 0.47%)</title><rect x="98.4341%" y="709" width="0.4664%" height="15" fill="rgb(215,171,30)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="719.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (28 samples, 0.47%)</title><rect x="98.4341%" y="693" width="0.4664%" height="15" fill="rgb(214,222,9)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="703.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="677" width="0.4664%" height="15" fill="rgb(223,3,22)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="687.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.47%)</title><rect x="98.4341%" y="661" width="0.4664%" height="15" fill="rgb(225,196,46)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="645" width="0.4664%" height="15" fill="rgb(209,110,37)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (28 samples, 0.47%)</title><rect x="98.4341%" y="629" width="0.4664%" height="15" fill="rgb(249,89,12)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="639.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (28 samples, 0.47%)</title><rect x="98.4341%" y="613" width="0.4664%" height="15" fill="rgb(226,27,33)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (28 samples, 0.47%)</title><rect x="98.4341%" y="597" width="0.4664%" height="15" fill="rgb(213,82,22)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (28 samples, 0.47%)</title><rect x="98.4341%" y="581" width="0.4664%" height="15" fill="rgb(248,140,0)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (28 samples, 0.47%)</title><rect x="98.4341%" y="565" width="0.4664%" height="15" fill="rgb(228,106,3)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (28 samples, 0.47%)</title><rect x="98.4341%" y="549" width="0.4664%" height="15" fill="rgb(209,23,37)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="559.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (28 samples, 0.47%)</title><rect x="98.4341%" y="533" width="0.4664%" height="15" fill="rgb(241,93,50)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="543.50"></text></g><g><title>tokio::runtime::park::Inner::park (28 samples, 0.47%)</title><rect x="98.4341%" y="517" width="0.4664%" height="15" fill="rgb(253,46,43)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="527.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (28 samples, 0.47%)</title><rect x="98.4341%" y="501" width="0.4664%" height="15" fill="rgb(226,206,43)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="511.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (28 samples, 0.47%)</title><rect x="98.4341%" y="485" width="0.4664%" height="15" fill="rgb(217,54,7)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="495.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (28 samples, 0.47%)</title><rect x="98.4341%" y="469" width="0.4664%" height="15" fill="rgb(223,5,52)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="479.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (28 samples, 0.47%)</title><rect x="98.4341%" y="453" width="0.4664%" height="15" fill="rgb(206,52,46)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="463.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (28 samples, 0.47%)</title><rect x="98.4341%" y="437" width="0.4664%" height="15" fill="rgb(253,136,11)" fg:x="5909" fg:w="28"/><text x="98.6841%" y="447.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (27 samples, 0.45%)</title><rect x="98.4508%" y="421" width="0.4498%" height="15" fill="rgb(208,106,33)" fg:x="5910" fg:w="27"/><text x="98.7008%" y="431.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (27 samples, 0.45%)</title><rect x="98.4508%" y="405" width="0.4498%" height="15" fill="rgb(206,54,4)" fg:x="5910" fg:w="27"/><text x="98.7008%" y="415.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (27 samples, 0.45%)</title><rect x="98.4508%" y="389" width="0.4498%" height="15" fill="rgb(213,3,15)" fg:x="5910" fg:w="27"/><text x="98.7008%" y="399.50"></text></g><g><title>tokio::io::driver::Driver::turn (27 samples, 0.45%)</title><rect x="98.4508%" y="373" width="0.4498%" height="15" fill="rgb(252,211,39)" fg:x="5910" fg:w="27"/><text x="98.7008%" y="383.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (1 samples, 0.02%)</title><rect x="98.8839%" y="357" width="0.0167%" height="15" fill="rgb(223,6,36)" fg:x="5936" fg:w="1"/><text x="99.1339%" y="367.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (1 samples, 0.02%)</title><rect x="98.8839%" y="341" width="0.0167%" height="15" fill="rgb(252,169,45)" fg:x="5936" fg:w="1"/><text x="99.1339%" y="351.50"></text></g><g><title>tokio::util::bit::Pack::pack (1 samples, 0.02%)</title><rect x="98.8839%" y="325" width="0.0167%" height="15" fill="rgb(212,48,26)" fg:x="5936" fg:w="1"/><text x="99.1339%" y="335.50"></text></g><g><title>__GI___prctl (1 samples, 0.02%)</title><rect x="98.9005%" y="997" width="0.0167%" height="15" fill="rgb(251,102,48)" fg:x="5937" fg:w="1"/><text x="99.1505%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.9005%" y="981" width="0.0167%" height="15" fill="rgb(243,208,16)" fg:x="5937" fg:w="1"/><text x="99.1505%" y="991.50"></text></g><g><title>&lt;tokio::runtime::handle::Handle as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.9339%" y="869" width="0.0167%" height="15" fill="rgb(219,96,24)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="879.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.9339%" y="853" width="0.0167%" height="15" fill="rgb(219,33,29)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="863.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::Spawner as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.9339%" y="837" width="0.0167%" height="15" fill="rgb(223,176,5)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.9339%" y="821" width="0.0167%" height="15" fill="rgb(228,140,14)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="98.9339%" y="805" width="0.0167%" height="15" fill="rgb(217,179,31)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="98.9339%" y="789" width="0.0167%" height="15" fill="rgb(230,9,30)" fg:x="5939" fg:w="1"/><text x="99.1839%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.0005%" y="805" width="0.0167%" height="15" fill="rgb(230,136,20)" fg:x="5943" fg:w="1"/><text x="99.2505%" y="815.50"></text></g><g><title>std::sync::poison::Flag::get (2 samples, 0.03%)</title><rect x="99.0172%" y="789" width="0.0333%" height="15" fill="rgb(215,210,22)" fg:x="5944" fg:w="2"/><text x="99.2672%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.03%)</title><rect x="99.0172%" y="773" width="0.0333%" height="15" fill="rgb(218,43,5)" fg:x="5944" fg:w="2"/><text x="99.2672%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="99.0172%" y="757" width="0.0333%" height="15" fill="rgb(216,11,5)" fg:x="5944" fg:w="2"/><text x="99.2672%" y="767.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (8 samples, 0.13%)</title><rect x="98.9505%" y="821" width="0.1333%" height="15" fill="rgb(209,82,29)" fg:x="5940" fg:w="8"/><text x="99.2005%" y="831.50"></text></g><g><title>std::sync::poison::Flag::borrow (4 samples, 0.07%)</title><rect x="99.0172%" y="805" width="0.0666%" height="15" fill="rgb(244,115,12)" fg:x="5944" fg:w="4"/><text x="99.2672%" y="815.50"></text></g><g><title>std::thread::panicking (2 samples, 0.03%)</title><rect x="99.0505%" y="789" width="0.0333%" height="15" fill="rgb(222,82,18)" fg:x="5946" fg:w="2"/><text x="99.3005%" y="799.50"></text></g><g><title>std::panicking::panicking (2 samples, 0.03%)</title><rect x="99.0505%" y="773" width="0.0333%" height="15" fill="rgb(249,227,8)" fg:x="5946" fg:w="2"/><text x="99.3005%" y="783.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="99.0671%" y="757" width="0.0167%" height="15" fill="rgb(253,141,45)" fg:x="5947" fg:w="1"/><text x="99.3171%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.35%)</title><rect x="98.9505%" y="853" width="0.3498%" height="15" fill="rgb(234,184,4)" fg:x="5940" fg:w="21"/><text x="99.2005%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.35%)</title><rect x="98.9505%" y="837" width="0.3498%" height="15" fill="rgb(218,194,23)" fg:x="5940" fg:w="21"/><text x="99.2005%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.22%)</title><rect x="99.0838%" y="821" width="0.2166%" height="15" fill="rgb(235,66,41)" fg:x="5948" fg:w="13"/><text x="99.3338%" y="831.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (13 samples, 0.22%)</title><rect x="99.0838%" y="805" width="0.2166%" height="15" fill="rgb(245,217,1)" fg:x="5948" fg:w="13"/><text x="99.3338%" y="815.50"></text></g><g><title>__pthread_mutex_lock (12 samples, 0.20%)</title><rect x="99.1004%" y="789" width="0.1999%" height="15" fill="rgb(229,91,1)" fg:x="5949" fg:w="12"/><text x="99.3504%" y="799.50"></text></g><g><title>__lll_lock_wait (11 samples, 0.18%)</title><rect x="99.1171%" y="773" width="0.1832%" height="15" fill="rgb(207,101,30)" fg:x="5950" fg:w="11"/><text x="99.3671%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.2670%" y="757" width="0.0333%" height="15" fill="rgb(223,82,49)" fg:x="5959" fg:w="2"/><text x="99.5170%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.2670%" y="741" width="0.0333%" height="15" fill="rgb(218,167,17)" fg:x="5959" fg:w="2"/><text x="99.5170%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.2670%" y="725" width="0.0333%" height="15" fill="rgb(208,103,14)" fg:x="5959" fg:w="2"/><text x="99.5170%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.2670%" y="709" width="0.0333%" height="15" fill="rgb(238,20,8)" fg:x="5959" fg:w="2"/><text x="99.5170%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.02%)</title><rect x="99.3170%" y="597" width="0.0167%" height="15" fill="rgb(218,80,54)" fg:x="5962" fg:w="1"/><text x="99.5670%" y="607.50"></text></g><g><title>tokio::coop::stop (1 samples, 0.02%)</title><rect x="99.3337%" y="597" width="0.0167%" height="15" fill="rgb(240,144,17)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3337%" y="581" width="0.0167%" height="15" fill="rgb(245,27,50)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="591.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.3337%" y="565" width="0.0167%" height="15" fill="rgb(251,51,7)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="575.50"></text></g><g><title>tokio::coop::stop::{{closure}} (1 samples, 0.02%)</title><rect x="99.3337%" y="549" width="0.0167%" height="15" fill="rgb(245,217,29)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="99.3337%" y="533" width="0.0167%" height="15" fill="rgb(221,176,29)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="99.3337%" y="517" width="0.0167%" height="15" fill="rgb(212,180,24)" fg:x="5963" fg:w="1"/><text x="99.5837%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="99.3503%" y="453" width="0.0167%" height="15" fill="rgb(254,24,2)" fg:x="5964" fg:w="1"/><text x="99.6003%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="99.3503%" y="437" width="0.0167%" height="15" fill="rgb(230,100,2)" fg:x="5964" fg:w="1"/><text x="99.6003%" y="447.50"></text></g><g><title>__condvar_dec_grefs (1 samples, 0.02%)</title><rect x="99.3836%" y="373" width="0.0167%" height="15" fill="rgb(219,142,25)" fg:x="5966" fg:w="1"/><text x="99.6336%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5336%" y="357" width="0.0167%" height="15" fill="rgb(240,73,43)" fg:x="5975" fg:w="1"/><text x="99.7836%" y="367.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (15 samples, 0.25%)</title><rect x="99.3670%" y="453" width="0.2499%" height="15" fill="rgb(214,114,15)" fg:x="5965" fg:w="15"/><text x="99.6170%" y="463.50"></text></g><g><title>std::sync::condvar::Condvar::wait (15 samples, 0.25%)</title><rect x="99.3670%" y="437" width="0.2499%" height="15" fill="rgb(207,130,4)" fg:x="5965" fg:w="15"/><text x="99.6170%" y="447.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (15 samples, 0.25%)</title><rect x="99.3670%" y="421" width="0.2499%" height="15" fill="rgb(221,25,40)" fg:x="5965" fg:w="15"/><text x="99.6170%" y="431.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (14 samples, 0.23%)</title><rect x="99.3836%" y="405" width="0.2332%" height="15" fill="rgb(241,184,7)" fg:x="5966" fg:w="14"/><text x="99.6336%" y="415.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (14 samples, 0.23%)</title><rect x="99.3836%" y="389" width="0.2332%" height="15" fill="rgb(235,159,4)" fg:x="5966" fg:w="14"/><text x="99.6336%" y="399.50"></text></g><g><title>__futex_abstimed_wait_common64 (13 samples, 0.22%)</title><rect x="99.4003%" y="373" width="0.2166%" height="15" fill="rgb(214,87,48)" fg:x="5967" fg:w="13"/><text x="99.6503%" y="383.50"></text></g><g><title>__pthread_disable_asynccancel (4 samples, 0.07%)</title><rect x="99.5502%" y="357" width="0.0666%" height="15" fill="rgb(246,198,24)" fg:x="5976" fg:w="4"/><text x="99.8002%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (21 samples, 0.35%)</title><rect x="99.3503%" y="501" width="0.3498%" height="15" fill="rgb(209,66,40)" fg:x="5964" fg:w="21"/><text x="99.6003%" y="511.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (21 samples, 0.35%)</title><rect x="99.3503%" y="485" width="0.3498%" height="15" fill="rgb(233,147,39)" fg:x="5964" fg:w="21"/><text x="99.6003%" y="495.50"></text></g><g><title>tokio::runtime::park::Inner::park (21 samples, 0.35%)</title><rect x="99.3503%" y="469" width="0.3498%" height="15" fill="rgb(231,145,52)" fg:x="5964" fg:w="21"/><text x="99.6003%" y="479.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (5 samples, 0.08%)</title><rect x="99.6169%" y="453" width="0.0833%" height="15" fill="rgb(206,20,26)" fg:x="5980" fg:w="5"/><text x="99.8669%" y="463.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (5 samples, 0.08%)</title><rect x="99.6169%" y="437" width="0.0833%" height="15" fill="rgb(238,220,4)" fg:x="5980" fg:w="5"/><text x="99.8669%" y="447.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (5 samples, 0.08%)</title><rect x="99.6169%" y="421" width="0.0833%" height="15" fill="rgb(252,195,42)" fg:x="5980" fg:w="5"/><text x="99.8669%" y="431.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (5 samples, 0.08%)</title><rect x="99.6169%" y="405" width="0.0833%" height="15" fill="rgb(209,10,6)" fg:x="5980" fg:w="5"/><text x="99.8669%" y="415.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (5 samples, 0.08%)</title><rect x="99.6169%" y="389" width="0.0833%" height="15" fill="rgb(229,3,52)" fg:x="5980" fg:w="5"/><text x="99.8669%" y="399.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (4 samples, 0.07%)</title><rect x="99.6335%" y="373" width="0.0666%" height="15" fill="rgb(253,49,37)" fg:x="5981" fg:w="4"/><text x="99.8835%" y="383.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (4 samples, 0.07%)</title><rect x="99.6335%" y="357" width="0.0666%" height="15" fill="rgb(240,103,49)" fg:x="5981" fg:w="4"/><text x="99.8835%" y="367.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 0.05%)</title><rect x="99.6502%" y="341" width="0.0500%" height="15" fill="rgb(250,182,30)" fg:x="5982" fg:w="3"/><text x="99.9002%" y="351.50"></text></g><g><title>tokio::io::driver::Driver::turn (3 samples, 0.05%)</title><rect x="99.6502%" y="325" width="0.0500%" height="15" fill="rgb(248,8,30)" fg:x="5982" fg:w="3"/><text x="99.9002%" y="335.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="99.6835%" y="309" width="0.0167%" height="15" fill="rgb(237,120,30)" fg:x="5984" fg:w="1"/><text x="99.9335%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (2 samples, 0.03%)</title><rect x="99.7001%" y="501" width="0.0333%" height="15" fill="rgb(221,146,34)" fg:x="5985" fg:w="2"/><text x="99.9501%" y="511.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_closed (2 samples, 0.03%)</title><rect x="99.7001%" y="485" width="0.0333%" height="15" fill="rgb(242,55,13)" fg:x="5985" fg:w="2"/><text x="99.9501%" y="495.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="99.7001%" y="469" width="0.0333%" height="15" fill="rgb(242,112,31)" fg:x="5985" fg:w="2"/><text x="99.9501%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="99.7168%" y="453" width="0.0167%" height="15" fill="rgb(249,192,27)" fg:x="5986" fg:w="1"/><text x="99.9668%" y="463.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="99.7168%" y="437" width="0.0167%" height="15" fill="rgb(208,204,44)" fg:x="5986" fg:w="1"/><text x="99.9668%" y="447.50"></text></g><g><title>std::sync::poison::map_result (1 samples, 0.02%)</title><rect x="99.7168%" y="421" width="0.0167%" height="15" fill="rgb(208,93,54)" fg:x="5986" fg:w="1"/><text x="99.9668%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new::{{closure}} (1 samples, 0.02%)</title><rect x="99.7168%" y="405" width="0.0167%" height="15" fill="rgb(242,1,31)" fg:x="5986" fg:w="1"/><text x="99.9668%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (1 samples, 0.02%)</title><rect x="99.7335%" y="501" width="0.0167%" height="15" fill="rgb(241,83,25)" fg:x="5987" fg:w="1"/><text x="99.9835%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (1 samples, 0.02%)</title><rect x="99.7335%" y="485" width="0.0167%" height="15" fill="rgb(205,169,50)" fg:x="5987" fg:w="1"/><text x="99.9835%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.02%)</title><rect x="99.7335%" y="469" width="0.0167%" height="15" fill="rgb(239,186,37)" fg:x="5987" fg:w="1"/><text x="99.9835%" y="479.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.02%)</title><rect x="99.7335%" y="453" width="0.0167%" height="15" fill="rgb(205,221,10)" fg:x="5987" fg:w="1"/><text x="99.9835%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="99.7501%" y="485" width="0.0167%" height="15" fill="rgb(218,196,15)" fg:x="5988" fg:w="1"/><text x="100.0001%" y="495.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="99.7501%" y="469" width="0.0167%" height="15" fill="rgb(218,196,35)" fg:x="5988" fg:w="1"/><text x="100.0001%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="99.7501%" y="453" width="0.0167%" height="15" fill="rgb(233,63,24)" fg:x="5988" fg:w="1"/><text x="100.0001%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (26 samples, 0.43%)</title><rect x="99.3503%" y="517" width="0.4331%" height="15" fill="rgb(225,8,4)" fg:x="5964" fg:w="26"/><text x="99.6003%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (2 samples, 0.03%)</title><rect x="99.7501%" y="501" width="0.0333%" height="15" fill="rgb(234,105,35)" fg:x="5988" fg:w="2"/><text x="100.0001%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (1 samples, 0.02%)</title><rect x="99.7668%" y="485" width="0.0167%" height="15" fill="rgb(236,21,32)" fg:x="5989" fg:w="1"/><text x="100.0168%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.7668%" y="469" width="0.0167%" height="15" fill="rgb(228,109,6)" fg:x="5989" fg:w="1"/><text x="100.0168%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="99.7668%" y="453" width="0.0167%" height="15" fill="rgb(229,215,31)" fg:x="5989" fg:w="1"/><text x="100.0168%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="99.7668%" y="437" width="0.0167%" height="15" fill="rgb(221,52,54)" fg:x="5989" fg:w="1"/><text x="100.0168%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1 samples, 0.02%)</title><rect x="99.7834%" y="517" width="0.0167%" height="15" fill="rgb(252,129,43)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.7834%" y="501" width="0.0167%" height="15" fill="rgb(248,183,27)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.7834%" y="485" width="0.0167%" height="15" fill="rgb(250,0,22)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="495.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.02%)</title><rect x="99.7834%" y="469" width="0.0167%" height="15" fill="rgb(213,166,10)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1 samples, 0.02%)</title><rect x="99.7834%" y="453" width="0.0167%" height="15" fill="rgb(207,163,36)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="463.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.02%)</title><rect x="99.7834%" y="437" width="0.0167%" height="15" fill="rgb(208,122,22)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.02%)</title><rect x="99.7834%" y="421" width="0.0167%" height="15" fill="rgb(207,104,49)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="99.7834%" y="405" width="0.0167%" height="15" fill="rgb(248,211,50)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="99.7834%" y="389" width="0.0167%" height="15" fill="rgb(217,13,45)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="399.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.02%)</title><rect x="99.7834%" y="373" width="0.0167%" height="15" fill="rgb(211,216,49)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.02%)</title><rect x="99.7834%" y="357" width="0.0167%" height="15" fill="rgb(221,58,53)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="367.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="99.7834%" y="341" width="0.0167%" height="15" fill="rgb(220,112,41)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_core::mysql::database::MySql&gt;::return_to_pool::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.7834%" y="325" width="0.0167%" height="15" fill="rgb(236,38,28)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="335.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.02%)</title><rect x="99.7834%" y="309" width="0.0167%" height="15" fill="rgb(227,195,22)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.7834%" y="293" width="0.0167%" height="15" fill="rgb(214,55,33)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.7834%" y="277" width="0.0167%" height="15" fill="rgb(248,80,13)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="99.7834%" y="261" width="0.0167%" height="15" fill="rgb(238,52,6)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.7834%" y="245" width="0.0167%" height="15" fill="rgb(224,198,47)" fg:x="5990" fg:w="1"/><text x="100.0334%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.02%)</title><rect x="99.8001%" y="501" width="0.0167%" height="15" fill="rgb(233,171,20)" fg:x="5991" fg:w="1"/><text x="100.0501%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task::{{closure}} (1 samples, 0.02%)</title><rect x="99.8001%" y="485" width="0.0167%" height="15" fill="rgb(241,30,25)" fg:x="5991" fg:w="1"/><text x="100.0501%" y="495.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="99.8001%" y="469" width="0.0167%" height="15" fill="rgb(207,171,38)" fg:x="5991" fg:w="1"/><text x="100.0501%" y="479.50"></text></g><g><title>tokio::runtime::task::inject::get_next (1 samples, 0.02%)</title><rect x="99.8001%" y="453" width="0.0167%" height="15" fill="rgb(234,70,1)" fg:x="5991" fg:w="1"/><text x="100.0501%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.8001%" y="437" width="0.0167%" height="15" fill="rgb(232,178,18)" fg:x="5991" fg:w="1"/><text x="100.0501%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (2 samples, 0.03%)</title><rect x="99.8001%" y="517" width="0.0333%" height="15" fill="rgb(241,78,40)" fg:x="5991" fg:w="2"/><text x="100.0501%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task (1 samples, 0.02%)</title><rect x="99.8168%" y="501" width="0.0167%" height="15" fill="rgb(222,35,25)" fg:x="5992" fg:w="1"/><text x="100.0668%" y="511.50"></text></g><g><title>std::panic::catch_unwind (56 samples, 0.93%)</title><rect x="98.9172%" y="997" width="0.9329%" height="15" fill="rgb(207,92,16)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="1007.50"></text></g><g><title>std::panicking::try (56 samples, 0.93%)</title><rect x="98.9172%" y="981" width="0.9329%" height="15" fill="rgb(216,59,51)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="991.50"></text></g><g><title>__rust_try (56 samples, 0.93%)</title><rect x="98.9172%" y="965" width="0.9329%" height="15" fill="rgb(213,80,28)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="975.50"></text></g><g><title>std::panicking::try::do_call (56 samples, 0.93%)</title><rect x="98.9172%" y="949" width="0.9329%" height="15" fill="rgb(220,93,7)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (56 samples, 0.93%)</title><rect x="98.9172%" y="933" width="0.9329%" height="15" fill="rgb(225,24,44)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (56 samples, 0.93%)</title><rect x="98.9172%" y="917" width="0.9329%" height="15" fill="rgb(243,74,40)" fg:x="5938" fg:w="56"/><text x="99.1672%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (55 samples, 0.92%)</title><rect x="98.9339%" y="901" width="0.9162%" height="15" fill="rgb(228,39,7)" fg:x="5939" fg:w="55"/><text x="99.1839%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (55 samples, 0.92%)</title><rect x="98.9339%" y="885" width="0.9162%" height="15" fill="rgb(227,79,8)" fg:x="5939" fg:w="55"/><text x="99.1839%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (54 samples, 0.90%)</title><rect x="98.9505%" y="869" width="0.8996%" height="15" fill="rgb(236,58,11)" fg:x="5940" fg:w="54"/><text x="99.2005%" y="879.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (33 samples, 0.55%)</title><rect x="99.3003%" y="853" width="0.5497%" height="15" fill="rgb(249,63,35)" fg:x="5961" fg:w="33"/><text x="99.5503%" y="863.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (33 samples, 0.55%)</title><rect x="99.3003%" y="837" width="0.5497%" height="15" fill="rgb(252,114,16)" fg:x="5961" fg:w="33"/><text x="99.5503%" y="847.50"></text></g><g><title>tokio::runtime::task::raw::poll (32 samples, 0.53%)</title><rect x="99.3170%" y="821" width="0.5331%" height="15" fill="rgb(254,151,24)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (32 samples, 0.53%)</title><rect x="99.3170%" y="805" width="0.5331%" height="15" fill="rgb(253,54,39)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (32 samples, 0.53%)</title><rect x="99.3170%" y="789" width="0.5331%" height="15" fill="rgb(243,25,45)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (32 samples, 0.53%)</title><rect x="99.3170%" y="773" width="0.5331%" height="15" fill="rgb(234,134,9)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="783.50"></text></g><g><title>std::panic::catch_unwind (32 samples, 0.53%)</title><rect x="99.3170%" y="757" width="0.5331%" height="15" fill="rgb(227,166,31)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="767.50"></text></g><g><title>std::panicking::try (32 samples, 0.53%)</title><rect x="99.3170%" y="741" width="0.5331%" height="15" fill="rgb(245,143,41)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="751.50"></text></g><g><title>__rust_try (32 samples, 0.53%)</title><rect x="99.3170%" y="725" width="0.5331%" height="15" fill="rgb(238,181,32)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="735.50"></text></g><g><title>std::panicking::try::do_call (32 samples, 0.53%)</title><rect x="99.3170%" y="709" width="0.5331%" height="15" fill="rgb(224,113,18)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (32 samples, 0.53%)</title><rect x="99.3170%" y="693" width="0.5331%" height="15" fill="rgb(240,229,28)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (32 samples, 0.53%)</title><rect x="99.3170%" y="677" width="0.5331%" height="15" fill="rgb(250,185,3)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="687.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (32 samples, 0.53%)</title><rect x="99.3170%" y="661" width="0.5331%" height="15" fill="rgb(212,59,25)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="671.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (32 samples, 0.53%)</title><rect x="99.3170%" y="645" width="0.5331%" height="15" fill="rgb(221,87,20)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="655.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (32 samples, 0.53%)</title><rect x="99.3170%" y="629" width="0.5331%" height="15" fill="rgb(213,74,28)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="639.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.53%)</title><rect x="99.3170%" y="613" width="0.5331%" height="15" fill="rgb(224,132,34)" fg:x="5962" fg:w="32"/><text x="99.5670%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (30 samples, 0.50%)</title><rect x="99.3503%" y="597" width="0.4998%" height="15" fill="rgb(222,101,24)" fg:x="5964" fg:w="30"/><text x="99.6003%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (30 samples, 0.50%)</title><rect x="99.3503%" y="581" width="0.4998%" height="15" fill="rgb(254,142,4)" fg:x="5964" fg:w="30"/><text x="99.6003%" y="591.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (30 samples, 0.50%)</title><rect x="99.3503%" y="565" width="0.4998%" height="15" fill="rgb(230,229,49)" fg:x="5964" fg:w="30"/><text x="99.6003%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (30 samples, 0.50%)</title><rect x="99.3503%" y="549" width="0.4998%" height="15" fill="rgb(238,70,47)" fg:x="5964" fg:w="30"/><text x="99.6003%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (30 samples, 0.50%)</title><rect x="99.3503%" y="533" width="0.4998%" height="15" fill="rgb(231,160,17)" fg:x="5964" fg:w="30"/><text x="99.6003%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (1 samples, 0.02%)</title><rect x="99.8334%" y="517" width="0.0167%" height="15" fill="rgb(218,68,53)" fg:x="5993" fg:w="1"/><text x="100.0834%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="99.8334%" y="501" width="0.0167%" height="15" fill="rgb(236,111,10)" fg:x="5993" fg:w="1"/><text x="100.0834%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="99.8334%" y="485" width="0.0167%" height="15" fill="rgb(224,34,41)" fg:x="5993" fg:w="1"/><text x="100.0834%" y="495.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="99.8334%" y="469" width="0.0167%" height="15" fill="rgb(241,118,19)" fg:x="5993" fg:w="1"/><text x="100.0834%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="99.8334%" y="453" width="0.0167%" height="15" fill="rgb(238,129,25)" fg:x="5993" fg:w="1"/><text x="100.0834%" y="463.50"></text></g><g><title>__mmap (1 samples, 0.02%)</title><rect x="99.8834%" y="901" width="0.0167%" height="15" fill="rgb(238,22,31)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8834%" y="885" width="0.0167%" height="15" fill="rgb(222,174,48)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8834%" y="869" width="0.0167%" height="15" fill="rgb(206,152,40)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8834%" y="853" width="0.0167%" height="15" fill="rgb(218,99,54)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8834%" y="837" width="0.0167%" height="15" fill="rgb(220,174,26)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8834%" y="821" width="0.0167%" height="15" fill="rgb(245,116,9)" fg:x="5996" fg:w="1"/><text x="100.1334%" y="831.50"></text></g><g><title>malloc (5 samples, 0.08%)</title><rect x="99.8501%" y="965" width="0.0833%" height="15" fill="rgb(209,72,35)" fg:x="5994" fg:w="5"/><text x="100.1001%" y="975.50"></text></g><g><title>tcache_init.part.0 (5 samples, 0.08%)</title><rect x="99.8501%" y="949" width="0.0833%" height="15" fill="rgb(226,126,21)" fg:x="5994" fg:w="5"/><text x="100.1001%" y="959.50"></text></g><g><title>arena_get2.part.0 (3 samples, 0.05%)</title><rect x="99.8834%" y="933" width="0.0500%" height="15" fill="rgb(227,192,1)" fg:x="5996" fg:w="3"/><text x="100.1334%" y="943.50"></text></g><g><title>new_heap (3 samples, 0.05%)</title><rect x="99.8834%" y="917" width="0.0500%" height="15" fill="rgb(237,180,29)" fg:x="5996" fg:w="3"/><text x="100.1334%" y="927.50"></text></g><g><title>__mprotect (2 samples, 0.03%)</title><rect x="99.9000%" y="901" width="0.0333%" height="15" fill="rgb(230,197,35)" fg:x="5997" fg:w="2"/><text x="100.1500%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.9000%" y="885" width="0.0333%" height="15" fill="rgb(246,193,31)" fg:x="5997" fg:w="2"/><text x="100.1500%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9167%" y="869" width="0.0167%" height="15" fill="rgb(241,36,4)" fg:x="5998" fg:w="1"/><text x="100.1667%" y="879.50"></text></g><g><title>__pthread_attr_extension (1 samples, 0.02%)</title><rect x="99.9334%" y="949" width="0.0167%" height="15" fill="rgb(241,130,17)" fg:x="5999" fg:w="1"/><text x="100.1834%" y="959.50"></text></g><g><title>pthread_attr_setaffinity_np@GLIBC_2.3.4 (2 samples, 0.03%)</title><rect x="99.9334%" y="965" width="0.0333%" height="15" fill="rgb(206,137,32)" fg:x="5999" fg:w="2"/><text x="100.1834%" y="975.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="99.9500%" y="949" width="0.0167%" height="15" fill="rgb(237,228,51)" fg:x="6000" fg:w="1"/><text x="100.2000%" y="959.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (8 samples, 0.13%)</title><rect x="99.8501%" y="981" width="0.1333%" height="15" fill="rgb(243,6,42)" fg:x="5994" fg:w="8"/><text x="100.1001%" y="991.50"></text></g><g><title>pthread_getaffinity_np@@GLIBC_2.32 (1 samples, 0.02%)</title><rect x="99.9667%" y="965" width="0.0167%" height="15" fill="rgb(251,74,28)" fg:x="6001" fg:w="1"/><text x="100.2167%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9667%" y="949" width="0.0167%" height="15" fill="rgb(218,20,49)" fg:x="6001" fg:w="1"/><text x="100.2167%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9667%" y="933" width="0.0167%" height="15" fill="rgb(238,28,14)" fg:x="6001" fg:w="1"/><text x="100.2167%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9667%" y="917" width="0.0167%" height="15" fill="rgb(229,40,46)" fg:x="6001" fg:w="1"/><text x="100.2167%" y="927.50"></text></g><g><title>all (6,003 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(244,195,20)" fg:x="0" fg:w="6003"/><text x="0.2500%" y="1119.50"></text></g><g><title>tokio-runtime-w (5,734 samples, 95.52%)</title><rect x="4.4811%" y="1093" width="95.5189%" height="15" fill="rgb(253,56,35)" fg:x="269" fg:w="5734"/><text x="4.7311%" y="1103.50">tokio-runtime-w</text></g><g><title>__clone (66 samples, 1.10%)</title><rect x="98.9005%" y="1077" width="1.0995%" height="15" fill="rgb(210,149,44)" fg:x="5937" fg:w="66"/><text x="99.1505%" y="1087.50"></text></g><g><title>start_thread (66 samples, 1.10%)</title><rect x="98.9005%" y="1061" width="1.0995%" height="15" fill="rgb(240,135,12)" fg:x="5937" fg:w="66"/><text x="99.1505%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (66 samples, 1.10%)</title><rect x="98.9005%" y="1045" width="1.0995%" height="15" fill="rgb(251,24,50)" fg:x="5937" fg:w="66"/><text x="99.1505%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (66 samples, 1.10%)</title><rect x="98.9005%" y="1029" width="1.0995%" height="15" fill="rgb(243,200,47)" fg:x="5937" fg:w="66"/><text x="99.1505%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (66 samples, 1.10%)</title><rect x="98.9005%" y="1013" width="1.0995%" height="15" fill="rgb(224,166,26)" fg:x="5937" fg:w="66"/><text x="99.1505%" y="1023.50"></text></g><g><title>std::sys::unix::thread::guard::current (9 samples, 0.15%)</title><rect x="99.8501%" y="997" width="0.1499%" height="15" fill="rgb(233,0,47)" fg:x="5994" fg:w="9"/><text x="100.1001%" y="1007.50"></text></g><g><title>pthread_self (1 samples, 0.02%)</title><rect x="99.9833%" y="981" width="0.0167%" height="15" fill="rgb(253,80,5)" fg:x="6002" fg:w="1"/><text x="100.2333%" y="991.50"></text></g></svg></svg>