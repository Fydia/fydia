//! `SeaORM` Entity. Generated by sea-orm-codegen 0.6.0

use std::convert::TryFrom;

use fydia_struct::messages::Message;
use sea_orm::{entity::prelude::*, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Messages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub content: Option<String>,
    pub message_type: String,
    pub edited: i8,
    pub timestamp: DateTime,
    pub channel_id: String,
    pub author_id: u32,
}

impl TryFrom<Message> for ActiveModel {
    type Error = String;

    fn try_from(value: Message) -> Result<Self, Self::Error> {
        Ok(Self {
            id: Set(value.id.clone()),
            content: Set(Some(value.content)),
            message_type: Set(value.message_type.to_string()),
            timestamp: Set(value.timestamp.0.naive_utc()),
            edited: Set(value.edited as i8),
            channel_id: Set(value.channel_id.id.clone()),
            author_id: Set(value.author_id.id.0.get_id()?),
        })
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::ChannelId",
        to = "super::channels::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Channels,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::AuthorId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
