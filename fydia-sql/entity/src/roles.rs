//! `SeoORM` Entity. Generated by sea-orm-codegen 0.6.0

use fydia_struct::{roles::Role, server::ServerId, utils::Id};
use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};
use shared::sea_orm;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "roles")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    pub serverid: String,
    pub name: String,
    pub color: String,
    pub server_permission: u64,
}

impl Model {
    pub fn to_role(&self) -> Role {
        Role {
            id: Id::Id(self.id),
            server_id: ServerId::new(self.serverid.clone()),
            name: self.name.clone(),
            color: self.color.clone(),
            server_permission: self.server_permission,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::server::Entity",
        from = "Column::Serverid",
        to = "super::server::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Server,
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<Role> for ActiveModel {
    fn from(role: Role) -> Self {
        Self {
            id: NotSet,
            serverid: Set(role.server_id.id),
            name: Set(role.name),
            color: Set(role.color),
            server_permission: Set(role.server_permission),
        }
    }
}

pub mod assignation {
    use sea_orm::entity::prelude::*;
    use shared::sea_orm;
    #[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
    #[sea_orm(table_name = "roles_assignation")]
    pub struct Model {
        #[sea_orm(primary_key)]
        pub role_id: u32,
        #[sea_orm(primary_key)]
        pub user_id: u32,
        #[sea_orm(primary_key)]
        pub server_id: String,
    }

    impl Model {}

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {
        #[sea_orm(
            belongs_to = "crate::roles::Entity",
            from = "Column::RoleId",
            to = "crate::roles::Column::Id",
            on_update = "Restrict",
            on_delete = "Restrict"
        )]
        Role,

        #[sea_orm(
            belongs_to = "crate::user::Entity",
            from = "Column::UserId",
            to = "crate::user::Column::Id",
            on_update = "Restrict",
            on_delete = "Restrict"
        )]
        User,

        #[sea_orm(
            belongs_to = "crate::server::Entity",
            from = "Column::ServerId",
            to = "crate::server::Column::Id",
            on_update = "Restrict",
            on_delete = "Restrict"
        )]
        Server,
    }

    impl Related<crate::roles::Entity> for Entity {
        fn to() -> RelationDef {
            Relation::Role.def()
        }
    }

    impl Related<crate::user::Entity> for Entity {
        fn to() -> RelationDef {
            Relation::User.def()
        }
    }

    impl ActiveModelBehavior for ActiveModel {}
}
