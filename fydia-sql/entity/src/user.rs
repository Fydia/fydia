//! `SeoORM` Entity. Generated by sea-orm-codegen 0.6.0

use std::convert::TryFrom;

use fydia_struct::user::User;
use sea_orm::{entity::prelude::*, Set};
use shared::sea_orm;
//use crate::impls::members::SqlMembers;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub instance: u16,
    #[sea_orm(unique)]
    pub token: String,
    #[sea_orm(column_type = "Text")]
    pub email: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

impl TryFrom<User> for ActiveModel {
    type Error = String;

    fn try_from(value: User) -> Result<Self, Self::Error> {
        let password = value
            .password
            .clone()
            .ok_or_else(|| "Password is empty".to_string())?;

        Ok(Self {
            name: Set(value.name.clone()),
            token: Set(value.token.unwrap_or_default()),
            email: Set(value.email.clone()),
            password: Set(password),
            instance: Set(0),
            description: Set(value.description),
            ..Default::default()
        })
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::direct_message_members::Entity")]
    DirectMessageMembers,
    #[sea_orm(has_many = "super::members::Entity")]
    Members,
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
    #[sea_orm(has_many = "super::server::Entity")]
    Server,
}

impl Related<super::direct_message_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectMessageMembers.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
