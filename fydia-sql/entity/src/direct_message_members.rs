//! `SeoORM` Entity. Generated by sea-orm-codegen 0.6.0

use fydia_struct::{
    directmessage::{DirectMessage, DirectMessageError},
    response::FydiaResponse,
    user::UserId,
    utils::{Id, IdError},
};
use sea_orm::{entity::prelude::*, sea_query::SimpleExpr, Set};
use shared::sea_orm;
#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "direct_message_members")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user: u32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub directmessage: u32,
}

impl<'m> Model {
    const MESSAGE: FydiaResponse = FydiaResponse::TextError("No DirectMessage with this expr");

    /// Get models with any condition
    ///
    /// # Errors
    /// Return an error if:
    /// * Database is unreachable
    /// * Model doesn't exist with this condition
    pub async fn get_model_by(
        simpl: SimpleExpr,
        executor: &DatabaseConnection,
    ) -> Result<Self, FydiaResponse> {
        match Entity::find().filter(simpl).one(executor).await {
            Ok(Some(model)) => Ok(model),
            _ => Err(Self::MESSAGE),
        }
    }

    /// Get models with any condition
    ///
    /// # Errors
    /// Return an error if:
    /// * Database is unreachable
    /// * Model doesn't exist with this condition
    pub async fn get_models_by(
        simpl: SimpleExpr,
        executor: &DatabaseConnection,
    ) -> Result<Vec<Self>, FydiaResponse> {
        match Entity::find().filter(simpl).all(executor).await {
            Ok(model) => Ok(model),
            _ => Err(Self::MESSAGE),
        }
    }

    pub fn to_userid(&self) -> UserId {
        UserId(Id::Id(self.user))
    }

    /// Return `DirectMessage`
    ///
    /// # Errors
    /// Return an error if :
    /// * Model with this id isn't exists
    pub async fn get_directmessage(
        &self,
        executor: &DatabaseConnection,
    ) -> Result<DirectMessage, DirectMessageError> {
        let direct_message =
            super::direct_message::Model::get_model_by_id(self.directmessage, executor)
                .await
                .map_err(|_| DirectMessageError::CannotGetById)?;

        Ok(direct_message.to_directmessage())
    }

    /// Return an activemodel from `userid`
    ///
    /// # Errors
    /// Return an error if :
    /// * Id is unset
    pub fn new_activemodel(
        userid: &UserId,
        directmessage: &DirectMessage,
    ) -> Result<ActiveModel, IdError> {
        Ok(ActiveModel {
            directmessage: Set(directmessage.id.get_id_cloned()?),
            user: Set(userid.0.get_id_cloned()?),
        })
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::direct_message::Entity",
        from = "Column::Directmessage",
        to = "super::direct_message::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    DirectMessage,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::direct_message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectMessage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
