//! `SeoORM` Entity. Generated by sea-orm-codegen 0.6.0

use std::convert::TryFrom;

use fydia_struct::channel::Channel;
use sea_orm::{entity::prelude::*, Set};
use shared::sea_orm;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "channels")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub server_id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub channel_type: u32,
}

impl TryFrom<Channel> for ActiveModel {
    type Error = String;

    fn try_from(channel: Channel) -> Result<Self, Self::Error> {
        Ok(Self {
            id: Set(channel.id.id.clone()),
            server_id: Set(channel.parent_id.id),
            name: Set(channel.name.clone()),
            description: Set(Some(channel.description.clone())),
            channel_type: Set(channel.channel_type as u32),
        })
    }
}

impl TryFrom<&Channel> for ActiveModel {
    type Error = String;

    fn try_from(channel: &Channel) -> Result<Self, Self::Error> {
        Self::try_from(channel.clone())
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
