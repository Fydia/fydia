//! SeaORM Entity. Generated by sea-orm-codegen 0.2.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "Messages"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: String,
    pub content: Option<String>,
    pub message_type: String,
    pub edited: i8,
    pub timestamp: DateTime,
    pub channel_id: String,
    pub author_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Content,
    MessageType,
    Edited,
    Timestamp,
    ChannelId,
    AuthorId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Channels,
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(32u32)).def(),
            Self::Content => ColumnType::Text.def().null(),
            Self::MessageType => ColumnType::String(Some(32u32)).def(),
            Self::Edited => ColumnType::TinyInteger.def(),
            Self::Timestamp => ColumnType::Timestamp.def(),
            Self::ChannelId => ColumnType::String(Some(15u32)).def(),
            Self::AuthorId => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Channels => Entity::belongs_to(super::channels::Entity)
                .from(Column::ChannelId)
                .to(super::channels::Column::Id)
                .into(),
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::AuthorId)
                .to(super::user::Column::Id)
                .into(),
        }
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
