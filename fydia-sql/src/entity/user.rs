//! SeaORM Entity. Generated by sea-orm-codegen 0.2.0

use fydia_struct::{instance::Instance, server::Servers, user::User};
use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "User"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: i32,
    pub name: String,
    pub instance: Option<String>,
    pub token: String,
    pub email: String,
    pub password: String,
    pub description: Option<String>,
    pub server: Option<String>,
}

impl Model {
    pub fn to_user(&self) -> Option<User> {
        let server = if let Some(server) = &self.server {
            Servers(serde_json::from_str(server.as_str()).unwrap_or_default())
        } else {
            return None;
        };

        Some(User {
            id: self.id,
            name: self.name.clone(),
            description: self.description.clone(),
            email: self.email.clone(),
            instance: Instance::default(),
            token: Some(self.token.clone()),
            password: self.password.clone(),
            server,
        })
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Instance,
    Token,
    Email,
    Password,
    Description,
    Server,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Messages,
    Server,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Name => ColumnType::Text.def(),
            Self::Instance => ColumnType::Text.def().null(),
            Self::Token => ColumnType::String(Some(30u32)).def(),
            Self::Email => ColumnType::Text.def(),
            Self::Password => ColumnType::Text.def(),
            Self::Description => ColumnType::Text.def().null(),
            Self::Server => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Messages => Entity::has_many(super::messages::Entity).into(),
            Self::Server => Entity::has_many(super::server::Entity).into(),
        }
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
