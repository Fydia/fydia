//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use fydia_struct::channel::{Channel, ChannelId, ChannelType, ParentId};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Channels")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub parent_id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub channel_type: Option<String>,
}

impl Model {
    pub fn from_channel(channel: Channel) -> Result<Self, String> {
        let parent_id = serde_json::to_string(&channel).map_err(|f| f.to_string())?;

        Ok(Self {
            id: channel.id.id,
            parent_id,
            name: channel.name,
            description: Some(channel.description),
            channel_type: Some(channel.channel_type.to_string()),
        })
    }
    pub fn to_channel(&self) -> Option<Channel> {
        let channel_type = self.channel_type.clone().map(ChannelType::from_string)?;
        let parent_id = serde_json::from_str::<ParentId>(&self.parent_id).ok()?;

        Some(Channel {
            id: ChannelId::new(self.id.clone()),
            name: self.name.clone(),
            parent_id,
            channel_type,
            description: self.description.clone().unwrap_or_default(),
        })
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
