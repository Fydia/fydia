use sea_orm_migration::prelude::*;

pub struct Migration;

impl MigrationName for Migration {
    fn name(&self) -> &str {
        "m20220101_000001_create_table"
    }
}

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_table(
                Table::create()
                    .table(entity::user::Entity)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(entity::user::Column::Id)
                            .unsigned()
                            .not_null()
                            .auto_increment()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(entity::user::Column::Name)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::user::Column::Instance)
                            .integer()
                            .unsigned(),
                    )
                    .col(
                        ColumnDef::new(entity::user::Column::Token)
                            .string_len(30)
                            .not_null()
                            .unique_key(),
                    )
                    .col(
                        ColumnDef::new(entity::user::Column::Email)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::user::Column::Password)
                            .text()
                            .not_null(),
                    )
                    .col(ColumnDef::new(entity::user::Column::Description).text())
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::server::Entity)
                    .col(
                        ColumnDef::new(entity::server::Column::Id)
                            .string_len(30)
                            .primary_key()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::server::Column::Name)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::server::Column::Owner)
                            .integer_len(10)
                            .unsigned()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::server::Column::Icon)
                            .text()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("Owner_FK")
                            .to(entity::user::Entity, entity::user::Column::Id)
                            .from(entity::server::Entity, entity::server::Column::Owner),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::channels::Entity)
                    .col(
                        ColumnDef::new(entity::channels::Column::Id)
                            .string_len(15)
                            .primary_key()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::channels::Column::Name)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::channels::Column::ServerId)
                            .string_len(30)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::channels::Column::Description)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::channels::Column::ChannelType)
                            .small_integer()
                            .unsigned()
                            .not_null(),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::messages::Entity)
                    .col(
                        ColumnDef::new(entity::messages::Column::Id)
                            .string_len(32)
                            .primary_key()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::Content)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::MessageType)
                            .string_len(32)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::Edited)
                            .small_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::Timestamp)
                            .date_time()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::ChannelId)
                            .string_len(15)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::messages::Column::AuthorId)
                            .integer()
                            .unsigned()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::channels::Entity, entity::channels::Column::Id)
                            .from(
                                entity::messages::Entity,
                                entity::messages::Column::ChannelId,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::user::Entity, entity::user::Column::Id)
                            .from(entity::messages::Entity, entity::messages::Column::AuthorId),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::roles::Entity)
                    .col(
                        ColumnDef::new(entity::roles::Column::Id)
                            .unsigned()
                            .primary_key()
                            .auto_increment(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::Column::Serverid)
                            .string_len(30)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::Column::Name)
                            .string_len(255)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::Column::Color)
                            .string_len(25)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::Column::ServerPermission)
                            .big_unsigned()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::server::Entity, entity::server::Column::Id)
                            .from(entity::roles::Entity, entity::roles::Column::Serverid),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::roles::assignation::Entity)
                    .col(
                        ColumnDef::new(entity::roles::assignation::Column::RoleId)
                            .unsigned()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::assignation::Column::UserId)
                            .unsigned()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::roles::assignation::Column::ServerId)
                            .string_len(30)
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::roles::Entity, entity::roles::Column::Id)
                            .from(
                                entity::roles::assignation::Entity,
                                entity::roles::assignation::Column::RoleId,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::user::Entity, entity::user::Column::Id)
                            .from(
                                entity::roles::assignation::Entity,
                                entity::roles::assignation::Column::UserId,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::server::Entity, entity::server::Column::Id)
                            .from(
                                entity::roles::assignation::Entity,
                                entity::roles::assignation::Column::ServerId,
                            ),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::members::Entity)
                    .col(
                        ColumnDef::new(entity::members::Column::Serverid)
                            .string_len(30)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::members::Column::Userid)
                            .integer()
                            .unsigned()
                            .not_null(),
                    )
                    .clone(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::direct_message::Entity)
                    .col(
                        ColumnDef::new(entity::direct_message::Column::Id)
                            .integer()
                            .unsigned()
                            .primary_key()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::direct_message::Column::Name)
                            .string_len(255)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::direct_message::Column::Icons)
                            .text()
                            .not_null(),
                    )
                    .clone(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::direct_message_members::Entity)
                    .col(
                        ColumnDef::new(entity::direct_message_members::Column::User)
                            .integer()
                            .unsigned()
                            .primary_key()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::direct_message_members::Column::Directmessage)
                            .integer()
                            .unsigned()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::user::Entity, entity::user::Column::Id)
                            .from(
                                entity::direct_message_members::Entity,
                                entity::direct_message_members::Column::User,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(
                                entity::direct_message::Entity,
                                entity::direct_message::Column::Id,
                            )
                            .from(
                                entity::direct_message_members::Entity,
                                entity::direct_message_members::Column::Directmessage,
                            ),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::permission::role::Entity)
                    .col(
                        ColumnDef::new(entity::permission::role::Column::Channel)
                            .string_len(15)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::permission::role::Column::Role)
                            .unsigned()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::permission::role::Column::Value)
                            .big_unsigned()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::channels::Entity, entity::channels::Column::Id)
                            .from(
                                entity::permission::role::Entity,
                                entity::permission::role::Column::Channel,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::roles::Entity, entity::roles::Column::Id)
                            .from(
                                entity::permission::role::Entity,
                                entity::permission::role::Column::Role,
                            ),
                    )
                    .clone(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .if_not_exists()
                    .table(entity::permission::user::Entity)
                    .col(
                        ColumnDef::new(entity::permission::user::Column::User)
                            .unsigned()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::permission::user::Column::Channel)
                            .string_len(15)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(entity::permission::user::Column::Value)
                            .big_unsigned()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::user::Entity, entity::user::Column::Id)
                            .from(
                                entity::permission::user::Entity,
                                entity::permission::user::Column::User,
                            ),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .to(entity::channels::Entity, entity::channels::Column::Id)
                            .from(
                                entity::permission::user::Entity,
                                entity::permission::user::Column::Channel,
                            ),
                    )
                    .clone(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(Table::drop().table(entity::messages::Entity).clone())
            .await?;
        manager
            .drop_table(Table::drop().table(entity::channels::Entity).clone())
            .await?;
        manager
            .drop_table(Table::drop().table(entity::roles::Entity).clone())
            .await?;
        manager
            .drop_table(Table::drop().table(entity::members::Entity).clone())
            .await?;
        manager
            .drop_table(Table::drop().table(entity::server::Entity).clone())
            .await?;
        manager
            .drop_table(
                Table::drop()
                    .table(entity::direct_message_members::Entity)
                    .clone(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(entity::direct_message::Entity).clone())
            .await?;
        manager
            .drop_table(Table::drop().table(entity::user::Entity).clone())
            .await
    }
}
